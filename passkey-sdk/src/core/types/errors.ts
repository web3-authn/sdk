// === ERROR TYPES FOR PASSKEY SDK ===

/**
 * Specific error codes for different failure scenarios throughout the passkey SDK
 * Enables precise error handling and better debugging
 */
export enum PasskeyErrorCode {
  // === Authentication Errors ===
  WEBAUTHN_NOT_SUPPORTED = 'WEBAUTHN_NOT_SUPPORTED',
  AUTHENTICATION_CANCELLED = 'AUTHENTICATION_CANCELLED',
  AUTHENTICATION_TIMEOUT = 'AUTHENTICATION_TIMEOUT',
  PRF_NOT_SUPPORTED = 'PRF_NOT_SUPPORTED',
  PRF_EXTRACTION_FAILED = 'PRF_EXTRACTION_FAILED',
  INVALID_CREDENTIAL = 'INVALID_CREDENTIAL',
  CREDENTIAL_NOT_FOUND = 'CREDENTIAL_NOT_FOUND',

  // === WebAuthn-Specific Errors ===
  CHALLENGE_EXPIRED = 'CHALLENGE_EXPIRED',
  CHALLENGE_ALREADY_USED = 'CHALLENGE_ALREADY_USED',
  CHALLENGE_NOT_FOUND = 'CHALLENGE_NOT_FOUND',
  INVALID_SIGNATURE = 'INVALID_SIGNATURE',
  ORIGIN_MISMATCH = 'ORIGIN_MISMATCH',
  RP_ID_MISMATCH = 'RP_ID_MISMATCH',
  USER_VERIFICATION_FAILED = 'USER_VERIFICATION_FAILED',
  PRF_NOT_AVAILABLE = 'PRF_NOT_AVAILABLE',
  OPERATION_CANCELLED = 'OPERATION_CANCELLED',
  TIMEOUT = 'TIMEOUT',

  // === Registration Errors ===
  REGISTRATION_CANCELLED = 'REGISTRATION_CANCELLED',
  REGISTRATION_TIMEOUT = 'REGISTRATION_TIMEOUT',
  CREDENTIAL_ALREADY_EXISTS = 'CREDENTIAL_ALREADY_EXISTS',
  ATTESTATION_VERIFICATION_FAILED = 'ATTESTATION_VERIFICATION_FAILED',
  COSE_KEY_EXTRACTION_FAILED = 'COSE_KEY_EXTRACTION_FAILED',

  // === Contract Errors ===
  CONTRACT_CALL_FAILED = 'CONTRACT_CALL_FAILED',
  CONTRACT_METHOD_NOT_FOUND = 'CONTRACT_METHOD_NOT_FOUND',
  INSUFFICIENT_GAS = 'INSUFFICIENT_GAS',
  ACCOUNT_NOT_FOUND = 'ACCOUNT_NOT_FOUND',
  CONTRACT_EXECUTION_FAILED = 'CONTRACT_EXECUTION_FAILED',
  INVALID_CONTRACT_RESPONSE = 'INVALID_CONTRACT_RESPONSE',

  // === Storage Errors ===
  STORAGE_QUOTA_EXCEEDED = 'STORAGE_QUOTA_EXCEEDED',
  INDEXDB_ERROR = 'INDEXDB_ERROR',
  INDEXDB_UNAVAILABLE = 'INDEXDB_UNAVAILABLE',
  STORAGE_CORRUPTION = 'STORAGE_CORRUPTION',
  CACHE_MISS = 'CACHE_MISS',

  // === Network Errors ===
  NETWORK_TIMEOUT = 'NETWORK_TIMEOUT',
  NETWORK_UNAVAILABLE = 'NETWORK_UNAVAILABLE',
  SERVER_ERROR = 'SERVER_ERROR',
  SERVER_UNAVAILABLE = 'SERVER_UNAVAILABLE',
  INVALID_SERVER_RESPONSE = 'INVALID_SERVER_RESPONSE',
  RPC_ERROR = 'RPC_ERROR',

  // === Validation Errors ===
  INVALID_ACCOUNT_ID = 'INVALID_ACCOUNT_ID',
  INVALID_PARAMETERS = 'INVALID_PARAMETERS',
  INVALID_CONFIGURATION = 'INVALID_CONFIGURATION',
  MISSING_REQUIRED_FIELD = 'MISSING_REQUIRED_FIELD',
  SCHEMA_VALIDATION_FAILED = 'SCHEMA_VALIDATION_FAILED',

  // === Worker Errors ===
  WORKER_INITIALIZATION_FAILED = 'WORKER_INITIALIZATION_FAILED',
  WORKER_COMMUNICATION_FAILED = 'WORKER_COMMUNICATION_FAILED',
  WORKER_TIMEOUT = 'WORKER_TIMEOUT',
  WASM_INITIALIZATION_FAILED = 'WASM_INITIALIZATION_FAILED',

  // === Transaction Errors ===
  TRANSACTION_SIGNING_FAILED = 'TRANSACTION_SIGNING_FAILED',
  TRANSACTION_VALIDATION_FAILED = 'TRANSACTION_VALIDATION_FAILED',
  INSUFFICIENT_BALANCE = 'INSUFFICIENT_BALANCE',
  NONCE_MISMATCH = 'NONCE_MISMATCH',

  // === General Errors ===
  UNKNOWN_ERROR = 'UNKNOWN_ERROR',
  OPERATION_NOT_SUPPORTED = 'OPERATION_NOT_SUPPORTED',
  SECURITY_CONTEXT_REQUIRED = 'SECURITY_CONTEXT_REQUIRED',
  FEATURE_NOT_AVAILABLE = 'FEATURE_NOT_AVAILABLE',
}

/**
 * Detailed error information with context for debugging and error reporting
 */
export interface PasskeyErrorDetails {
  /** Specific error code for programmatic handling */
  code: PasskeyErrorCode;

  /** Human-readable error message */
  message: string;

  /** Original error that caused this error */
  originalError?: Error;

  /** Additional context for debugging */
  context?: Record<string, any>;

  /** Timestamp when the error occurred */
  timestamp: number;

  /** Operation that was being performed when error occurred */
  operation?: 'registration' | 'authentication' | 'transaction' | 'storage' | 'network';

  /** Additional metadata for error tracking */
  metadata?: {
    userAgent?: string;
    nearNetwork?: 'testnet' | 'mainnet';
    serverless?: boolean;
    retryable?: boolean;
  };
}
