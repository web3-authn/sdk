{"version":3,"file":"vrf-worker.js","names":["base64UrlDecode","base64UrlEncode"],"sources":["../../../../src/core/types/vrf-worker.ts"],"sourcesContent":["/**\n * VRF Types for Web Worker Communication\n */\n\nimport * as wasmModule from '../../wasm_vrf_worker/wasm_vrf_worker.js';\nimport { StripFree } from \".\";\n\nexport type WasmGenerateVrfKeypairBootstrapRequest = StripFree<wasmModule.GenerateVrfKeypairBootstrapRequest>;\nexport type WasmGenerateVrfChallengeRequest = StripFree<wasmModule.GenerateVrfChallengeRequest>;\nexport type WasmUnlockVrfKeypairRequest = StripFree<wasmModule.UnlockVrfKeypairRequest>;\nexport type WasmDeriveVrfKeypairFromPrfRequest = StripFree<wasmModule.DeriveVrfKeypairFromPrfRequest>;\n\nexport type WasmShamir3PassConfigPRequest = StripFree<wasmModule.Shamir3PassConfigPRequest>;\nexport type WasmShamir3PassConfigServerUrlsRequest = StripFree<wasmModule.Shamir3PassConfigServerUrlsRequest>;\nexport type WasmShamir3PassClientDecryptVrfKeypairRequest = StripFree<wasmModule.Shamir3PassClientDecryptVrfKeypairRequest>;\n\nexport type WasmVrfWorkerRequestType = WasmGenerateVrfKeypairBootstrapRequest\n  | WasmGenerateVrfChallengeRequest\n  | WasmUnlockVrfKeypairRequest\n  | WasmDeriveVrfKeypairFromPrfRequest\n  | WasmShamir3PassConfigPRequest\n  | WasmShamir3PassConfigServerUrlsRequest\n  | WasmShamir3PassClientDecryptVrfKeypairRequest;\n\nimport { AccountId } from \"./accountIds\";\nimport { base64UrlDecode, base64UrlEncode } from \"../../utils/encoders\";\n\nexport interface VRFChallenge {\n  vrfInput: string;\n  vrfOutput: string;\n  vrfProof: string;\n  vrfPublicKey: string;\n  userId: string;\n  rpId: string;\n  blockHeight: string;\n  blockHash: string;\n}\n\n/**\n * Decode VRF output and use first 32 bytes as WebAuthn challenge\n * @param vrfChallenge - VRF challenge object\n * @returns 32-byte Uint8Array\n */\nexport function outputAs32Bytes(vrfChallenge: VRFChallenge): Uint8Array {\n  let vrfOutputBytes = base64UrlDecode(vrfChallenge.vrfOutput);\n  return vrfOutputBytes.slice(0, 32);\n}\n\n/**\n * Validate and create a VRFChallenge object\n * @param vrfChallengeData - The challenge data to validate\n * @returns VRFChallenge object\n */\nexport function validateVRFChallenge(vrfChallengeData: {\n  vrfInput: string;\n  vrfOutput: string;\n  vrfProof: string;\n  vrfPublicKey: string;\n  userId: string;\n  rpId: string;\n  blockHeight: string;\n  blockHash: string;\n}): VRFChallenge {\n  if (!vrfChallengeData.vrfInput || typeof vrfChallengeData.vrfInput !== 'string') {\n    throw new Error('vrfInput must be a non-empty string');\n  }\n  if (!vrfChallengeData.vrfOutput || typeof vrfChallengeData.vrfOutput !== 'string') {\n    throw new Error('vrfOutput must be a non-empty string');\n  }\n  if (!vrfChallengeData.vrfProof || typeof vrfChallengeData.vrfProof !== 'string') {\n    throw new Error('vrfProof must be a non-empty string');\n  }\n  if (!vrfChallengeData.vrfPublicKey || typeof vrfChallengeData.vrfPublicKey !== 'string') {\n    throw new Error('vrfPublicKey must be a non-empty string');\n  }\n  if (!vrfChallengeData.userId || typeof vrfChallengeData.userId !== 'string') {\n    throw new Error('userId must be a non-empty string');\n  }\n  if (!vrfChallengeData.rpId || typeof vrfChallengeData.rpId !== 'string') {\n    throw new Error('rpId must be a non-empty string');\n  }\n  if (!vrfChallengeData.blockHeight || typeof vrfChallengeData.blockHeight !== 'string') {\n    throw new Error('blockHeight must be a non-empty string');\n  }\n  if (!vrfChallengeData.blockHash || typeof vrfChallengeData.blockHash !== 'string') {\n    throw new Error('blockHash must be a non-empty string');\n  }\n\n  return {\n    vrfInput: vrfChallengeData.vrfInput,\n    vrfOutput: vrfChallengeData.vrfOutput,\n    vrfProof: vrfChallengeData.vrfProof,\n    vrfPublicKey: vrfChallengeData.vrfPublicKey,\n    userId: vrfChallengeData.userId,\n    rpId: vrfChallengeData.rpId,\n    blockHeight: vrfChallengeData.blockHeight,\n    blockHash: vrfChallengeData.blockHash,\n  };\n}\n\n/**\n * Create a random VRF challenge\n * @returns Partial<VRFChallenge> with vrfOutput set, but other fields are undefined\n * This is used for local operations that don't require a VRF verification\n */\nexport function createRandomVRFChallenge(): Partial<VRFChallenge> {\n  const challenge = crypto.getRandomValues(new Uint8Array(32));\n  const vrfOutput = base64UrlEncode(challenge);\n  return {\n    vrfOutput: vrfOutput,\n    vrfInput: undefined,\n    vrfProof: undefined,\n    vrfPublicKey: undefined,\n    userId: undefined,\n    rpId: undefined,\n    blockHeight: undefined,\n    blockHash: undefined,\n  };\n}\n\nexport interface VrfWorkerManagerConfig {\n  vrfWorkerUrl?: string;\n  workerTimeout?: number;\n  debug?: boolean;\n  // Optional Shamir 3-pass configuration passed to the VRF WASM worker at init\n  shamirPB64u?: string; // base64url prime p\n  relayServerUrl?: string;\n  applyServerLockRoute?: string;\n  removeServerLockRoute?: string;\n}\n\n// Define interfaces that are missing\nexport interface VRFWorkerStatus {\n  active: boolean;\n  nearAccountId: AccountId | null;\n  sessionDuration?: number;\n}\n\nexport interface EncryptedVRFKeypair {\n  encryptedVrfDataB64u: string;\n  chacha20NonceB64u: string;\n}\n\nexport interface VRFInputData {\n  userId: string;\n  rpId: string;\n  blockHeight: string;\n  blockHash: string;\n}\n\nexport interface VRFWorkerMessage<T extends WasmVrfWorkerRequestType> {\n  // type: wasmModule.WorkerRequestType\n  type: 'PING'\n      | 'GENERATE_VRF_CHALLENGE'\n      | 'GENERATE_VRF_KEYPAIR_BOOTSTRAP'\n      | 'UNLOCK_VRF_KEYPAIR'\n      | 'CHECK_VRF_STATUS'\n      | 'LOGOUT'\n      | 'DERIVE_VRF_KEYPAIR_FROM_PRF'\n      | 'SHAMIR3PASS_CLIENT_ENCRYPT_CURRENT_VRF_KEYPAIR' // client only\n      | 'SHAMIR3PASS_CLIENT_DECRYPT_VRF_KEYPAIR' // client only\n      | 'SHAMIR3PASS_APPLY_SERVER_LOCK_KEK' // server only\n      | 'SHAMIR3PASS_REMOVE_SERVER_LOCK_KEK' // server only\n      | 'SHAMIR3PASS_CONFIG_P'\n      | 'SHAMIR3PASS_CONFIG_SERVER_URLS'\n  id?: string;\n  payload?: T;\n}\n\nexport interface VRFWorkerResponse {\n  id?: string;\n  success: boolean;\n  data?: any;\n  error?: string;\n}\n\nexport interface VRFKeypairBootstrapResponse {\n  vrfPublicKey: string;\n  vrfChallengeData?: VRFChallenge;\n}\n\nexport interface EncryptedVRFKeypairResponse {\n  vrfPublicKey: string;\n  encryptedVrfKeypair: EncryptedVRFKeypair;\n}\n\n/**\n * Server-encrypted VRF keypair for commutative encryption scheme\n * This allows server-assisted VRF key recovery without the server seeing the plaintext\n */\nexport interface ServerEncryptedVrfKeypair {\n  /** Base64url-encoded VRF ciphertext (AEAD over VRF keypair bytes) */\n  ciphertextVrfB64u: string;\n  /** Base64url-encoded KEK with server lock applied (KEK_s) */\n  kek_s_b64u: string;\n}\n\n/**\n * Plaintext VRF keypair data structure\n * Used for loading decrypted VRF keypairs directly into memory\n */\nexport interface VRFKeypairData {\n  /** Bincode-serialized ECVRFKeyPair bytes (includes both private and public key) */\n  keypairBytes: number[];\n  /** Base64url-encoded public key for convenience and verification */\n  publicKeyBase64: string;\n}\n\n// Shamir 3-pass registration wrap result\nexport interface Shamir3PassRegisterWrapResult {\n  ciphertextVrfB64u: string;\n  enc_s_k_b64u: string;\n  vrfPublicKey: string;\n}\n\n"],"mappings":";;;;;;;;AA2CA,SAAgB,gBAAgB,cAAwC;CACtE,IAAI,iBAAiBA,+BAAgB,aAAa;AAClD,QAAO,eAAe,MAAM,GAAG;;;;;;;AAQjC,SAAgB,qBAAqB,kBASpB;AACf,KAAI,CAAC,iBAAiB,YAAY,OAAO,iBAAiB,aAAa,SACrE,OAAM,IAAI,MAAM;AAElB,KAAI,CAAC,iBAAiB,aAAa,OAAO,iBAAiB,cAAc,SACvE,OAAM,IAAI,MAAM;AAElB,KAAI,CAAC,iBAAiB,YAAY,OAAO,iBAAiB,aAAa,SACrE,OAAM,IAAI,MAAM;AAElB,KAAI,CAAC,iBAAiB,gBAAgB,OAAO,iBAAiB,iBAAiB,SAC7E,OAAM,IAAI,MAAM;AAElB,KAAI,CAAC,iBAAiB,UAAU,OAAO,iBAAiB,WAAW,SACjE,OAAM,IAAI,MAAM;AAElB,KAAI,CAAC,iBAAiB,QAAQ,OAAO,iBAAiB,SAAS,SAC7D,OAAM,IAAI,MAAM;AAElB,KAAI,CAAC,iBAAiB,eAAe,OAAO,iBAAiB,gBAAgB,SAC3E,OAAM,IAAI,MAAM;AAElB,KAAI,CAAC,iBAAiB,aAAa,OAAO,iBAAiB,cAAc,SACvE,OAAM,IAAI,MAAM;AAGlB,QAAO;EACL,UAAU,iBAAiB;EAC3B,WAAW,iBAAiB;EAC5B,UAAU,iBAAiB;EAC3B,cAAc,iBAAiB;EAC/B,QAAQ,iBAAiB;EACzB,MAAM,iBAAiB;EACvB,aAAa,iBAAiB;EAC9B,WAAW,iBAAiB;;;;;;;;AAShC,SAAgB,2BAAkD;CAChE,MAAM,YAAY,OAAO,gBAAgB,IAAI,WAAW;CACxD,MAAM,YAAYC,+BAAgB;AAClC,QAAO;EACM;EACX,UAAU;EACV,UAAU;EACV,cAAc;EACd,QAAQ;EACR,MAAM;EACN,aAAa;EACb,WAAW"}