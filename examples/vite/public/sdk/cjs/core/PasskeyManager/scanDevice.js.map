{"version":3,"file":"scanDevice.js","names":["DeviceLinkingPhase","DeviceLinkingStatus","getLoginState","vrfInputData: VRFInputData","executeDeviceLinkingContractCalls","error: any","DeviceLinkingError","DeviceLinkingErrorCode","DEVICE_LINKING_CONFIG"],"sources":["../../../../src/core/PasskeyManager/scanDevice.ts"],"sourcesContent":["import type { PasskeyManagerContext } from './index';\nimport { validateNearAccountId } from '../../utils/validation';\nimport { getLoginState } from './login';\nimport type { VRFInputData } from '../types/vrf-worker';\nimport type {\n  DeviceLinkingQRData,\n  LinkDeviceResult,\n  ScanAndLinkDeviceOptionsDevice1,\n} from '../types/linkDevice';\nimport { DeviceLinkingPhase, DeviceLinkingStatus } from '../types/passkeyManager';\nimport { DeviceLinkingError, DeviceLinkingErrorCode } from '../types/linkDevice';\nimport { DEVICE_LINKING_CONFIG } from '../../config.js';\nimport { executeDeviceLinkingContractCalls } from '../rpcCalls';\n\n/**\n * Device1 (original device): Link device using pre-scanned QR data\n */\nexport async function linkDeviceWithQRCode(\n  context: PasskeyManagerContext,\n  qrData: DeviceLinkingQRData,\n  options: ScanAndLinkDeviceOptionsDevice1\n): Promise<LinkDeviceResult> {\n  const { onEvent, onError } = options || {};\n\n  try {\n    onEvent?.({\n      step: 2,\n      phase: DeviceLinkingPhase.STEP_2_SCANNING,\n      status: DeviceLinkingStatus.PROGRESS,\n      message: 'Validating QR data...'\n    });\n\n    // Validate QR data\n    validateDeviceLinkingQRData(qrData);\n\n    // 3. Get Device1's current account (the account that will receive the new key)\n    const device1LoginState = await getLoginState(context);\n\n    if (!device1LoginState.isLoggedIn || !device1LoginState.nearAccountId) {\n      throw new Error('Device1 must be logged in to authorize device linking');\n    }\n\n    const device1AccountId = device1LoginState.nearAccountId;\n\n    // 4. Execute batched transaction: AddKey + Contract notification\n    const fundingAmount = options.fundingAmount;\n\n    // Parse the device public key for AddKey action\n    const device2PublicKey = qrData.device2PublicKey;\n    if (!device2PublicKey.startsWith('ed25519:')) {\n      throw new Error('Invalid device public key format');\n    }\n\n    onEvent?.({\n      step: 3,\n      phase: DeviceLinkingPhase.STEP_3_AUTHORIZATION,\n      status: DeviceLinkingStatus.PROGRESS,\n      message: `Performing TouchID authentication for device linking...`\n    });\n\n    const userData = await context.webAuthnManager.getUser(device1AccountId);\n    const nearPublicKeyStr = userData?.clientNearPublicKey;\n    if (!nearPublicKeyStr) {\n      throw new Error('Client NEAR public key not found in user data');\n    }\n    // Generate VRF challenge once for both transactions\n    const {\n      accessKeyInfo,\n      nextNonce,\n      txBlockHeight,\n      txBlockHash\n    } = await context.webAuthnManager.getNonceManager().getNonceBlockHashAndHeight(context.nearClient);\n    const nextNextNonce = (BigInt(nextNonce) + BigInt(1)).toString();\n    const nextNextNextNonce = (BigInt(nextNonce) + BigInt(2)).toString();\n\n    const vrfInputData: VRFInputData = {\n      userId: device1AccountId,\n      rpId: window.location.hostname,\n      blockHeight: txBlockHeight,\n      blockHash: txBlockHash,\n    };\n\n    const vrfChallenge = await context.webAuthnManager.generateVrfChallenge(vrfInputData);\n\n    onEvent?.({\n      step: 6,\n      phase: DeviceLinkingPhase.STEP_6_REGISTRATION,\n      status: DeviceLinkingStatus.PROGRESS,\n      message: 'TouchID successful! Signing AddKey transaction...'\n    });\n\n    // Execute device linking transactions using the centralized RPC function\n    const {\n      addKeyTxResult,\n      storeDeviceLinkingTxResult,\n      signedDeleteKeyTransaction\n    } = await executeDeviceLinkingContractCalls({\n      context,\n      device1AccountId,\n      device2PublicKey,\n      nextNonce,\n      nextNextNonce,\n      nextNextNextNonce,\n      txBlockHash,\n      vrfChallenge,\n      onEvent\n    });\n\n    const result = {\n      success: true,\n      device2PublicKey: qrData.device2PublicKey,\n      transactionId: addKeyTxResult?.transaction?.hash\n        || storeDeviceLinkingTxResult?.transaction?.hash\n        || 'unknown',\n      fundingAmount,\n      linkedToAccount: device1AccountId, // Include which account the key was added to\n      signedDeleteKeyTransaction\n    };\n\n    onEvent?.({\n      step: 6,\n      phase: DeviceLinkingPhase.STEP_6_REGISTRATION,\n      status: DeviceLinkingStatus.SUCCESS,\n      message: `Device2's key added to ${device1AccountId} successfully!`\n    });\n\n    return result;\n\n  } catch (error: any) {\n    console.error('LinkDeviceFlow: linkDeviceWithQRData caught error:', error);\n\n    const errorMessage = `Failed to scan and link device: ${error.message}`;\n    onError?.(new Error(errorMessage));\n\n    throw new DeviceLinkingError(\n      errorMessage,\n      DeviceLinkingErrorCode.AUTHORIZATION_TIMEOUT,\n      'authorization'\n    );\n  }\n}\n\nexport function validateDeviceLinkingQRData(qrData: DeviceLinkingQRData): void {\n  if (!qrData.device2PublicKey) {\n    throw new DeviceLinkingError(\n      'Missing device public key',\n      DeviceLinkingErrorCode.INVALID_QR_DATA,\n      'authorization'\n    );\n  }\n\n  if (!qrData.timestamp) {\n    throw new DeviceLinkingError(\n      'Missing timestamp',\n      DeviceLinkingErrorCode.INVALID_QR_DATA,\n      'authorization'\n    );\n  }\n\n  // Check timestamp is not too old (max 15 minutes)\n  const maxAge = DEVICE_LINKING_CONFIG.TIMEOUTS.QR_CODE_MAX_AGE_MS;\n  if (Date.now() - qrData.timestamp > maxAge) {\n    throw new DeviceLinkingError(\n      'QR code expired',\n      DeviceLinkingErrorCode.SESSION_EXPIRED,\n      'authorization'\n    );\n  }\n\n  // Account ID is optional - Device2 discovers it from contract logs\n  if (qrData.accountId) {\n    validateNearAccountId(qrData.accountId);\n  }\n}\n"],"mappings":";;;;;;;;;;;AAiBA,eAAsB,qBACpB,SACA,QACA,SAC2B;CAC3B,MAAM,EAAE,SAAS,YAAY,WAAW;AAExC,KAAI;AACF,YAAU;GACR,MAAM;GACN,OAAOA,0CAAmB;GAC1B,QAAQC,2CAAoB;GAC5B,SAAS;;AAIX,8BAA4B;EAG5B,MAAM,oBAAoB,MAAMC,4BAAc;AAE9C,MAAI,CAAC,kBAAkB,cAAc,CAAC,kBAAkB,cACtD,OAAM,IAAI,MAAM;EAGlB,MAAM,mBAAmB,kBAAkB;EAG3C,MAAM,gBAAgB,QAAQ;EAG9B,MAAM,mBAAmB,OAAO;AAChC,MAAI,CAAC,iBAAiB,WAAW,YAC/B,OAAM,IAAI,MAAM;AAGlB,YAAU;GACR,MAAM;GACN,OAAOF,0CAAmB;GAC1B,QAAQC,2CAAoB;GAC5B,SAAS;;EAGX,MAAM,WAAW,MAAM,QAAQ,gBAAgB,QAAQ;EACvD,MAAM,mBAAmB,UAAU;AACnC,MAAI,CAAC,iBACH,OAAM,IAAI,MAAM;EAGlB,MAAM,EACJ,eACA,WACA,eACA,gBACE,MAAM,QAAQ,gBAAgB,kBAAkB,2BAA2B,QAAQ;EACvF,MAAM,iBAAiB,OAAO,aAAa,OAAO,IAAI;EACtD,MAAM,qBAAqB,OAAO,aAAa,OAAO,IAAI;EAE1D,MAAME,eAA6B;GACjC,QAAQ;GACR,MAAM,OAAO,SAAS;GACtB,aAAa;GACb,WAAW;;EAGb,MAAM,eAAe,MAAM,QAAQ,gBAAgB,qBAAqB;AAExE,YAAU;GACR,MAAM;GACN,OAAOH,0CAAmB;GAC1B,QAAQC,2CAAoB;GAC5B,SAAS;;EAIX,MAAM,EACJ,gBACA,4BACA,+BACE,MAAMG,mDAAkC;GAC1C;GACA;GACA;GACA;GACA;GACA;GACA;GACA;GACA;;EAGF,MAAM,SAAS;GACb,SAAS;GACT,kBAAkB,OAAO;GACzB,eAAe,gBAAgB,aAAa,QACvC,4BAA4B,aAAa,QACzC;GACL;GACA,iBAAiB;GACjB;;AAGF,YAAU;GACR,MAAM;GACN,OAAOJ,0CAAmB;GAC1B,QAAQC,2CAAoB;GAC5B,SAAS,0BAA0B,iBAAiB;;AAGtD,SAAO;UAEAI,OAAY;AACnB,UAAQ,MAAM,sDAAsD;EAEpE,MAAM,eAAe,mCAAmC,MAAM;AAC9D,YAAU,IAAI,MAAM;AAEpB,QAAM,IAAIC,sCACR,cACAC,0CAAuB,uBACvB;;;AAKN,SAAgB,4BAA4B,QAAmC;AAC7E,KAAI,CAAC,OAAO,iBACV,OAAM,IAAID,sCACR,6BACAC,0CAAuB,iBACvB;AAIJ,KAAI,CAAC,OAAO,UACV,OAAM,IAAID,sCACR,qBACAC,0CAAuB,iBACvB;CAKJ,MAAM,SAASC,qCAAsB,SAAS;AAC9C,KAAI,KAAK,QAAQ,OAAO,YAAY,OAClC,OAAM,IAAIF,sCACR,mBACAC,0CAAuB,iBACvB;AAKJ,KAAI,OAAO,UACT,0CAAsB,OAAO"}