{"version":3,"file":"signNEP413.js","names":["ActionPhase","ActionStatus"],"sources":["../../../../src/core/PasskeyManager/signNEP413.ts"],"sourcesContent":["import type { PasskeyManagerContext } from './index';\nimport type { BaseHooksOptions } from '../types/passkeyManager';\nimport { ActionPhase, ActionStatus } from '../types/passkeyManager';\nimport type { AccountId } from '../types/accountIds';\n\n/**\n * NEP-413 message signing parameters\n */\nexport interface SignNEP413MessageParams {\n  /** The message to sign */\n  message: string;\n  /** The recipient identifier */\n  recipient: string;\n  /** Optional state parameter */\n  state?: string;\n}\n\n/**\n * NEP-413 message signing result\n */\nexport interface SignNEP413MessageResult {\n  /** Success status */\n  success: boolean;\n  /** NEAR account ID that signed the message */\n  accountId?: string;\n  /** Base58-encoded public key */\n  publicKey?: string;\n  /** Base64-encoded signature */\n  signature?: string;\n  /** Optional state parameter */\n  state?: string;\n  /** Error message if signing failed */\n  error?: string;\n}\n\n/**\n * Sign a NEP-413 message using the user's passkey-derived private key\n *\n * This function implements the NEP-413 standard for off-chain message signing:\n * - Creates a payload with message, recipient, nonce, and state\n * - Serializes using Borsh\n * - Adds NEP-413 prefix (2^31 + 413)\n * - Hashes with SHA-256\n * - Signs with Ed25519\n * - Returns base64-encoded signature\n *\n * @param context - PasskeyManager context\n * @param nearAccountId - NEAR account ID to sign with\n * @param params - NEP-413 signing parameters\n * @param options - Action options for event handling\n * @returns Promise resolving to signing result\n */\nexport async function signNEP413Message(args: {\n  context: PasskeyManagerContext,\n  nearAccountId: AccountId,\n  params: SignNEP413MessageParams,\n  options?: BaseHooksOptions\n}): Promise<SignNEP413MessageResult> {\n\n  const { context, nearAccountId, params, options } = args;\n  const { nearClient, webAuthnManager } = context;\n\n  try {\n    // Emit preparation event\n    options?.onEvent?.({\n      step: 1,\n      phase: ActionPhase.STEP_1_PREPARATION,\n      status: ActionStatus.PROGRESS,\n      message: 'Preparing NEP-413 message signing'\n    });\n\n    // Get user data and authenticators for NEP-413 signing\n    const [vrfStatus, userData, authenticators] = await Promise.all([\n      webAuthnManager.checkVrfStatus(),\n      webAuthnManager.getUser(nearAccountId),\n      webAuthnManager.getAuthenticatorsByUser(nearAccountId),\n    ]);\n    // Check VRF status to ensure user is authenticated\n    if (!vrfStatus.active) {\n      throw new Error('User not authenticated. Please login first.');\n    }\n    if (!userData || !userData.clientNearPublicKey) {\n      throw new Error(`User data not found for ${nearAccountId}`);\n    }\n\n    // Generate a random 32-byte nonce for NEP-413 signing\n    const {\n      nextNonce,\n      txBlockHash,\n      txBlockHeight\n    } = await context.webAuthnManager.getNonceManager().getNonceBlockHashAndHeight(nearClient);\n\n    // Get credential for NEP-413 signing\n    const vrfChallenge = await webAuthnManager.generateVrfChallenge({\n      userId: nearAccountId,\n      rpId: window.location.hostname,\n      blockHash: txBlockHash,\n      blockHeight: txBlockHeight,\n    });\n    const credential = await context.webAuthnManager.getCredentials({\n      nearAccountId,\n      challenge: vrfChallenge,\n      authenticators,\n    });\n\n    // Emit signing progress event\n    options?.onEvent?.({\n      step: 6,\n      phase: ActionPhase.STEP_6_TRANSACTION_SIGNING_PROGRESS,\n      status: ActionStatus.PROGRESS,\n      message: 'Signing NEP-413 message'\n    });\n\n    // Send to WebAuthnManager for signing\n    const result = await context.webAuthnManager.signNEP413Message({\n      message: params.message,\n      recipient: params.recipient,\n      nonce: nextNonce,\n      state: params.state || null,\n      accountId: nearAccountId,\n      credential\n    });\n\n    if (result.success) {\n      // Emit completion event\n      options?.onEvent?.({\n        step: 9,\n        phase: ActionPhase.STEP_9_ACTION_COMPLETE,\n        status: ActionStatus.SUCCESS,\n        message: 'NEP-413 message signed successfully'\n      });\n\n      return {\n        success: true,\n        accountId: result.accountId,\n        publicKey: result.publicKey,\n        signature: result.signature,\n        state: result.state\n      };\n    } else {\n      throw new Error(`NEP-413 signing failed: ${result.error || 'Unknown error'}`);\n    }\n\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n\n    // Emit error event\n    options?.onEvent?.({\n      step: 0,\n      phase: 'action-error' as any,\n      status: 'error' as any,\n      message: `NEP-413 signing failed: ${errorMessage}`,\n      error: errorMessage\n    });\n\n    options?.onError?.(error instanceof Error ? error : new Error(errorMessage));\n\n    return {\n      success: false,\n      error: errorMessage\n    };\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAoDA,eAAsB,kBAAkB,MAKH;CAEnC,MAAM,EAAE,SAAS,eAAe,QAAQ,YAAY;CACpD,MAAM,EAAE,YAAY,oBAAoB;AAExC,KAAI;AAEF,WAAS,UAAU;GACjB,MAAM;GACN,OAAOA,mCAAY;GACnB,QAAQC,oCAAa;GACrB,SAAS;;EAIX,MAAM,CAAC,WAAW,UAAU,kBAAkB,MAAM,QAAQ,IAAI;GAC9D,gBAAgB;GAChB,gBAAgB,QAAQ;GACxB,gBAAgB,wBAAwB;;AAG1C,MAAI,CAAC,UAAU,OACb,OAAM,IAAI,MAAM;AAElB,MAAI,CAAC,YAAY,CAAC,SAAS,oBACzB,OAAM,IAAI,MAAM,2BAA2B;EAI7C,MAAM,EACJ,WACA,aACA,kBACE,MAAM,QAAQ,gBAAgB,kBAAkB,2BAA2B;EAG/E,MAAM,eAAe,MAAM,gBAAgB,qBAAqB;GAC9D,QAAQ;GACR,MAAM,OAAO,SAAS;GACtB,WAAW;GACX,aAAa;;EAEf,MAAM,aAAa,MAAM,QAAQ,gBAAgB,eAAe;GAC9D;GACA,WAAW;GACX;;AAIF,WAAS,UAAU;GACjB,MAAM;GACN,OAAOD,mCAAY;GACnB,QAAQC,oCAAa;GACrB,SAAS;;EAIX,MAAM,SAAS,MAAM,QAAQ,gBAAgB,kBAAkB;GAC7D,SAAS,OAAO;GAChB,WAAW,OAAO;GAClB,OAAO;GACP,OAAO,OAAO,SAAS;GACvB,WAAW;GACX;;AAGF,MAAI,OAAO,SAAS;AAElB,YAAS,UAAU;IACjB,MAAM;IACN,OAAOD,mCAAY;IACnB,QAAQC,oCAAa;IACrB,SAAS;;AAGX,UAAO;IACL,SAAS;IACT,WAAW,OAAO;IAClB,WAAW,OAAO;IAClB,WAAW,OAAO;IAClB,OAAO,OAAO;;QAGhB,OAAM,IAAI,MAAM,2BAA2B,OAAO,SAAS;UAGtD,OAAO;EACd,MAAM,eAAe,iBAAiB,QAAQ,MAAM,UAAU;AAG9D,WAAS,UAAU;GACjB,MAAM;GACN,OAAO;GACP,QAAQ;GACR,SAAS,2BAA2B;GACpC,OAAO;;AAGT,WAAS,UAAU,iBAAiB,QAAQ,QAAQ,IAAI,MAAM;AAE9D,SAAO;GACL,SAAS;GACT,OAAO"}