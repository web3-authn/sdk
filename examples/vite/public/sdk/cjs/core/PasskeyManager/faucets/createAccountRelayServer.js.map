{"version":3,"file":"createAccountRelayServer.js","names":["RegistrationPhase","RegistrationStatus","removePrfOutputGuard","serializeRegistrationCredential","requestData: CreateAccountAndRegisterUserRequest","base64UrlDecode","error: any"],"sources":["../../../../../src/core/PasskeyManager/faucets/createAccountRelayServer.ts"],"sourcesContent":["import { VRFChallenge } from '../../../core/types/vrf-worker';\nimport { RegistrationSSEEvent, RegistrationPhase, RegistrationStatus } from '../../types/passkeyManager';\nimport { PasskeyManagerContext } from '..';\nimport { base64UrlDecode } from '../../../utils/encoders';\nimport { removePrfOutputGuard, serializeRegistrationCredential } from '../../WebAuthnManager/credentialsHelpers';\nimport { WebAuthnRegistrationCredential } from '../../types/webauthn';\nimport type { AuthenticatorOptions } from '../../types/authenticatorOptions';\n\n/**\n * HTTP Request body for the relay server's /create_account_and_register_user endpoint\n */\nexport interface CreateAccountAndRegisterUserRequest {\n  new_account_id: string;\n  new_public_key: string;\n  device_number: number;\n  vrf_data: {\n    vrf_input_data: number[];\n    vrf_output: number[];\n    vrf_proof: number[];\n    public_key: number[];\n    user_id: string;\n    rp_id: string;\n    block_height: number;\n    block_hash: number[];\n  };\n  webauthn_registration: WebAuthnRegistrationCredential;\n  deterministic_vrf_public_key: number[];\n  authenticator_options?: AuthenticatorOptions;\n}\n\n/**\n * Create account and register user using relay-server atomic endpoint\n * Makes a single call to the relay-server's /create_account_and_register_user endpoint\n * which calls the contract's atomic create_account_and_register_user function\n */\nexport async function createAccountAndRegisterWithRelayServer(\n  context: PasskeyManagerContext,\n  nearAccountId: string,\n  publicKey: string,\n  credential: PublicKeyCredential,\n  vrfChallenge: VRFChallenge,\n  deterministicVrfPublicKey: string,\n  authenticatorOptions?: AuthenticatorOptions,\n  onEvent?: (event: RegistrationSSEEvent) => void,\n): Promise<{\n  success: boolean;\n  transactionId?: string;\n  error?: string;\n  preSignedDeleteTransaction: null; // not used for relay server\n}> {\n  const { configs } = context;\n\n  if (!configs.relayer.url) {\n    throw new Error('Relay server URL is required for atomic registration');\n  }\n\n  try {\n    onEvent?.({\n      step: 3,\n      phase: RegistrationPhase.STEP_3_ACCESS_KEY_ADDITION,\n      status: RegistrationStatus.PROGRESS,\n      message: 'Adding access key to account...',\n    });\n\n    // Serialize the WebAuthn credential properly for the contract\n    const serializedCredential = removePrfOutputGuard<WebAuthnRegistrationCredential>(serializeRegistrationCredential(credential));\n\n    // Prepare data for atomic endpoint\n    const requestData: CreateAccountAndRegisterUserRequest = {\n      new_account_id: nearAccountId,\n      new_public_key: publicKey,\n      device_number: 1, // First device gets device number 1 (1-indexed)\n      vrf_data: {\n        vrf_input_data: Array.from(base64UrlDecode(vrfChallenge.vrfInput)),\n        vrf_output: Array.from(base64UrlDecode(vrfChallenge.vrfOutput)),\n        vrf_proof: Array.from(base64UrlDecode(vrfChallenge.vrfProof)),\n        public_key: Array.from(base64UrlDecode(vrfChallenge.vrfPublicKey)),\n        user_id: vrfChallenge.userId,\n        rp_id: vrfChallenge.rpId,\n        block_height: Number(vrfChallenge.blockHeight),\n        block_hash: Array.from(base64UrlDecode(vrfChallenge.blockHash)),\n      },\n      webauthn_registration: serializedCredential,\n      deterministic_vrf_public_key: Array.from(base64UrlDecode(deterministicVrfPublicKey)),\n      authenticator_options: authenticatorOptions || context.configs.authenticatorOptions,\n    };\n\n    onEvent?.({\n      step: 6,\n      phase: RegistrationPhase.STEP_6_CONTRACT_REGISTRATION,\n      status: RegistrationStatus.PROGRESS,\n      message: 'Registering user with Web3Authn contract...',\n    });\n\n    // Call the atomic endpoint\n    const response = await fetch(`${configs.relayer.url}/create_account_and_register_user`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(requestData)\n    });\n\n    // Handle both successful and failed responses\n    const result = await response.json();\n\n    if (!response.ok) {\n      // Extract specific error message from relay server response\n      const errorMessage = result.error || result.message || `HTTP ${response.status}: ${response.statusText}`;\n      throw new Error(errorMessage);\n    }\n\n    if (!result.success) {\n      throw new Error(result.error || 'Atomic registration failed');\n    }\n\n    onEvent?.({\n      step: 6,\n      phase: RegistrationPhase.STEP_6_CONTRACT_REGISTRATION,\n      status: RegistrationStatus.SUCCESS,\n      message: 'User registered with Web3Authn contract successfully',\n    });\n\n    return {\n      success: true,\n      transactionId: result.transactionHash,\n      // No preSignedDeleteTransaction needed for atomic transactions\n      preSignedDeleteTransaction: null\n    };\n\n  } catch (error: any) {\n    console.error('Atomic registration failed:', error);\n\n    onEvent?.({\n      step: 0,\n      phase: RegistrationPhase.REGISTRATION_ERROR,\n      status: RegistrationStatus.ERROR,\n      message: 'Registration failed',\n      error: error.message,\n    });\n\n    return {\n      success: false,\n      error: error.message,\n      preSignedDeleteTransaction: null\n    };\n  }\n}\n"],"mappings":";;;;;;;;;;AAmCA,eAAsB,wCACpB,SACA,eACA,WACA,YACA,cACA,2BACA,sBACA,SAMC;CACD,MAAM,EAAE,YAAY;AAEpB,KAAI,CAAC,QAAQ,QAAQ,IACnB,OAAM,IAAI,MAAM;AAGlB,KAAI;AACF,YAAU;GACR,MAAM;GACN,OAAOA,yCAAkB;GACzB,QAAQC,0CAAmB;GAC3B,SAAS;;EAIX,MAAM,uBAAuBC,gDAAqDC,2DAAgC;EAGlH,MAAMC,cAAmD;GACvD,gBAAgB;GAChB,gBAAgB;GAChB,eAAe;GACf,UAAU;IACR,gBAAgB,MAAM,KAAKC,+BAAgB,aAAa;IACxD,YAAY,MAAM,KAAKA,+BAAgB,aAAa;IACpD,WAAW,MAAM,KAAKA,+BAAgB,aAAa;IACnD,YAAY,MAAM,KAAKA,+BAAgB,aAAa;IACpD,SAAS,aAAa;IACtB,OAAO,aAAa;IACpB,cAAc,OAAO,aAAa;IAClC,YAAY,MAAM,KAAKA,+BAAgB,aAAa;;GAEtD,uBAAuB;GACvB,8BAA8B,MAAM,KAAKA,+BAAgB;GACzD,uBAAuB,wBAAwB,QAAQ,QAAQ;;AAGjE,YAAU;GACR,MAAM;GACN,OAAOL,yCAAkB;GACzB,QAAQC,0CAAmB;GAC3B,SAAS;;EAIX,MAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,QAAQ,IAAI,oCAAoC;GACtF,QAAQ;GACR,SAAS,EAAE,gBAAgB;GAC3B,MAAM,KAAK,UAAU;;EAIvB,MAAM,SAAS,MAAM,SAAS;AAE9B,MAAI,CAAC,SAAS,IAAI;GAEhB,MAAM,eAAe,OAAO,SAAS,OAAO,WAAW,QAAQ,SAAS,OAAO,IAAI,SAAS;AAC5F,SAAM,IAAI,MAAM;;AAGlB,MAAI,CAAC,OAAO,QACV,OAAM,IAAI,MAAM,OAAO,SAAS;AAGlC,YAAU;GACR,MAAM;GACN,OAAOD,yCAAkB;GACzB,QAAQC,0CAAmB;GAC3B,SAAS;;AAGX,SAAO;GACL,SAAS;GACT,eAAe,OAAO;GAEtB,4BAA4B;;UAGvBK,OAAY;AACnB,UAAQ,MAAM,+BAA+B;AAE7C,YAAU;GACR,MAAM;GACN,OAAON,yCAAkB;GACzB,QAAQC,0CAAmB;GAC3B,SAAS;GACT,OAAO,MAAM;;AAGf,SAAO;GACL,SAAS;GACT,OAAO,MAAM;GACb,4BAA4B"}