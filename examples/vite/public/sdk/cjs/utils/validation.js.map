{"version":3,"file":"validation.js","names":[],"sources":["../../../src/utils/validation.ts"],"sourcesContent":["\nexport interface ValidationResult {\n  valid: boolean;\n  error?: string;\n}\n\nexport interface NearAccountValidationOptions {\n  /** Restrict to specific suffixes (e.g., ['testnet', 'near']) */\n  allowedSuffixes?: string[];\n  /** Require Top-level domains with exactly 2 parts (username.suffix) instead of allowing subdomains */\n  requireTopLevelDomain?: boolean;\n}\n\n/**\n * Validate NEAR account ID format with optional suffix restrictions\n * @param nearAccountId - The account ID to validate\n * @param options - Optional validation constraints\n */\nexport function validateNearAccountId(\n  nearAccountId: string,\n  options: NearAccountValidationOptions = {\n    allowedSuffixes: ['testnet', 'near'],\n    requireTopLevelDomain: false\n  }\n): ValidationResult {\n  if (!nearAccountId || typeof nearAccountId !== 'string') {\n    return { valid: false, error: 'Account ID must be a non-empty string' };\n  }\n\n  const parts = nearAccountId.split('.');\n  if (parts.length < 2) {\n    return { valid: false, error: 'Account ID must contain at least one dot (e.g., username.testnet)' };\n  }\n\n  // Check for exact two parts requirement (e.g., server registration)\n  if (options.requireTopLevelDomain && parts.length !== 2) {\n    const suffixList = options.allowedSuffixes?.join(', ') || 'valid suffixes';\n    return {\n      valid: false,\n      error: `Invalid NEAR account ID format. Expected format: <username>.<suffix> where suffix is one of: ${suffixList}`\n    };\n  }\n\n  const username = parts[0];\n  const suffix = parts[parts.length - 1]; // Last part for suffix checking\n  const domain = parts.slice(1).join('.');\n\n  // Validate username part\n  if (!username || username.length === 0) {\n    return { valid: false, error: 'Username part cannot be empty' };\n  }\n\n  if (!/^[a-z0-9_\\-]+$/.test(username)) {\n    return { valid: false, error: 'Username can only contain lowercase letters, numbers, underscores, and hyphens' };\n  }\n\n  // Validate domain part\n  if (!domain || domain.length === 0) {\n    return { valid: false, error: 'Domain part cannot be empty' };\n  }\n\n  // Check allowed suffixes if specified\n  if (options.allowedSuffixes && options.allowedSuffixes.length > 0) {\n    // Check if the account ID ends with any of the allowed suffixes\n    const matchesAnySuffix = options.allowedSuffixes.some(allowedSuffix => {\n      // For single-part suffixes, check the last part\n      if (!allowedSuffix.includes('.')) {\n        return suffix === allowedSuffix;\n      }\n      // For multi-part suffixes, check if the account ID ends with the full suffix\n      return nearAccountId.endsWith(`.${allowedSuffix}`);\n    });\n\n    if (!matchesAnySuffix) {\n      return {\n        valid: false,\n        error: `Invalid NEAR account ID suffix. Expected account to end with one of: ${options.allowedSuffixes.join(', ')}`\n      };\n    }\n  }\n\n  return { valid: true };\n}"],"mappings":";;;;;;;AAkBA,SAAgB,sBACd,eACA,UAAwC;CACtC,iBAAiB,CAAC,WAAW;CAC7B,uBAAuB;GAEP;AAClB,KAAI,CAAC,iBAAiB,OAAO,kBAAkB,SAC7C,QAAO;EAAE,OAAO;EAAO,OAAO;;CAGhC,MAAM,QAAQ,cAAc,MAAM;AAClC,KAAI,MAAM,SAAS,EACjB,QAAO;EAAE,OAAO;EAAO,OAAO;;AAIhC,KAAI,QAAQ,yBAAyB,MAAM,WAAW,GAAG;EACvD,MAAM,aAAa,QAAQ,iBAAiB,KAAK,SAAS;AAC1D,SAAO;GACL,OAAO;GACP,OAAO,gGAAgG;;;CAI3G,MAAM,WAAW,MAAM;CACvB,MAAM,SAAS,MAAM,MAAM,SAAS;CACpC,MAAM,SAAS,MAAM,MAAM,GAAG,KAAK;AAGnC,KAAI,CAAC,YAAY,SAAS,WAAW,EACnC,QAAO;EAAE,OAAO;EAAO,OAAO;;AAGhC,KAAI,CAAC,iBAAiB,KAAK,UACzB,QAAO;EAAE,OAAO;EAAO,OAAO;;AAIhC,KAAI,CAAC,UAAU,OAAO,WAAW,EAC/B,QAAO;EAAE,OAAO;EAAO,OAAO;;AAIhC,KAAI,QAAQ,mBAAmB,QAAQ,gBAAgB,SAAS,GAAG;EAEjE,MAAM,mBAAmB,QAAQ,gBAAgB,MAAK,kBAAiB;AAErE,OAAI,CAAC,cAAc,SAAS,KAC1B,QAAO,WAAW;AAGpB,UAAO,cAAc,SAAS,IAAI;;AAGpC,MAAI,CAAC,iBACH,QAAO;GACL,OAAO;GACP,OAAO,wEAAwE,QAAQ,gBAAgB,KAAK;;;AAKlH,QAAO,EAAE,OAAO"}