{"version":3,"file":"errors.js","names":[],"sources":["../../../src/utils/errors.ts"],"sourcesContent":["/**\n * Centralized error handling utilities for the Passkey SDK\n */\n\n/**\n * Check if an error is related to user cancellation of TouchID/FaceID prompt\n * @param error - The error object or error message string\n * @returns true if the error indicates user cancellation\n */\nexport function isTouchIdCancellationError(error: any): boolean {\n  const errorMessage = typeof error === 'string' ? error : error?.message || '';\n\n  return errorMessage.includes('The operation either timed out or was not allowed') ||\n         errorMessage.includes('NotAllowedError') ||\n         errorMessage.includes('AbortError') ||\n         errorMessage.includes('user cancelled') ||\n         errorMessage.includes('user aborted');\n}\n\n/**\n * Get a user-friendly error message for TouchID/FaceID cancellation\n * @param context - The context where the cancellation occurred (e.g., 'registration', 'login')\n * @returns A user-friendly error message\n */\nexport function getTouchIdCancellationMessage(context: 'registration' | 'login'): string {\n  switch (context) {\n    case 'registration':\n      return `Registration was cancelled. Please try again when you're ready to set up your passkey.`;\n    case 'login':\n      return `Login was cancelled. Please try again when you're ready to authenticate.`;\n    default:\n      return `Operation was cancelled. Please try again when you're ready.`;\n  }\n}\n\n/**\n * Transform an error message to be more user-friendly\n * @param error - The original error object or message\n * @param context - The context where the error occurred\n * @param nearAccountId - Optional NEAR account ID for context-specific messages\n * @returns A user-friendly error message\n */\nexport function getUserFriendlyErrorMessage(\n  error: any,\n  context: 'registration' | 'login' = 'registration',\n  nearAccountId?: string\n): string {\n  const errorMessage = typeof error === 'string' ? error : error?.message || '';\n\n  // Handle TouchID/FaceID cancellation\n  if (isTouchIdCancellationError(error)) {\n    return getTouchIdCancellationMessage(context);\n  }\n\n  // Handle other common errors\n  if (errorMessage.includes('one of the credentials already registered')) {\n    return `A passkey for '${nearAccountId || 'this account'}' already exists. Please try logging in instead.`;\n  }\n\n  if (errorMessage.includes('Cannot deserialize the contract state')) {\n    return `Contract state deserialization failed. This may be due to a contract upgrade. Please try again or contact support.`;\n  }\n\n  if (errorMessage.includes('Web3Authn contract registration check failed')) {\n    return `Contract registration check failed: ${errorMessage.replace('Web3Authn contract registration check failed: ', '')}`;\n  }\n\n  if (errorMessage.includes('Unknown error occurred')) {\n    return `${context === 'registration' ? 'Registration' : 'Login'} failed due to an unknown error. Please check your connection and try again.`;\n  }\n\n  // Return the original error message if no specific handling is needed\n  return errorMessage;\n}"],"mappings":";;;;;;;;;;AASA,SAAgB,2BAA2B,OAAqB;CAC9D,MAAM,eAAe,OAAO,UAAU,WAAW,QAAQ,OAAO,WAAW;AAE3E,QAAO,aAAa,SAAS,wDACtB,aAAa,SAAS,sBACtB,aAAa,SAAS,iBACtB,aAAa,SAAS,qBACtB,aAAa,SAAS;;;;;;;AAQ/B,SAAgB,8BAA8B,SAA2C;AACvF,SAAQ,SAAR;EACE,KAAK,eACH,QAAO;EACT,KAAK,QACH,QAAO;EACT,QACE,QAAO;;;;;;;;;;AAWb,SAAgB,4BACd,OACA,UAAoC,gBACpC,eACQ;CACR,MAAM,eAAe,OAAO,UAAU,WAAW,QAAQ,OAAO,WAAW;AAG3E,KAAI,2BAA2B,OAC7B,QAAO,8BAA8B;AAIvC,KAAI,aAAa,SAAS,6CACxB,QAAO,kBAAkB,iBAAiB,eAAe;AAG3D,KAAI,aAAa,SAAS,yCACxB,QAAO;AAGT,KAAI,aAAa,SAAS,gDACxB,QAAO,uCAAuC,aAAa,QAAQ,kDAAkD;AAGvH,KAAI,aAAa,SAAS,0BACxB,QAAO,GAAG,YAAY,iBAAiB,iBAAiB,QAAQ;AAIlE,QAAO"}