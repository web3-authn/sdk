{"version":3,"file":"wasm_vrf_worker.js","names":["ptr","module","arg0","arg1"],"sources":["../../../src/wasm_vrf_worker/wasm_vrf_worker.js"],"sourcesContent":["let wasm;\n\nfunction addToExternrefTable0(obj) {\n    const idx = wasm.__externref_table_alloc();\n    wasm.__wbindgen_export_2.set(idx, obj);\n    return idx;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        const idx = addToExternrefTable0(e);\n        wasm.__wbindgen_exn_store(idx);\n    }\n}\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); };\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = (typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : { encode: () => { throw Error('TextEncoder not available') } } );\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nconst CLOSURE_DTORS = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(state => {\n    wasm.__wbindgen_export_6.get(state.dtor)(state.a, state.b)\n});\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_6.get(state.dtor)(a, state.b);\n                CLOSURE_DTORS.unregister(state);\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches && builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n}\n/**\n * @returns {string}\n */\nexport function get_shamir_p_b64u() {\n    let deferred1_0;\n    let deferred1_1;\n    try {\n        const ret = wasm.get_shamir_p_b64u();\n        deferred1_0 = ret[0];\n        deferred1_1 = ret[1];\n        return getStringFromWasm0(ret[0], ret[1]);\n    } finally {\n        wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n    }\n}\n\n/**\n * @returns {string}\n */\nexport function SHAMIR_P_B64U() {\n    let deferred1_0;\n    let deferred1_1;\n    try {\n        const ret = wasm.SHAMIR_P_B64U();\n        deferred1_0 = ret[0];\n        deferred1_1 = ret[1];\n        return getStringFromWasm0(ret[0], ret[1]);\n    } finally {\n        wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n    }\n}\n\nexport function main() {\n    wasm.main();\n}\n\nfunction takeFromExternrefTable0(idx) {\n    const value = wasm.__wbindgen_export_2.get(idx);\n    wasm.__externref_table_dealloc(idx);\n    return value;\n}\n/**\n * Configure Shamir P at runtime (global manager instance)\n * @param {string} p_b64u\n */\nexport function configure_shamir_p(p_b64u) {\n    const ptr0 = passStringToWasm0(p_b64u, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.configure_shamir_p(ptr0, len0);\n    if (ret[1]) {\n        throw takeFromExternrefTable0(ret[0]);\n    }\n}\n\n/**\n * @param {string} relay_server_url\n * @param {string} apply_lock_route\n * @param {string} remove_lock_route\n */\nexport function configure_shamir_server_urls(relay_server_url, apply_lock_route, remove_lock_route) {\n    const ptr0 = passStringToWasm0(relay_server_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ptr1 = passStringToWasm0(apply_lock_route, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    const ptr2 = passStringToWasm0(remove_lock_route, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len2 = WASM_VECTOR_LEN;\n    const ret = wasm.configure_shamir_server_urls(ptr0, len0, ptr1, len1, ptr2, len2);\n    if (ret[1]) {\n        throw takeFromExternrefTable0(ret[0]);\n    }\n}\n\n/**\n * @param {any} message\n * @returns {Promise<any>}\n */\nexport function handle_message(message) {\n    const ret = wasm.handle_message(message);\n    return ret;\n}\n\nfunction __wbg_adapter_28(arg0, arg1, arg2) {\n    wasm.closure119_externref_shim(arg0, arg1, arg2);\n}\n\nfunction __wbg_adapter_205(arg0, arg1, arg2, arg3) {\n    wasm.closure183_externref_shim(arg0, arg1, arg2, arg3);\n}\n\n/**\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13}\n */\nexport const WorkerRequestType = Object.freeze({\n    Ping: 0, \"0\": \"Ping\",\n    GenerateVrfChallenge: 1, \"1\": \"GenerateVrfChallenge\",\n    GenerateVrfKeypairBootstrap: 2, \"2\": \"GenerateVrfKeypairBootstrap\",\n    UnlockVrfKeypair: 3, \"3\": \"UnlockVrfKeypair\",\n    CheckVrfStatus: 4, \"4\": \"CheckVrfStatus\",\n    Logout: 5, \"5\": \"Logout\",\n    DeriveVrfKeypairFromPrf: 6, \"6\": \"DeriveVrfKeypairFromPrf\",\n    Shamir3PassClientEncryptCurrentVrfKeypair: 7, \"7\": \"Shamir3PassClientEncryptCurrentVrfKeypair\",\n    Shamir3PassClientDecryptVrfKeypair: 8, \"8\": \"Shamir3PassClientDecryptVrfKeypair\",\n    Shamir3PassGenerateServerKeypair: 9, \"9\": \"Shamir3PassGenerateServerKeypair\",\n    Shamir3PassApplyServerLock: 10, \"10\": \"Shamir3PassApplyServerLock\",\n    Shamir3PassRemoveServerLock: 11, \"11\": \"Shamir3PassRemoveServerLock\",\n    Shamir3PassConfigP: 12, \"12\": \"Shamir3PassConfigP\",\n    Shamir3PassConfigServerUrls: 13, \"13\": \"Shamir3PassConfigServerUrls\",\n});\n/**\n * Worker response types enum - corresponds to TypeScript WorkerResponseType\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13}\n */\nexport const WorkerResponseType = Object.freeze({\n    PingSuccess: 0, \"0\": \"PingSuccess\",\n    GenerateVrfChallengeSuccess: 1, \"1\": \"GenerateVrfChallengeSuccess\",\n    GenerateVrfKeypairBootstrapSuccess: 2, \"2\": \"GenerateVrfKeypairBootstrapSuccess\",\n    UnlockVrfKeypairSuccess: 3, \"3\": \"UnlockVrfKeypairSuccess\",\n    CheckVrfStatusSuccess: 4, \"4\": \"CheckVrfStatusSuccess\",\n    LogoutSuccess: 5, \"5\": \"LogoutSuccess\",\n    DeriveVrfKeypairFromPrfSuccess: 6, \"6\": \"DeriveVrfKeypairFromPrfSuccess\",\n    Shamir3PassClientEncryptCurrentVrfKeypairSuccess: 7, \"7\": \"Shamir3PassClientEncryptCurrentVrfKeypairSuccess\",\n    Shamir3PassClientDecryptVrfKeypairSuccess: 8, \"8\": \"Shamir3PassClientDecryptVrfKeypairSuccess\",\n    Shamir3PassGenerateServerKeypairSuccess: 9, \"9\": \"Shamir3PassGenerateServerKeypairSuccess\",\n    Shamir3PassApplyServerLockSuccess: 10, \"10\": \"Shamir3PassApplyServerLockSuccess\",\n    Shamir3PassRemoveServerLockSuccess: 11, \"11\": \"Shamir3PassRemoveServerLockSuccess\",\n    Shamir3PassConfigPSuccess: 12, \"12\": \"Shamir3PassConfigPSuccess\",\n    Shamir3PassConfigServerUrlsSuccess: 13, \"13\": \"Shamir3PassConfigServerUrlsSuccess\",\n});\n\nconst DeriveVrfKeypairFromPrfRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_derivevrfkeypairfromprfrequest_free(ptr >>> 0, 1));\n\nexport class DeriveVrfKeypairFromPrfRequest {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeriveVrfKeypairFromPrfRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_derivevrfkeypairfromprfrequest_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get prfOutput() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_derivevrfkeypairfromprfrequest_prfOutput(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set prfOutput(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_derivevrfkeypairfromprfrequest_prfOutput(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get nearAccountId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_derivevrfkeypairfromprfrequest_nearAccountId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set nearAccountId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_derivevrfkeypairfromprfrequest_nearAccountId(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {boolean}\n     */\n    get saveInMemory() {\n        const ret = wasm.__wbg_get_derivevrfkeypairfromprfrequest_saveInMemory(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * @param {boolean} arg0\n     */\n    set saveInMemory(arg0) {\n        wasm.__wbg_set_derivevrfkeypairfromprfrequest_saveInMemory(this.__wbg_ptr, arg0);\n    }\n    /**\n     * @returns {VRFInputData | undefined}\n     */\n    get vrfInputData() {\n        const ret = wasm.__wbg_get_derivevrfkeypairfromprfrequest_vrfInputData(this.__wbg_ptr);\n        return ret === 0 ? undefined : VRFInputData.__wrap(ret);\n    }\n    /**\n     * @param {VRFInputData | null} [arg0]\n     */\n    set vrfInputData(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, VRFInputData);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_derivevrfkeypairfromprfrequest_vrfInputData(this.__wbg_ptr, ptr0);\n    }\n}\n\nconst DeterministicVrfKeypairResponseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_deterministicvrfkeypairresponse_free(ptr >>> 0, 1));\n\nexport class DeterministicVrfKeypairResponse {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeterministicVrfKeypairResponseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_deterministicvrfkeypairresponse_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get vrfPublicKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_deterministicvrfkeypairresponse_vrfPublicKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set vrfPublicKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_derivevrfkeypairfromprfrequest_prfOutput(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {VRFChallengeData | undefined}\n     */\n    get vrfChallengeData() {\n        const ret = wasm.__wbg_get_deterministicvrfkeypairresponse_vrfChallengeData(this.__wbg_ptr);\n        return ret === 0 ? undefined : VRFChallengeData.__wrap(ret);\n    }\n    /**\n     * @param {VRFChallengeData | null} [arg0]\n     */\n    set vrfChallengeData(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, VRFChallengeData);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_deterministicvrfkeypairresponse_vrfChallengeData(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {EncryptedVRFKeypair | undefined}\n     */\n    get encryptedVrfKeypair() {\n        const ret = wasm.__wbg_get_deterministicvrfkeypairresponse_encryptedVrfKeypair(this.__wbg_ptr);\n        return ret === 0 ? undefined : EncryptedVRFKeypair.__wrap(ret);\n    }\n    /**\n     * @param {EncryptedVRFKeypair | null} [arg0]\n     */\n    set encryptedVrfKeypair(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, EncryptedVRFKeypair);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_deterministicvrfkeypairresponse_encryptedVrfKeypair(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {Shamir3PassEncryptVrfKeypairResult | undefined}\n     */\n    get serverEncryptedVrfKeypair() {\n        const ret = wasm.__wbg_get_deterministicvrfkeypairresponse_serverEncryptedVrfKeypair(this.__wbg_ptr);\n        return ret === 0 ? undefined : Shamir3PassEncryptVrfKeypairResult.__wrap(ret);\n    }\n    /**\n     * @param {Shamir3PassEncryptVrfKeypairResult | null} [arg0]\n     */\n    set serverEncryptedVrfKeypair(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, Shamir3PassEncryptVrfKeypairResult);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_deterministicvrfkeypairresponse_serverEncryptedVrfKeypair(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {boolean}\n     */\n    get success() {\n        const ret = wasm.__wbg_get_deterministicvrfkeypairresponse_success(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * @param {boolean} arg0\n     */\n    set success(arg0) {\n        wasm.__wbg_set_deterministicvrfkeypairresponse_success(this.__wbg_ptr, arg0);\n    }\n}\n\nconst EncryptedVRFKeypairFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptedvrfkeypair_free(ptr >>> 0, 1));\n\nexport class EncryptedVRFKeypair {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EncryptedVRFKeypair.prototype);\n        obj.__wbg_ptr = ptr;\n        EncryptedVRFKeypairFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptedVRFKeypairFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptedvrfkeypair_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get encryptedVrfDataB64u() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_encryptedvrfkeypair_encryptedVrfDataB64u(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set encryptedVrfDataB64u(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_encryptedvrfkeypair_encryptedVrfDataB64u(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get chacha20NonceB64u() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_encryptedvrfkeypair_chacha20NonceB64u(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set chacha20NonceB64u(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_encryptedvrfkeypair_chacha20NonceB64u(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst GenerateVrfChallengeRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_generatevrfchallengerequest_free(ptr >>> 0, 1));\n\nexport class GenerateVrfChallengeRequest {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GenerateVrfChallengeRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_generatevrfchallengerequest_free(ptr, 0);\n    }\n    /**\n     * @returns {VRFInputData}\n     */\n    get vrfInputData() {\n        const ret = wasm.__wbg_get_generatevrfchallengerequest_vrfInputData(this.__wbg_ptr);\n        return VRFInputData.__wrap(ret);\n    }\n    /**\n     * @param {VRFInputData} arg0\n     */\n    set vrfInputData(arg0) {\n        _assertClass(arg0, VRFInputData);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_generatevrfchallengerequest_vrfInputData(this.__wbg_ptr, ptr0);\n    }\n}\n\nconst GenerateVrfKeypairBootstrapRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_generatevrfkeypairbootstraprequest_free(ptr >>> 0, 1));\n\nexport class GenerateVrfKeypairBootstrapRequest {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GenerateVrfKeypairBootstrapRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_generatevrfkeypairbootstraprequest_free(ptr, 0);\n    }\n    /**\n     * @returns {VRFInputData | undefined}\n     */\n    get vrfInputData() {\n        const ret = wasm.__wbg_get_generatevrfkeypairbootstraprequest_vrfInputData(this.__wbg_ptr);\n        return ret === 0 ? undefined : VRFInputData.__wrap(ret);\n    }\n    /**\n     * @param {VRFInputData | null} [arg0]\n     */\n    set vrfInputData(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, VRFInputData);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_generatevrfkeypairbootstraprequest_vrfInputData(this.__wbg_ptr, ptr0);\n    }\n}\n\nconst Shamir3PassApplyServerLockRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_shamir3passapplyserverlockrequest_free(ptr >>> 0, 1));\n\nexport class Shamir3PassApplyServerLockRequest {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Shamir3PassApplyServerLockRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_shamir3passapplyserverlockrequest_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get e_s_b64u() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_shamir3passapplyserverlockrequest_e_s_b64u(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set e_s_b64u(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_shamir3passapplyserverlockrequest_e_s_b64u(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get kek_c_b64u() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_shamir3passapplyserverlockrequest_kek_c_b64u(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set kek_c_b64u(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_shamir3passapplyserverlockrequest_kek_c_b64u(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst Shamir3PassClientDecryptVrfKeypairRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_shamir3passclientdecryptvrfkeypairrequest_free(ptr >>> 0, 1));\n\nexport class Shamir3PassClientDecryptVrfKeypairRequest {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Shamir3PassClientDecryptVrfKeypairRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_shamir3passclientdecryptvrfkeypairrequest_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get nearAccountId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_shamir3passclientdecryptvrfkeypairrequest_nearAccountId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set nearAccountId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_encryptedvrfkeypair_encryptedVrfDataB64u(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get kek_s_b64u() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_shamir3passclientdecryptvrfkeypairrequest_kek_s_b64u(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set kek_s_b64u(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_encryptedvrfkeypair_chacha20NonceB64u(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get ciphertextVrfB64u() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_shamir3passclientdecryptvrfkeypairrequest_ciphertextVrfB64u(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set ciphertextVrfB64u(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_shamir3passclientdecryptvrfkeypairrequest_ciphertextVrfB64u(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst Shamir3PassClientEncryptCurrentVrfKeypairRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_shamir3passclientencryptcurrentvrfkeypairrequest_free(ptr >>> 0, 1));\n\nexport class Shamir3PassClientEncryptCurrentVrfKeypairRequest {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Shamir3PassClientEncryptCurrentVrfKeypairRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_shamir3passclientencryptcurrentvrfkeypairrequest_free(ptr, 0);\n    }\n}\n\nconst Shamir3PassConfigPRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_shamir3passconfigprequest_free(ptr >>> 0, 1));\n\nexport class Shamir3PassConfigPRequest {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Shamir3PassConfigPRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_shamir3passconfigprequest_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get p_b64u() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_shamir3passconfigprequest_p_b64u(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set p_b64u(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_shamir3passconfigprequest_p_b64u(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst Shamir3PassConfigServerUrlsRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_shamir3passconfigserverurlsrequest_free(ptr >>> 0, 1));\n\nexport class Shamir3PassConfigServerUrlsRequest {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Shamir3PassConfigServerUrlsRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_shamir3passconfigserverurlsrequest_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get relayServerUrl() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_shamir3passconfigserverurlsrequest_relayServerUrl(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set relayServerUrl(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_shamir3passconfigprequest_p_b64u(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get applyLockRoute() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_shamir3passconfigserverurlsrequest_applyLockRoute(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set applyLockRoute(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_shamir3passconfigserverurlsrequest_applyLockRoute(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get removeLockRoute() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_shamir3passconfigserverurlsrequest_removeLockRoute(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set removeLockRoute(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_shamir3passconfigserverurlsrequest_removeLockRoute(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst Shamir3PassEncryptVrfKeypairResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_shamir3passencryptvrfkeypairresult_free(ptr >>> 0, 1));\n\nexport class Shamir3PassEncryptVrfKeypairResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Shamir3PassEncryptVrfKeypairResult.prototype);\n        obj.__wbg_ptr = ptr;\n        Shamir3PassEncryptVrfKeypairResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Shamir3PassEncryptVrfKeypairResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_shamir3passencryptvrfkeypairresult_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get ciphertextVrfB64u() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_shamir3passencryptvrfkeypairresult_ciphertextVrfB64u(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set ciphertextVrfB64u(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_encryptedvrfkeypair_encryptedVrfDataB64u(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get kek_s_b64u() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_shamir3passencryptvrfkeypairresult_kek_s_b64u(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set kek_s_b64u(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_encryptedvrfkeypair_chacha20NonceB64u(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get vrfPublicKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_shamir3passencryptvrfkeypairresult_vrfPublicKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set vrfPublicKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_shamir3passclientdecryptvrfkeypairrequest_ciphertextVrfB64u(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst Shamir3PassGenerateServerKeypairRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_shamir3passgenerateserverkeypairrequest_free(ptr >>> 0, 1));\n\nexport class Shamir3PassGenerateServerKeypairRequest {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Shamir3PassGenerateServerKeypairRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_shamir3passgenerateserverkeypairrequest_free(ptr, 0);\n    }\n}\n\nconst Shamir3PassRemoveServerLockRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_shamir3passremoveserverlockrequest_free(ptr >>> 0, 1));\n\nexport class Shamir3PassRemoveServerLockRequest {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Shamir3PassRemoveServerLockRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_shamir3passremoveserverlockrequest_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get d_s_b64u() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_shamir3passremoveserverlockrequest_d_s_b64u(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set d_s_b64u(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_shamir3passapplyserverlockrequest_e_s_b64u(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get kek_cs_b64u() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_shamir3passremoveserverlockrequest_kek_cs_b64u(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set kek_cs_b64u(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_shamir3passapplyserverlockrequest_kek_c_b64u(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst ShamirApplyServerLockHTTPRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_shamirapplyserverlockhttprequest_free(ptr >>> 0, 1));\n\nexport class ShamirApplyServerLockHTTPRequest {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ShamirApplyServerLockHTTPRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_shamirapplyserverlockhttprequest_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get kek_c_b64u() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_shamirapplyserverlockhttprequest_kek_c_b64u(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set kek_c_b64u(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_shamirapplyserverlockhttprequest_kek_c_b64u(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst ShamirApplyServerLockHTTPResponseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_shamirapplyserverlockhttpresponse_free(ptr >>> 0, 1));\n\nexport class ShamirApplyServerLockHTTPResponse {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ShamirApplyServerLockHTTPResponseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_shamirapplyserverlockhttpresponse_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get kek_cs_b64u() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_shamirapplyserverlockhttpresponse_kek_cs_b64u(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set kek_cs_b64u(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_shamirapplyserverlockhttprequest_kek_c_b64u(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst ShamirRemoveServerLockHTTPRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_shamirremoveserverlockhttprequest_free(ptr >>> 0, 1));\n\nexport class ShamirRemoveServerLockHTTPRequest {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ShamirRemoveServerLockHTTPRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_shamirremoveserverlockhttprequest_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get kek_cs_b64u() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_shamirremoveserverlockhttprequest_kek_cs_b64u(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set kek_cs_b64u(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_shamirapplyserverlockhttprequest_kek_c_b64u(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst ShamirRemoveServerLockHTTPResponseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_shamirremoveserverlockhttpresponse_free(ptr >>> 0, 1));\n\nexport class ShamirRemoveServerLockHTTPResponse {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ShamirRemoveServerLockHTTPResponseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_shamirremoveserverlockhttpresponse_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get kek_c_b64u() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_shamirremoveserverlockhttpresponse_kek_c_b64u(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set kek_c_b64u(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_shamirapplyserverlockhttprequest_kek_c_b64u(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst UnlockVrfKeypairRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_unlockvrfkeypairrequest_free(ptr >>> 0, 1));\n\nexport class UnlockVrfKeypairRequest {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UnlockVrfKeypairRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_unlockvrfkeypairrequest_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get nearAccountId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_unlockvrfkeypairrequest_nearAccountId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set nearAccountId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_shamir3passapplyserverlockrequest_e_s_b64u(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {EncryptedVRFKeypair}\n     */\n    get encryptedVrfKeypair() {\n        const ret = wasm.__wbg_get_unlockvrfkeypairrequest_encryptedVrfKeypair(this.__wbg_ptr);\n        return EncryptedVRFKeypair.__wrap(ret);\n    }\n    /**\n     * @param {EncryptedVRFKeypair} arg0\n     */\n    set encryptedVrfKeypair(arg0) {\n        _assertClass(arg0, EncryptedVRFKeypair);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_unlockvrfkeypairrequest_encryptedVrfKeypair(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {string}\n     */\n    get prfKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_unlockvrfkeypairrequest_prfKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set prfKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_unlockvrfkeypairrequest_prfKey(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst VRFChallengeDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_vrfchallengedata_free(ptr >>> 0, 1));\n\nexport class VRFChallengeData {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VRFChallengeData.prototype);\n        obj.__wbg_ptr = ptr;\n        VRFChallengeDataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VRFChallengeDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vrfchallengedata_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get vrfInput() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_vrfchallengedata_vrfInput(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set vrfInput(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_encryptedvrfkeypair_encryptedVrfDataB64u(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get vrfOutput() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_vrfchallengedata_vrfOutput(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set vrfOutput(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_encryptedvrfkeypair_chacha20NonceB64u(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get vrfProof() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_vrfchallengedata_vrfProof(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set vrfProof(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_shamir3passclientdecryptvrfkeypairrequest_ciphertextVrfB64u(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get vrfPublicKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_vrfchallengedata_vrfPublicKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set vrfPublicKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_vrfchallengedata_vrfPublicKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get userId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_vrfchallengedata_userId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set userId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_vrfchallengedata_userId(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get rpId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_vrfchallengedata_rpId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set rpId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_vrfchallengedata_rpId(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get blockHeight() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_vrfchallengedata_blockHeight(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set blockHeight(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_vrfchallengedata_blockHeight(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get blockHash() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_vrfchallengedata_blockHash(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set blockHash(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_vrfchallengedata_blockHash(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst VRFInputDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_vrfinputdata_free(ptr >>> 0, 1));\n\nexport class VRFInputData {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VRFInputData.prototype);\n        obj.__wbg_ptr = ptr;\n        VRFInputDataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VRFInputDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vrfinputdata_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get userId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_vrfinputdata_userId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set userId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_encryptedvrfkeypair_encryptedVrfDataB64u(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get rpId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_vrfinputdata_rpId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set rpId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_encryptedvrfkeypair_chacha20NonceB64u(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get blockHeight() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_vrfinputdata_blockHeight(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set blockHeight(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_shamir3passclientdecryptvrfkeypairrequest_ciphertextVrfB64u(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get blockHash() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_vrfinputdata_blockHash(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set blockHash(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_vrfchallengedata_vrfPublicKey(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_buffer_609cc3eee51ed158 = function(arg0) {\n        const ret = arg0.buffer;\n        return ret;\n    };\n    imports.wbg.__wbg_call_672a4d21634d4a24 = function() { return handleError(function (arg0, arg1) {\n        const ret = arg0.call(arg1);\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_call_7cccdd69e0791ae2 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = arg0.call(arg1, arg2);\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_crypto_574e78ad8b13b65f = function(arg0) {\n        const ret = arg0.crypto;\n        return ret;\n    };\n    imports.wbg.__wbg_debug_e17b51583ca6a632 = function(arg0, arg1, arg2, arg3) {\n        console.debug(arg0, arg1, arg2, arg3);\n    };\n    imports.wbg.__wbg_error_524f506f44df1645 = function(arg0) {\n        console.error(arg0);\n    };\n    imports.wbg.__wbg_error_7534b8e9a36f1ab4 = function(arg0, arg1) {\n        let deferred0_0;\n        let deferred0_1;\n        try {\n            deferred0_0 = arg0;\n            deferred0_1 = arg1;\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n        }\n    };\n    imports.wbg.__wbg_error_80de38b3f7cc3c3c = function(arg0, arg1, arg2, arg3) {\n        console.error(arg0, arg1, arg2, arg3);\n    };\n    imports.wbg.__wbg_fetch_b7bf320f681242d2 = function(arg0, arg1) {\n        const ret = arg0.fetch(arg1);\n        return ret;\n    };\n    imports.wbg.__wbg_getRandomValues_b8f5dbd5f3995a9e = function() { return handleError(function (arg0, arg1) {\n        arg0.getRandomValues(arg1);\n    }, arguments) };\n    imports.wbg.__wbg_get_67b2ba62fc30de12 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.get(arg0, arg1);\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_info_033d8b8a0838f1d3 = function(arg0, arg1, arg2, arg3) {\n        console.info(arg0, arg1, arg2, arg3);\n    };\n    imports.wbg.__wbg_instanceof_Response_f2cc20d9f7dfd644 = function(arg0) {\n        let result;\n        try {\n            result = arg0 instanceof Response;\n        } catch (_) {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_instanceof_Window_def73ea0955fc569 = function(arg0) {\n        let result;\n        try {\n            result = arg0 instanceof Window;\n        } catch (_) {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_log_cad59bb680daec67 = function(arg0, arg1, arg2, arg3) {\n        console.log(arg0, arg1, arg2, arg3);\n    };\n    imports.wbg.__wbg_msCrypto_a61aeb35a24c1329 = function(arg0) {\n        const ret = arg0.msCrypto;\n        return ret;\n    };\n    imports.wbg.__wbg_new_018dcc2d6c8c2f6a = function() { return handleError(function () {\n        const ret = new Headers();\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_new_23a2665fac83c611 = function(arg0, arg1) {\n        try {\n            var state0 = {a: arg0, b: arg1};\n            var cb0 = (arg0, arg1) => {\n                const a = state0.a;\n                state0.a = 0;\n                try {\n                    return __wbg_adapter_205(a, state0.b, arg0, arg1);\n                } finally {\n                    state0.a = a;\n                }\n            };\n            const ret = new Promise(cb0);\n            return ret;\n        } finally {\n            state0.a = state0.b = 0;\n        }\n    };\n    imports.wbg.__wbg_new_405e22f390576ce2 = function() {\n        const ret = new Object();\n        return ret;\n    };\n    imports.wbg.__wbg_new_8a6f238a6ece86ea = function() {\n        const ret = new Error();\n        return ret;\n    };\n    imports.wbg.__wbg_new_a12002a7f91c75be = function(arg0) {\n        const ret = new Uint8Array(arg0);\n        return ret;\n    };\n    imports.wbg.__wbg_newnoargs_105ed471475aaf50 = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return ret;\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_d97e637ebe145a9a = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(arg0, arg1 >>> 0, arg2 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbg_newwithlength_a381634e90c276d4 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbg_newwithstrandinit_06c535e0a867c635 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = new Request(getStringFromWasm0(arg0, arg1), arg2);\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_node_905d3e251edff8a2 = function(arg0) {\n        const ret = arg0.node;\n        return ret;\n    };\n    imports.wbg.__wbg_now_807e54c39636c349 = function() {\n        const ret = Date.now();\n        return ret;\n    };\n    imports.wbg.__wbg_ok_3aaf32d069979723 = function(arg0) {\n        const ret = arg0.ok;\n        return ret;\n    };\n    imports.wbg.__wbg_parse_31e8e5bc0216ac4b = function(arg0, arg1) {\n        const ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n        return ret;\n    };\n    imports.wbg.__wbg_process_dc0fbacc7c1c06f7 = function(arg0) {\n        const ret = arg0.process;\n        return ret;\n    };\n    imports.wbg.__wbg_queueMicrotask_97d92b4fcc8a61c5 = function(arg0) {\n        queueMicrotask(arg0);\n    };\n    imports.wbg.__wbg_queueMicrotask_d3219def82552485 = function(arg0) {\n        const ret = arg0.queueMicrotask;\n        return ret;\n    };\n    imports.wbg.__wbg_randomFillSync_ac0988aba3254290 = function() { return handleError(function (arg0, arg1) {\n        arg0.randomFillSync(arg1);\n    }, arguments) };\n    imports.wbg.__wbg_require_60cc747a6bc5215a = function() { return handleError(function () {\n        const ret = module.require;\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_resolve_4851785c9c5f573d = function(arg0) {\n        const ret = Promise.resolve(arg0);\n        return ret;\n    };\n    imports.wbg.__wbg_set_11cd83f45504cedf = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n        arg0.set(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n    }, arguments) };\n    imports.wbg.__wbg_set_65595bdd868b3009 = function(arg0, arg1, arg2) {\n        arg0.set(arg1, arg2 >>> 0);\n    };\n    imports.wbg.__wbg_setbody_5923b78a95eedf29 = function(arg0, arg1) {\n        arg0.body = arg1;\n    };\n    imports.wbg.__wbg_setheaders_834c0bdb6a8949ad = function(arg0, arg1) {\n        arg0.headers = arg1;\n    };\n    imports.wbg.__wbg_setmethod_3c5280fe5d890842 = function(arg0, arg1, arg2) {\n        arg0.method = getStringFromWasm0(arg1, arg2);\n    };\n    imports.wbg.__wbg_stack_0ed75d68575b0f3c = function(arg0, arg1) {\n        const ret = arg1.stack;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n        getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n    };\n    imports.wbg.__wbg_static_accessor_GLOBAL_88a902d13a557d07 = function() {\n        const ret = typeof global === 'undefined' ? null : global;\n        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n    };\n    imports.wbg.__wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0 = function() {\n        const ret = typeof globalThis === 'undefined' ? null : globalThis;\n        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n    };\n    imports.wbg.__wbg_static_accessor_SELF_37c5d418e4bf5819 = function() {\n        const ret = typeof self === 'undefined' ? null : self;\n        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n    };\n    imports.wbg.__wbg_static_accessor_WINDOW_5de37043a91a9c40 = function() {\n        const ret = typeof window === 'undefined' ? null : window;\n        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n    };\n    imports.wbg.__wbg_statusText_207754230b39e67c = function(arg0, arg1) {\n        const ret = arg1.statusText;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n        getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n    };\n    imports.wbg.__wbg_status_f6360336ca686bf0 = function(arg0) {\n        const ret = arg0.status;\n        return ret;\n    };\n    imports.wbg.__wbg_stringify_c98a90896b212007 = function(arg0) {\n        const ret = JSON.stringify(arg0);\n        return ret;\n    };\n    imports.wbg.__wbg_subarray_aa9065fa9dc5df96 = function(arg0, arg1, arg2) {\n        const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbg_text_7805bea50de2af49 = function() { return handleError(function (arg0) {\n        const ret = arg0.text();\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_then_44b73946d2fb3e7d = function(arg0, arg1) {\n        const ret = arg0.then(arg1);\n        return ret;\n    };\n    imports.wbg.__wbg_then_48b406749878a531 = function(arg0, arg1, arg2) {\n        const ret = arg0.then(arg1, arg2);\n        return ret;\n    };\n    imports.wbg.__wbg_versions_c01dfd4722a88165 = function(arg0) {\n        const ret = arg0.versions;\n        return ret;\n    };\n    imports.wbg.__wbg_warn_aaf1f4664a035bd6 = function(arg0, arg1, arg2, arg3) {\n        console.warn(arg0, arg1, arg2, arg3);\n    };\n    imports.wbg.__wbindgen_cb_drop = function(arg0) {\n        const obj = arg0.original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        const ret = false;\n        return ret;\n    };\n    imports.wbg.__wbindgen_closure_wrapper689 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 120, __wbg_adapter_28);\n        return ret;\n    };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        const ret = debugString(arg1);\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n        getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n    };\n    imports.wbg.__wbindgen_init_externref_table = function() {\n        const table = wasm.__wbindgen_export_2;\n        const offset = table.grow(4);\n        table.set(0, undefined);\n        table.set(offset + 0, undefined);\n        table.set(offset + 1, null);\n        table.set(offset + 2, true);\n        table.set(offset + 3, false);\n        ;\n    };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        const ret = typeof(arg0) === 'function';\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = arg0;\n        const ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(arg0) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = arg0 === undefined;\n        return ret;\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return ret;\n    };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = arg1;\n        const ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n        getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return ret;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, memory) {\n\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedDataViewMemory0 = null;\n    cachedUint8ArrayMemory0 = null;\n\n\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nfunction initSync(module) {\n    if (wasm !== undefined) return wasm;\n\n\n    if (typeof module !== 'undefined') {\n        if (Object.getPrototypeOf(module) === Object.prototype) {\n            ({module} = module)\n        } else {\n            console.warn('using deprecated parameters for `initSync()`; pass a single object instead')\n        }\n    }\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(module_or_path) {\n    if (wasm !== undefined) return wasm;\n\n\n    if (typeof module_or_path !== 'undefined') {\n        if (Object.getPrototypeOf(module_or_path) === Object.prototype) {\n            ({module_or_path} = module_or_path)\n        } else {\n            console.warn('using deprecated parameters for the initialization function; pass a single object instead')\n        }\n    }\n\n    if (typeof module_or_path === 'undefined') {\n        module_or_path = new URL('wasm_vrf_worker_bg.wasm', import.meta.url);\n    }\n    const imports = __wbg_get_imports();\n\n    if (typeof module_or_path === 'string' || (typeof Request === 'function' && module_or_path instanceof Request) || (typeof URL === 'function' && module_or_path instanceof URL)) {\n        module_or_path = fetch(module_or_path);\n    }\n\n    __wbg_init_memory(imports);\n\n    const { instance, module } = await __wbg_load(await module_or_path, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nexport { initSync };\nexport default __wbg_init;\n"],"mappings":"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"}