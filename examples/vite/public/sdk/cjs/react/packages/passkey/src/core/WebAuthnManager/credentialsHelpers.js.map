{"version":3,"file":"credentialsHelpers.js","names":["base64UrlEncode","credentialWithoutPrf: C"],"sources":["../../../../../../../../src/core/WebAuthnManager/credentialsHelpers.ts"],"sourcesContent":["import { base64UrlEncode } from \"../../utils\";\nimport {\n  type WebAuthnAuthenticationCredential,\n  type WebAuthnRegistrationCredential,\n} from '../types/webauthn';\n\n/**\n * Dual PRF outputs for separate encryption and signing key derivation\n */\nexport interface DualPrfOutputs {\n  /** Base64-encoded PRF output from prf.results.first for ChaCha20Poly1305 encryption */\n  chacha20PrfOutput: string;\n  /** Base64-encoded PRF output from prf.results.second for Ed25519 signing */\n  ed25519PrfOutput: string;\n}\n\n/**\n * Extract PRF outputs from WebAuthn credential extension results\n * ENCODING: Uses base64url for WASM compatibility\n * @param credential - WebAuthn credential with dual PRF extension results\n * @param firstPrfOutput - Whether to include the first PRF output (default: true)\n * @param secondPrfOutput - Whether to include the second PRF output (default: false)\n * @returns PRF outputs\n */\nexport function extractPrfFromCredential({\n  credential,\n  firstPrfOutput = true,\n  secondPrfOutput = false,\n}: {\n  credential: PublicKeyCredential,\n  firstPrfOutput?: boolean | undefined,\n  secondPrfOutput?: boolean,\n}): DualPrfOutputs {\n\n  const extensionResults = credential.getClientExtensionResults();\n  const prfResults = extensionResults?.prf?.results;\n\n  if (!prfResults) {\n    throw new Error('Missing PRF results from credential, use a PRF-enabled Authenticator');\n  }\n\n  const first = firstPrfOutput\n    ? prfResults?.first ? base64UrlEncode(prfResults.first as ArrayBuffer) : undefined\n    : undefined;\n  const second = secondPrfOutput\n    ? prfResults?.second ? base64UrlEncode(prfResults.second as ArrayBuffer) : undefined\n    : undefined;\n\n  return {\n    chacha20PrfOutput: first!,\n    ed25519PrfOutput: second!,\n  };\n}\n\ntype SerializableCredential = WebAuthnAuthenticationCredential | WebAuthnRegistrationCredential;\n\n/**\n * Serialize PublicKeyCredential for both authentication and registration for WASM worker\n * - Uses base64url encoding for WASM compatibility\n *\n * @returns SerializableCredential - The serialized credential\n * - DOES NOT return PRF outputs\n */\nexport function serializeRegistrationCredential(\n  credential: PublicKeyCredential,\n): WebAuthnRegistrationCredential {\n  const response = credential.response as AuthenticatorAttestationResponse;\n\n  return {\n    id: credential.id,\n    rawId: base64UrlEncode(credential.rawId),\n    type: credential.type,\n    authenticatorAttachment: credential.authenticatorAttachment ?? undefined,\n    response: {\n      clientDataJSON: base64UrlEncode(response.clientDataJSON),\n      attestationObject: base64UrlEncode(response.attestationObject),\n      transports: response.getTransports() || [],\n    },\n    clientExtensionResults: {\n      prf: {\n        results: {\n          first: undefined,\n          second: undefined\n        }\n      }\n    },\n  };\n}\n\nexport function serializeAuthenticationCredential(\n  credential: PublicKeyCredential,\n): WebAuthnAuthenticationCredential {\n  const response = credential.response as AuthenticatorAssertionResponse;\n\n  return {\n    id: credential.id,\n    rawId: base64UrlEncode(credential.rawId),\n    type: credential.type,\n    authenticatorAttachment: credential.authenticatorAttachment ?? undefined,\n    response: {\n      clientDataJSON: base64UrlEncode(response.clientDataJSON),\n      authenticatorData: base64UrlEncode(response.authenticatorData),\n      signature: base64UrlEncode(response.signature),\n      userHandle: response.userHandle ? base64UrlEncode(response.userHandle as ArrayBuffer) : undefined,\n    },\n    clientExtensionResults: {\n      prf: {\n        results: {\n          first: undefined,\n          second: undefined\n        }\n      }\n    },\n  };\n}\n\n/**\n * Serialize PublicKeyCredential for both authentication and registration for WASM worker\n * @returns SerializableCredential - The serialized credential\n * - INCLUDES PRF outputs\n */\nexport function serializeRegistrationCredentialWithPRF({\n  credential,\n  firstPrfOutput = true,\n  secondPrfOutput = true,\n}: {\n  credential: PublicKeyCredential,\n  firstPrfOutput?: boolean,\n  secondPrfOutput?: boolean,\n}): WebAuthnRegistrationCredential {\n  const base = serializeRegistrationCredential(credential);\n  const { chacha20PrfOutput, ed25519PrfOutput } = extractPrfFromCredential({\n    credential,\n    firstPrfOutput,\n    secondPrfOutput,\n  });\n  return {\n    ...base,\n    clientExtensionResults: {\n      prf: {\n        results: {\n          first: chacha20PrfOutput,\n          second: ed25519PrfOutput,\n        },\n      },\n    },\n  };\n}\n\nexport function serializeAuthenticationCredentialWithPRF({\n  credential,\n  firstPrfOutput = true,\n  secondPrfOutput = false,\n}: {\n  credential: PublicKeyCredential,\n  firstPrfOutput?: boolean,\n  secondPrfOutput?: boolean,\n}): WebAuthnAuthenticationCredential {\n  const base = serializeAuthenticationCredential(credential);\n  const { chacha20PrfOutput, ed25519PrfOutput } = extractPrfFromCredential({\n    credential,\n    firstPrfOutput,\n    secondPrfOutput,\n  });\n  return {\n    ...base,\n    clientExtensionResults: {\n      prf: {\n        results: {\n          first: chacha20PrfOutput,\n          second: ed25519PrfOutput,\n        },\n      },\n    },\n  };\n}\n\n/**\n * Removes PRF outputs from the credential\n * @param credential - The WebAuthn credential containing PRF outputs\n * @returns Object containing credential with PRF removed and the extracted ChaCha20 PRF output\n */\nexport function removePrfOutputGuard<C extends SerializableCredential>(credential: C): C {\n  const credentialWithoutPrf: C = {\n    ...credential,\n    clientExtensionResults: {\n      ...credential.clientExtensionResults,\n      prf: {\n        results: {\n          first: null, // ChaCha20 PRF output\n          second: null // Ed25519 PRF output\n        }\n      }\n    }\n  };\n  return credentialWithoutPrf;\n}\n"],"mappings":";;;;;;;;;;;AAwBA,SAAgB,yBAAyB,EACvC,YACA,iBAAiB,MACjB,kBAAkB,SAKD;CAEjB,MAAM,mBAAmB,WAAW;CACpC,MAAM,aAAa,kBAAkB,KAAK;AAE1C,KAAI,CAAC,WACH,OAAM,IAAI,MAAM;CAGlB,MAAM,QAAQ,iBACV,YAAY,QAAQA,+BAAgB,WAAW,SAAwB,SACvE;CACJ,MAAM,SAAS,kBACX,YAAY,SAASA,+BAAgB,WAAW,UAAyB,SACzE;AAEJ,QAAO;EACL,mBAAmB;EACnB,kBAAkB;;;;;;;;;;AAatB,SAAgB,gCACd,YACgC;CAChC,MAAM,WAAW,WAAW;AAE5B,QAAO;EACL,IAAI,WAAW;EACf,OAAOA,+BAAgB,WAAW;EAClC,MAAM,WAAW;EACjB,yBAAyB,WAAW,2BAA2B;EAC/D,UAAU;GACR,gBAAgBA,+BAAgB,SAAS;GACzC,mBAAmBA,+BAAgB,SAAS;GAC5C,YAAY,SAAS,mBAAmB;;EAE1C,wBAAwB,EACtB,KAAK,EACH,SAAS;GACP,OAAO;GACP,QAAQ;;;;AAOlB,SAAgB,kCACd,YACkC;CAClC,MAAM,WAAW,WAAW;AAE5B,QAAO;EACL,IAAI,WAAW;EACf,OAAOA,+BAAgB,WAAW;EAClC,MAAM,WAAW;EACjB,yBAAyB,WAAW,2BAA2B;EAC/D,UAAU;GACR,gBAAgBA,+BAAgB,SAAS;GACzC,mBAAmBA,+BAAgB,SAAS;GAC5C,WAAWA,+BAAgB,SAAS;GACpC,YAAY,SAAS,aAAaA,+BAAgB,SAAS,cAA6B;;EAE1F,wBAAwB,EACtB,KAAK,EACH,SAAS;GACP,OAAO;GACP,QAAQ;;;;;;;;;AAYlB,SAAgB,uCAAuC,EACrD,YACA,iBAAiB,MACjB,kBAAkB,QAKe;CACjC,MAAM,OAAO,gCAAgC;CAC7C,MAAM,EAAE,mBAAmB,qBAAqB,yBAAyB;EACvE;EACA;EACA;;AAEF,QAAO;EACL,GAAG;EACH,wBAAwB,EACtB,KAAK,EACH,SAAS;GACP,OAAO;GACP,QAAQ;;;;AAOlB,SAAgB,yCAAyC,EACvD,YACA,iBAAiB,MACjB,kBAAkB,SAKiB;CACnC,MAAM,OAAO,kCAAkC;CAC/C,MAAM,EAAE,mBAAmB,qBAAqB,yBAAyB;EACvE;EACA;EACA;;AAEF,QAAO;EACL,GAAG;EACH,wBAAwB,EACtB,KAAK,EACH,SAAS;GACP,OAAO;GACP,QAAQ;;;;;;;;;AAYlB,SAAgB,qBAAuD,YAAkB;CACvF,MAAMC,uBAA0B;EAC9B,GAAG;EACH,wBAAwB;GACtB,GAAG,WAAW;GACd,KAAK,EACH,SAAS;IACP,OAAO;IACP,QAAQ;;;;AAKhB,QAAO"}