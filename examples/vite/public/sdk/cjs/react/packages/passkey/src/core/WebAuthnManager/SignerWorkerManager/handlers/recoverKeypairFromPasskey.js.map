{"version":3,"file":"recoverKeypairFromPasskey.js","names":["serializeAuthenticationCredentialWithPRF","WorkerRequestType","isRecoverKeypairFromPasskeySuccess","error: any"],"sources":["../../../../../../../../../../src/core/WebAuthnManager/SignerWorkerManager/handlers/recoverKeypairFromPasskey.ts"],"sourcesContent":["import {\n  WorkerRequestType,  // from wasm worker\n  isRecoverKeypairFromPasskeySuccess,\n} from '../../../types/signer-worker';\nimport { serializeAuthenticationCredentialWithPRF } from '../../credentialsHelpers';\nimport { SignerWorkerManagerContext } from '..';\n\n\n/**\n * Recover keypair from authentication credential for account recovery\n * Uses dual PRF-based Ed25519 key derivation with account-specific HKDF and AES encryption\n */\nexport async function recoverKeypairFromPasskey({\n  ctx,\n  credential,\n  accountIdHint,\n}: {\n  ctx: SignerWorkerManagerContext;\n  credential: PublicKeyCredential;\n  accountIdHint?: string;\n}): Promise<{\n  publicKey: string;\n  encryptedPrivateKey: string;\n  iv: string;\n  accountIdHint?: string;\n}> {\n  try {\n    console.info('SignerWorkerManager: Starting dual PRF-based keypair recovery from authentication credential');\n    // Serialize the authentication credential for the worker (includes dual PRF outputs)\n    const authenticationCredential = serializeAuthenticationCredentialWithPRF({\n      credential,\n      firstPrfOutput: true,\n      secondPrfOutput: true, // only for recovering NEAR keys\n    });\n\n    // Verify dual PRF outputs are available\n    if (!authenticationCredential.clientExtensionResults?.prf?.results?.first ||\n        !authenticationCredential.clientExtensionResults?.prf?.results?.second) {\n      throw new Error('Dual PRF outputs required for account recovery - both ChaCha20 and Ed25519 PRF outputs must be available');\n    }\n\n    // Use generic sendMessage with specific request type for better type safety\n    const response = await ctx.sendMessage<WorkerRequestType.RecoverKeypairFromPasskey>({\n      message: {\n        type: WorkerRequestType.RecoverKeypairFromPasskey,\n        payload: {\n          credential: authenticationCredential,\n          accountIdHint: accountIdHint,\n        }\n      }\n    });\n\n    // response is RecoverKeypairSuccessResponse | RecoverKeypairFailureResponse\n    if (!isRecoverKeypairFromPasskeySuccess(response)) {\n      throw new Error('Dual PRF keypair recovery failed in WASM worker');\n    }\n\n    return {\n      publicKey: response.payload.publicKey,\n      encryptedPrivateKey: response.payload.encryptedData,\n      iv: response.payload.iv,\n      accountIdHint: response.payload.accountIdHint\n    };\n\n  } catch (error: any) {\n    console.error('SignerWorkerManager: Dual PRF keypair recovery error:', error);\n    throw error;\n  }\n}\n"],"mappings":";;;;;;;;;AAYA,eAAsB,0BAA0B,EAC9C,KACA,YACA,iBAUC;AACD,KAAI;AACF,UAAQ,KAAK;EAEb,MAAM,2BAA2BA,oEAAyC;GACxE;GACA,gBAAgB;GAChB,iBAAiB;;AAInB,MAAI,CAAC,yBAAyB,wBAAwB,KAAK,SAAS,SAChE,CAAC,yBAAyB,wBAAwB,KAAK,SAAS,OAClE,OAAM,IAAI,MAAM;EAIlB,MAAM,WAAW,MAAM,IAAI,YAAyD,EAClF,SAAS;GACP,MAAMC,6CAAkB;GACxB,SAAS;IACP,YAAY;IACG;;;AAMrB,MAAI,CAACC,yDAAmC,UACtC,OAAM,IAAI,MAAM;AAGlB,SAAO;GACL,WAAW,SAAS,QAAQ;GAC5B,qBAAqB,SAAS,QAAQ;GACtC,IAAI,SAAS,QAAQ;GACrB,eAAe,SAAS,QAAQ;;UAG3BC,OAAY;AACnB,UAAQ,MAAM,yDAAyD;AACvE,QAAM"}