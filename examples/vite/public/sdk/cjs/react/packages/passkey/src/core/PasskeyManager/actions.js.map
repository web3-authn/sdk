{"version":3,"file":"actions.js","names":["error: any","ActionPhase","ActionStatus","actionResult: ActionResult","ActionType","transactionInputsWasm: TransactionInputWasm[]","toActionArgsWasm"],"sources":["../../../../../../../../src/core/PasskeyManager/actions.ts"],"sourcesContent":["import { ActionType, toActionArgsWasm } from '../types/actions';\nimport type {\n  SendTransactionHooksOptions,\n  SignTransactionHooksOptions,\n  VerifyAndSignTransactionResult,\n  ActionHooksOptions,\n  ActionResult,\n  SignAndSendTransactionHooksOptions\n} from '../types/passkeyManager';\nimport type { ActionArgs, TransactionInput, TransactionInputWasm } from '../types/actions';\nimport type { ConfirmationConfig } from '../types/signer-worker';\nimport type { TransactionContext } from '../types/rpc';\nimport type { PasskeyManagerContext } from './index';\nimport type { NearClient, SignedTransaction } from '../NearClient';\nimport type { AccountId } from '../types/accountIds';\nimport { ActionPhase, ActionStatus } from '../types/passkeyManager';\n\n//////////////////////////////\n// === PUBLIC API ===\n//////////////////////////////\n\n/**\n * Public API for executing actions - respects user confirmation preferences\n * executeAction signs a single transaction (with actions[]) to a single receiver.\n * If you want to sign multiple transactions to different receivers,\n * use signTransactionsWithActions() instead.\n *\n * @param context - PasskeyManager context\n * @param nearAccountId - NEAR account ID to sign transactions with\n * @param actionArgs - Action arguments to sign transactions with\n * @param options - Options for the action\n * @returns Promise resolving to the action result\n */\nexport async function executeAction(args: {\n  context: PasskeyManagerContext,\n  nearAccountId: AccountId,\n  receiverId: AccountId,\n  actionArgs: ActionArgs | ActionArgs[],\n  options?: ActionHooksOptions,\n}): Promise<ActionResult> {\n  try {\n    // Public API always uses undefined override (respects user settings)\n    return executeActionInternal({\n      context: args.context,\n      nearAccountId: args.nearAccountId,\n      receiverId: args.receiverId,\n      actionArgs: args.actionArgs,\n      options: args.options,\n      confirmationConfigOverride: undefined\n    });\n  } catch (error: any) {\n    throw error;\n  }\n}\n\n/**\n * Signs multiple transactions with actions, and broadcasts them\n *\n * @param context - PasskeyManager context\n * @param nearAccountId - NEAR account ID to sign transactions with\n * @param transactionInput - Transaction input to sign\n * @param options - Options for the action\n * @returns Promise resolving to the action result\n */\nexport async function signAndSendTransactions(args: {\n  context: PasskeyManagerContext,\n  nearAccountId: AccountId,\n  transactionInputs: TransactionInput[],\n  options?: SignAndSendTransactionHooksOptions,\n}): Promise<ActionResult[]> {\n  return signAndSendTransactionsInternal({\n    context: args.context,\n    nearAccountId: args.nearAccountId,\n    transactionInputs: args.transactionInputs,\n    options: args.options,\n    confirmationConfigOverride: undefined\n  });\n}\n\n/**\n * Signs transactions with actions, without broadcasting them\n *\n * @param context - PasskeyManager context\n * @param nearAccountId - NEAR account ID to sign transactions with\n * @param actionArgs - Action arguments to sign transactions with\n * @param options - Options for the action\n * @returns Promise resolving to the action result\n */\nexport async function signTransactionsWithActions(args: {\n  context: PasskeyManagerContext,\n  nearAccountId: AccountId,\n  transactionInputs: TransactionInput[],\n  options?: SignTransactionHooksOptions,\n}): Promise<VerifyAndSignTransactionResult[]> {\n  try {\n    return signTransactionsWithActionsInternal({\n      context: args.context,\n      nearAccountId: args.nearAccountId,\n      transactionInputs: args.transactionInputs,\n      options: args.options,\n      confirmationConfigOverride: undefined\n      // Public API always uses undefined override (respects user settings)\n    });\n  } catch (error: any) {\n    throw error;\n  }\n}\n\n/**\n * 3. Transaction Broadcasting - Broadcasts the signed transaction to NEAR network\n * This method broadcasts a previously signed transaction and waits for execution\n *\n * @param context - PasskeyManager context\n * @param signedTransaction - The signed transaction to broadcast\n * @param waitUntil - The execution status to wait for (defaults to FINAL)\n * @returns Promise resolving to the transaction execution outcome\n *\n * @example\n * ```typescript\n * // Sign a transaction first\n * const signedTransactions = await signTransactionsWithActions(context, 'alice.near', {\n *   transactions: [{\n *     nearAccountId: 'alice.near',\n *     receiverId: 'bob.near',\n *     actions: [{\n *       action_type: ActionType.Transfer,\n *       deposit: '1000000000000000000000000'\n *     }],\n *     nonce: '123'\n *   }]\n * });\n *\n * // Then broadcast it\n * const result = await sendTransaction(\n *   context,\n *   signedTransactions[0].signedTransaction,\n *   TxExecutionStatus.FINAL\n * );\n * console.log('Transaction ID:', result.transaction_outcome?.id);\n * ```\n *\n * sendTransaction centrally manages nonce lifecycle around broadcast:\n * - On success: reconciles nonce with chain via updateNonceFromBlockchain() (async),\n *   which also prunes any stale reservations.\n * - On failure: releases the reserved nonce immediately to avoid leaks.\n * Callers SHOULD NOT release the nonce in their own catch blocks.\n */\nexport async function sendTransaction({\n  context,\n  signedTransaction,\n  options,\n}: {\n  context: PasskeyManagerContext,\n  signedTransaction: SignedTransaction,\n  options?: SendTransactionHooksOptions,\n}): Promise<ActionResult> {\n\n  options?.onEvent?.({\n    step: 8,\n    phase: ActionPhase.STEP_8_BROADCASTING,\n    status: ActionStatus.PROGRESS,\n    message: `Broadcasting transaction...`\n  });\n\n  let transactionResult;\n  let txId;\n  try {\n    transactionResult = await context.nearClient.sendTransaction(\n      signedTransaction,\n      options?.waitUntil\n    );\n    txId = transactionResult.transaction?.hash || transactionResult.transaction?.id;\n\n    // Update nonce from blockchain after successful transaction broadcast asynchronously\n    const nonce = signedTransaction.transaction.nonce;\n    context.webAuthnManager.getNonceManager().updateNonceFromBlockchain(\n      context.nearClient,\n      nonce.toString()\n    ).catch((error) => {\n      console.warn('[sendTransaction] Failed to update nonce from blockchain:', error);\n      // don't fail transaction if nonce update fails\n    });\n\n    options?.onEvent?.({\n      step: 8,\n      phase: ActionPhase.STEP_8_BROADCASTING,\n      status: ActionStatus.SUCCESS,\n      message: `Transaction ${txId} sent successfully`\n    });\n    options?.onEvent?.({\n      step: 9,\n      phase: ActionPhase.STEP_9_ACTION_COMPLETE,\n      status: ActionStatus.SUCCESS,\n      message: `Transaction ${txId} completed `\n    });\n  } catch (error) {\n    console.error('[sendTransaction] failed:', error);\n    // Centralized cleanup: release reserved nonce on failure (idempotent)\n    try {\n      const nonce = signedTransaction.transaction.nonce;\n      context.webAuthnManager.getNonceManager().releaseNonce(nonce.toString());\n    } catch (nonceError) {\n      console.warn('[sendTransaction]: Failed to release nonce after failure:', nonceError);\n    }\n    throw error;\n  }\n\n  const actionResult: ActionResult = {\n    success: true,\n    transactionId: txId,\n    result: transactionResult\n  };\n\n  return actionResult;\n}\n\n//////////////////////////////\n// === INTERNAL API ===\n//////////////////////////////\n\n/**\n * Internal API for executing actions with optional confirmation override\n * @internal - Only used by internal SDK components like SecureTxConfirmButton\n *\n * @param context - PasskeyManager context\n * @param nearAccountId - NEAR account ID to sign transactions with\n * @param actionArgs - Action arguments to sign transactions with\n * @param options - Options for the action\n * @returns Promise resolving to the action result\n */\nexport async function executeActionInternal({\n  context,\n  nearAccountId,\n  receiverId,\n  actionArgs,\n  options,\n  confirmationConfigOverride,\n}: {\n  context: PasskeyManagerContext,\n  nearAccountId: AccountId,\n  receiverId: AccountId,\n  actionArgs: ActionArgs | ActionArgs[],\n  options?: ActionHooksOptions,\n  confirmationConfigOverride?: ConfirmationConfig | undefined,\n}): Promise<ActionResult> {\n\n  const { onEvent, onError, hooks, waitUntil } = options || {};\n  const actions = Array.isArray(actionArgs) ? actionArgs : [actionArgs];\n\n  try {\n    await options?.hooks?.beforeCall?.();\n\n    // Pre-warm NonceManager with fresh transaction context data\n    try {\n      await context.webAuthnManager.getNonceManager().getNonceBlockHashAndHeight(context.nearClient);\n    } catch (error) {\n      console.warn('[executeAction]: Failed to pre-warm NonceManager:', error);\n      // Continue execution - NonceManager will fall back to direct RPC calls if needed\n    }\n\n    const signedTxs = await signTransactionsWithActionsInternal({\n      context,\n      nearAccountId,\n      transactionInputs: [{\n        receiverId: receiverId,\n        actions: actions,\n      }],\n      options: { onEvent, onError, hooks, waitUntil },\n      confirmationConfigOverride\n    });\n\n    const txResult = await sendTransaction({\n      context,\n      signedTransaction: signedTxs[0].signedTransaction,\n      options: { onEvent, onError, hooks, waitUntil }\n    });\n\n    hooks?.afterCall?.(true, txResult);\n    return txResult;\n\n  } catch (error: any) {\n    console.error('[executeAction] Error during execution:', error);\n    onError?.(error);\n    onEvent?.({\n      step: 0,\n      phase: ActionPhase.ACTION_ERROR,\n      status: ActionStatus.ERROR,\n      message: `Action failed: ${error.message}`,\n      error: error.message\n    });\n\n    const result = { success: false, error: error.message, transactionId: undefined };\n    hooks?.afterCall?.(false, result);\n    return result;\n  }\n}\n\nexport async function signAndSendTransactionsInternal({\n  context,\n  nearAccountId,\n  transactionInputs,\n  options,\n  confirmationConfigOverride,\n}: {\n  context: PasskeyManagerContext,\n  nearAccountId: AccountId,\n  transactionInputs: TransactionInput[],\n  options?: SignAndSendTransactionHooksOptions,\n  confirmationConfigOverride?: ConfirmationConfig | undefined,\n}): Promise<ActionResult[]> {\n\n  try {\n    const signedTxs = await signTransactionsWithActionsInternal({\n      context,\n      nearAccountId,\n      transactionInputs,\n      options,\n      confirmationConfigOverride\n    });\n\n    if (options?.executeSequentially) {\n      // Note: sendTransaction handles nonce release on failure centrally\n      const txResults = [];\n      for (const tx of signedTxs) {\n        const txResult = await sendTransaction({\n          context,\n          signedTransaction: tx.signedTransaction,\n          options\n        });\n        txResults.push(txResult);\n      }\n      return txResults;\n\n    } else {\n      // Parallel execution; sendTransaction handles failure cleanup per tx\n      return Promise.all(signedTxs.map(async (tx) =>\n        sendTransaction({\n          context,\n          signedTransaction: tx.signedTransaction,\n          options\n        })\n      ));\n    }\n  } catch (error) {\n    // If signing fails, release all reserved nonces\n    context.webAuthnManager.getNonceManager().releaseAllNonces();\n    throw error;\n  }\n}\n\n/**\n * Internal API for signing transactions with actions\n * @internal - Only used by internal SDK components with confirmationConfigOverride\n *\n * @param context - PasskeyManager context\n * @param nearAccountId - NEAR account ID to sign transactions with\n * @param actionArgs - Action arguments to sign transactions with\n * @param options - Options for the action\n * @returns Promise resolving to the action result\n */\nexport async function signTransactionsWithActionsInternal({\n  context,\n  nearAccountId,\n  transactionInputs,\n  options,\n  confirmationConfigOverride,\n}: {\n  context: PasskeyManagerContext,\n  nearAccountId: AccountId,\n  transactionInputs: TransactionInput[],\n  options?: ActionHooksOptions,\n  confirmationConfigOverride?: ConfirmationConfig | undefined,\n}): Promise<VerifyAndSignTransactionResult[]> {\n\n  const { onEvent, onError, hooks, waitUntil } = options || {};\n\n  try {\n    await options?.hooks?.beforeCall?.();\n    // Emit started event\n    onEvent?.({\n      step: 1,\n      phase: ActionPhase.STEP_1_PREPARATION,\n      status: ActionStatus.PROGRESS,\n      message: transactionInputs.length > 1\n        ? `Starting batched transaction with ${transactionInputs.length} actions`\n        : `Starting ${transactionInputs[0].actions[0].type} action`\n    });\n\n    // 1. Basic validation (NEAR data fetching moved to confirmation flow)\n    await validateInputsOnly(nearAccountId, transactionInputs, { onEvent, onError, hooks, waitUntil });\n\n    // 2. VRF Authentication + Transaction Signing (NEAR data fetched in confirmation flow)\n    const signedTxs = await wasmAuthenticateAndSignTransactions(\n      context,\n      nearAccountId,\n      transactionInputs,\n      { onEvent, onError, hooks, waitUntil, confirmationConfigOverride }\n    );\n\n    return signedTxs;\n  } catch (error: any) {\n    console.error('[signTransactionsWithActions] Error during execution:', error);\n    onError?.(error);\n    onEvent?.({\n      step: 0,\n      phase: ActionPhase.ACTION_ERROR,\n      status: ActionStatus.ERROR,\n      message: `Action failed: ${error.message}`,\n      error: error.message\n    });\n    throw error;\n  }\n}\n\n//////////////////////////////\n// === HELPER FUNCTIONS ===\n//////////////////////////////\n\n/**\n * 1. Input Validation - Validates inputs without fetching NEAR data\n */\nasync function validateInputsOnly(\n  nearAccountId: AccountId,\n  transactionInputs: TransactionInput[],\n  options?: ActionHooksOptions,\n): Promise<void> {\n  const { onEvent, onError, hooks } = options || {};\n\n  // Basic validation\n  if (!nearAccountId) {\n    throw new Error('User not logged in or NEAR account ID not set for direct action.');\n  }\n\n  onEvent?.({\n    step: 1,\n    phase: ActionPhase.STEP_1_PREPARATION,\n    status: ActionStatus.PROGRESS,\n    message: 'Validating inputs...'\n  });\n\n  for (const transactionInput of transactionInputs) {\n    if (!transactionInput.receiverId) {\n      throw new Error('Missing required parameter: receiverId');\n    }\n    for (const action of transactionInput.actions) {\n      if (action.type === ActionType.FunctionCall && (!action.methodName || action.args === undefined)) {\n        throw new Error('Missing required parameters for function call: methodName or args');\n      }\n      if (action.type === ActionType.Transfer && !action.amount) {\n        throw new Error('Missing required parameter for transfer: amount');\n      }\n    }\n  }\n}\n\n/**\n * 2. VRF Authentication - Handles VRF challenge generation and WebAuthn authentication\n *  with the webauthn contract\n */\nasync function wasmAuthenticateAndSignTransactions(\n  context: PasskeyManagerContext,\n  nearAccountId: AccountId,\n  transactionInputs: TransactionInput[],\n  options?: ActionHooksOptions & { confirmationConfigOverride?: ConfirmationConfig }\n  // Per-call override for confirmation behavior (does not persist to IndexedDB)\n): Promise<VerifyAndSignTransactionResult[]> {\n\n  const { onEvent, onError, hooks, confirmationConfigOverride } = options || {};\n  const { webAuthnManager } = context;\n\n  onEvent?.({\n    step: 2,\n    phase: ActionPhase.STEP_2_USER_CONFIRMATION,\n    status: ActionStatus.PROGRESS,\n    message: 'Requesting user confirmation...'\n  });\n\n  // VRF challenge and NEAR data will be generated in the confirmation flow\n  // This eliminates the ~700ms blocking operations before modal display\n\n  // Convert all actions to ActionArgsWasm format for batched transaction\n  const transactionInputsWasm: TransactionInputWasm[] = transactionInputs.map((tx, i) => {\n    return {\n      receiverId: tx.receiverId,\n      actions: tx.actions.map(action => toActionArgsWasm(action)),\n    }\n  });\n\n  // Use the unified action-based WASM worker transaction signing\n  const signedTxs = await webAuthnManager.signTransactionsWithActions({\n    transactions: transactionInputsWasm,\n    rpcCall: {\n      contractId: context.configs.contractId,\n      nearRpcUrl: context.configs.nearRpcUrl,\n      nearAccountId: nearAccountId, // caller account\n    },\n    // VRF challenge and NEAR data computed in confirmation flow\n    confirmationConfigOverride: confirmationConfigOverride,\n    // Pass through the onEvent callback for progress updates\n    onEvent: onEvent ? (progressEvent) => {\n      if (progressEvent.phase === ActionPhase.STEP_4_WEBAUTHN_AUTHENTICATION) {\n        onEvent?.({\n          step: 4,\n          phase: ActionPhase.STEP_4_WEBAUTHN_AUTHENTICATION,\n          status: ActionStatus.PROGRESS,\n          message: 'Authenticating with WebAuthn contract...',\n        });\n      }\n      if (progressEvent.phase === ActionPhase.STEP_5_AUTHENTICATION_COMPLETE) {\n        onEvent?.({\n          step: 5,\n          phase: ActionPhase.STEP_5_AUTHENTICATION_COMPLETE,\n          status: ActionStatus.SUCCESS,\n          message: 'WebAuthn verification complete',\n        });\n      }\n      if (progressEvent.phase === ActionPhase.STEP_6_TRANSACTION_SIGNING_PROGRESS) {\n        onEvent?.({\n          step: 6,\n          phase: ActionPhase.STEP_6_TRANSACTION_SIGNING_PROGRESS,\n          status: ActionStatus.PROGRESS,\n          message: 'Signing transaction...',\n        });\n      }\n      if (progressEvent.phase === ActionPhase.STEP_7_TRANSACTION_SIGNING_COMPLETE) {\n        onEvent?.({\n          step: 7,\n          phase: ActionPhase.STEP_7_TRANSACTION_SIGNING_COMPLETE,\n          status: ActionStatus.SUCCESS,\n          message: 'Transaction signed successfully',\n        });\n      }\n      onEvent({ ...progressEvent } as any);\n    } : undefined,\n  });\n\n  return signedTxs;\n}\n"],"mappings":"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"}