{"version":3,"file":"IframeButtonHost.js","names":["LitElementWithProps","createRef","ref","toPx","utilParsePx","computeIframeSizePure","BUTTON_WITH_TOOLTIP_ID","IFRAME_BOOTSTRAP_MODULE","EMBEDDED_SDK_BASE_PATH","EMBEDDED_TX_BUTTON_THEMES","TX_TREE_THEMES","e","IframeClipPathGenerator","computeExpandedIframeSizeFromGeometryPure","signAndSendTransactionsInternal","toAccountId","IFRAME_BUTTON_ID"],"sources":["../../../../../../../../../../src/core/WebAuthnManager/LitComponents/IframeButtonWithTooltipConfirmer/IframeButtonHost.ts"],"sourcesContent":["// External imports\nimport { html, css, type PropertyValues } from 'lit';\nimport { ref, createRef, Ref } from 'lit/directives/ref.js';\n// SDK imports\nimport type { TransactionInput } from '../../../types/actions';\nimport { toAccountId } from '../../../types/accountIds';\nimport type { SignAndSendTransactionHooksOptions, ActionResult } from '../../../types/passkeyManager';\nimport { signAndSendTransactionsInternal } from '../../../PasskeyManager/actions';\nimport type { PasskeyManagerContext } from '../../../PasskeyManager';\n// Local imports\nimport { LitElementWithProps, CSSProperties } from '../LitElementWithProps';\nimport type { TxTreeStyles } from '../TxTree';\nimport { TX_TREE_THEMES, type TxTreeTheme } from '../TxTree/tx-tree-themes';\nimport { EMBEDDED_TX_BUTTON_THEMES, type EmbeddedTxButtonTheme } from './button-with-tooltip-themes';\nimport {\n  EMBEDDED_SDK_BASE_PATH,\n  BUTTON_WITH_TOOLTIP_ID,\n  IFRAME_BOOTSTRAP_MODULE,\n  IFRAME_BUTTON_ID\n} from './tags';\nimport {\n  computeExpandedIframeSizeFromGeometryPure,\n  computeIframeSizePure,\n  IframeClipPathGenerator,\n  toPx,\n  TooltipGeometry,\n  TooltipPositionInternal,\n  utilParsePx\n} from './iframe-geometry';\nimport {\n  IframeInitData,\n  IframeButtonMessageType,\n  IframeButtonMessagePayloads,\n  IframeButtonMessage,\n} from '../common/iframe-messages'\n\n/**\n * Lit component that hosts the SecureTxConfirmButton iframe and manages all iframe communication.\n */\nexport class IframeButtonHost extends LitElementWithProps {\n  static properties = {\n    nearAccountId: {\n      type: String,\n      attribute: 'near-account-id'\n    },\n    txSigningRequests: {\n      type: Array,\n      // Always treat as changed so in-place mutations propagate to the iframe\n      hasChanged(_newVal: TransactionInput[], _oldVal: TransactionInput[]) {\n        return true;\n      }\n    },\n    color: { type: String },\n    // Optional fallback text when no slotted content is provided\n    buttonTextElement: { type: String },\n    buttonStyle: {\n      type: Object,\n      hasChanged(newVal: CSSProperties, oldVal: CSSProperties) {\n        return JSON.stringify(newVal) !== JSON.stringify(oldVal);\n      }\n    },\n    buttonHoverStyle: {\n      type: Object,\n      hasChanged(newVal: CSSProperties, oldVal: CSSProperties) {\n        return JSON.stringify(newVal) !== JSON.stringify(oldVal);\n      }\n    },\n    tooltipPosition: {\n      type: Object,\n      hasChanged(newVal: TooltipPositionInternal, oldVal: TooltipPositionInternal) {\n        return JSON.stringify(newVal) !== JSON.stringify(oldVal);\n      }\n    },\n    txTreeTheme: {\n      type: String,\n      attribute: 'tooltip-theme'\n    },\n    showLoading: {\n      type: Boolean,\n      attribute: 'show-loading'\n    },\n    options: {\n      type: Object,\n      hasChanged(newVal: SignAndSendTransactionHooksOptions, oldVal: SignAndSendTransactionHooksOptions) {\n        return JSON.stringify(newVal) !== JSON.stringify(oldVal);\n      }\n    },\n    passkeyManagerContext: {\n      type: Object,\n      hasChanged(newVal: PasskeyManagerContext | null, oldVal: PasskeyManagerContext | null) {\n        return JSON.stringify(newVal) !== JSON.stringify(oldVal);\n      }\n    },\n    // Event handlers\n    onSuccess: { type: Object },\n    onCancel: { type: Object },\n    onLoadTouchIdPrompt: { type: Object }\n  } as const;\n\n  static styles = css`\n    :host {\n      display: inline-block;\n      position: relative;\n      overflow: visible;\n      /* Let host size naturally to fit content */\n      width: fit-content;\n      height: fit-content;\n      /* Reset all spacing that could interfere */\n      line-height: 0; /* ensure no extra spacing around the button */\n      margin: 0;\n      padding: 0;\n      border: none;\n      box-sizing: border-box;\n    }\n\n    .iframe-button-host {\n      position: relative;\n      padding: 0;\n      margin: 0;\n      display: inline-block;\n      cursor: pointer;\n      z-index: 1001;\n      /* This container should size to button dimensions and provide layout footprint */\n      background: var(--btn-background, var(--btn-color, #222));\n      border-radius: var(--btn-border-radius, 8px);\n      border: var(--btn-border, none);\n      box-shadow: var(--btn-box-shadow, none);\n      transition: var(--btn-transition, none);\n      width: var(--button-width, 200px);\n      height: var(--button-height, 48px);\n      overflow: visible;\n    }\n\n    /* Host-driven hover/focus visuals (mirrored from iframe events) */\n    .iframe-button-host[data-hovered=\"true\"] {\n      background: var(--btn-hover-background, var(--btn-background, var(--btn-color, #222)));\n      border: var(--btn-hover-border, var(--btn-border, none));\n      box-shadow: var(--btn-hover-box-shadow, var(--btn-box-shadow, none));\n      transform: var(--btn-hover-transform, none);\n      transition: var(--btn-transition, none);\n    }\n    .iframe-button-host[data-hovered=\"true\"] .host-button-visual {\n      color: var(--btn-hover-color, var(--btn-color-text, #fff));\n    }\n    .iframe-button-host[data-focused=\"true\"] {\n      /* Optional focus ring; override via custom CSS if desired */\n      box-shadow: var(--btn-focus-box-shadow, 0 0 0 2px rgba(0,0,0,0.25));\n    }\n\n    /* Visual label rendered by host beneath the iframe */\n    .host-button-visual {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      display: grid;\n      place-items: center;\n      pointer-events: none; /* allow iframe to capture events */\n      color: var(--btn-color-text, #fff);\n      font-size: var(--btn-font-size, 1rem);\n      font-weight: var(--btn-font-weight, 500);\n      user-select: none;\n    }\n\n    iframe {\n      border: none;\n      background: transparent;\n      position: absolute;\n      z-index: 1000;\n    }\n\n    /* Flush positioning classes for different tooltip positions */\n    iframe.flush-top-left { top: 0; left: 0; }\n    iframe.flush-top-center { top: 0; left: 50%; transform: translateX(-50%); }\n    iframe.flush-top-right { top: 0; right: 0; }\n    iframe.flush-left { top: 50%; left: 0; transform: translateY(-50%); }\n    iframe.flush-right { top: 50%; right: 0; transform: translateY(-50%); }\n    iframe.flush-bottom-left { bottom: 0; left: 0; }\n    iframe.flush-bottom-center { bottom: 0; left: 50%; transform: translateX(-50%); }\n    iframe.flush-bottom-right { bottom: 0; right: 0; }\n  `;\n\n  private iframeInitialized = false;\n  private currentGeometry: TooltipGeometry | null = null;\n  private clipPathSupported = false;\n  private initialClipPathApplied = false;\n  private iframeRef: Ref<HTMLIFrameElement> = createRef();\n  private hostRef: Ref<HTMLDivElement> = createRef();\n  private tooltipVisible: boolean = false;\n  private onDocPointerDown = (ev: PointerEvent) => {\n    // Click-away to close tooltip when visible\n    if (!this.tooltipVisible) return;\n    const hostEl = this.hostRef.value;\n    if (!hostEl) return;\n    const target = ev.target as Node | null;\n    if (target && hostEl.contains(target)) {\n      // Click occurred inside the host/iframe area; ignore\n      return;\n    }\n    // Hide tooltip in iframe\n    this.postToIframe('SET_TOOLTIP_VISIBILITY', false);\n  };\n\n  // Reactive properties are automatically created by Lit from static properties\n  // Don't declare them as instance properties, this overrides Lit's setters\n  declare nearAccountId: string;\n  declare txSigningRequests: TransactionInput[];\n\n  declare color: string;\n  declare buttonTextElement: string;\n  declare buttonStyle: Record<string, string | number>;\n  declare buttonHoverStyle: Record<string, string | number>;\n  declare tooltipPosition: TooltipPositionInternal;\n  declare txTreeTheme: EmbeddedTxButtonTheme;\n  declare showLoading: boolean;\n  declare options: SignAndSendTransactionHooksOptions;\n  declare passkeyManagerContext: PasskeyManagerContext | null;\n\n  // Event handlers (not reactive properties)\n  onSuccess?: (result: ActionResult[] ) => void;\n  onCancel?: () => void;\n  onLoadTouchIdPrompt?: (loading: boolean) => void;\n\n  // Message handler reference for proper cleanup\n  private messageHandler?: (event: MessageEvent) => void;\n  private pendingUiDigestResolve?: (v: string) => void;\n  private pendingUiDigestReject?: (e: Error) => void;\n\n  constructor() {\n    super();\n    // Initialize default values for reactive properties\n    this.nearAccountId = '';\n    this.txSigningRequests = [];\n\n    this.buttonStyle = {};\n    this.buttonHoverStyle = {};\n    this.buttonTextElement = 'Sign Transaction';\n    this.tooltipPosition = {\n      width: '280px',\n      height: '300px',\n      position: 'top-center',\n      offset: '6px',\n      boxPadding: '5px',\n    };\n    this.txTreeTheme = 'dark';\n    this.showLoading = false;\n    this.options = {};\n    this.passkeyManagerContext = null;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.setupClipPathSupport();\n    // Apply button style CSS variables on initial connection\n    this.applyButtonStyle();\n  }\n\n  updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    // Apply button style CSS variables when buttonStyle changes\n    if (changedProperties.has('buttonStyle') || changedProperties.has('buttonHoverStyle')) {\n      this.applyButtonStyle();\n    }\n\n    // Only initialize iframe once, then use postMessage for updates\n    if (!this.iframeInitialized) {\n      this.initializeIframe();\n      this.iframeInitialized = true;\n    } else {\n      // Use postMessage to update iframe properties instead of recreating HTML\n      this.updateIframeViaPostMessage(changedProperties);\n    }\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this.messageHandler) {\n      window.removeEventListener('message', this.messageHandler);\n      this.messageHandler = undefined;\n    }\n    try { document.removeEventListener('pointerdown', this.onDocPointerDown, true); } catch {}\n  }\n\n  private applyButtonStyle() {\n    if (!this.buttonStyle) return;\n\n    const style = this.style;\n    if (this.buttonStyle.background) {\n      style.setProperty('--btn-background', String(this.buttonStyle.background));\n    }\n    if (this.buttonStyle.borderRadius) {\n      style.setProperty('--btn-border-radius', String(this.buttonStyle.borderRadius));\n    }\n    if (this.buttonStyle.border) {\n      style.setProperty('--btn-border', String(this.buttonStyle.border));\n    }\n    if ((this.buttonStyle as any).boxShadow) {\n      style.setProperty('--btn-box-shadow', String((this.buttonStyle as any).boxShadow));\n    }\n    if ((this.buttonStyle as any).transition) {\n      style.setProperty('--btn-transition', String((this.buttonStyle as any).transition));\n    }\n    if ((this.buttonStyle as any).color) {\n      style.setProperty('--btn-color-text', String((this.buttonStyle as any).color));\n    }\n    if ((this.buttonStyle as any).fontSize) {\n      style.setProperty('--btn-font-size', String((this.buttonStyle as any).fontSize));\n    }\n    if ((this.buttonStyle as any).fontWeight) {\n      style.setProperty('--btn-font-weight', String((this.buttonStyle as any).fontWeight));\n    }\n\n    // Map hover style to CSS vars; used by [data-hovered=\"true\"] selectors\n    if (this.buttonHoverStyle) {\n      const h = this.buttonHoverStyle as any;\n      if (h.background || h.backgroundColor) {\n        style.setProperty('--btn-hover-background', String(h.background || h.backgroundColor));\n      }\n      if (h.color) {\n        style.setProperty('--btn-hover-color', String(h.color));\n      }\n      if (h.border) {\n        style.setProperty('--btn-hover-border', String(h.border));\n      }\n      if (h.boxShadow) {\n        style.setProperty('--btn-hover-box-shadow', String(h.boxShadow));\n      }\n      if (h.transform) {\n        style.setProperty('--btn-hover-transform', String(h.transform));\n      }\n    }\n  }\n\n  render() {\n    const buttonSize = {\n      width: this.buttonStyle?.width || '200px',\n      height: this.buttonStyle?.height || '48px'\n    };\n\n    const iframeSize = this.calculateIframeSize();\n\n    return html`\n      <div class=\"iframe-button-host\" ${ref(this.hostRef)}\n        style=\"width: ${toPx(buttonSize.width)}; height: ${toPx(buttonSize.height)};\"\n      >\n        <div class=\"host-button-visual\"><slot>${this.buttonTextElement}</slot></div>\n        <iframe\n          ${ref(this.iframeRef)}\n          class=\"${iframeSize.flushClass}\"\n          style=\"width: ${iframeSize.width}px; height: ${iframeSize.height}px;\"\n          sandbox=\"allow-scripts allow-same-origin\"\n          allow=\"publickey-credentials-get; publickey-credentials-create\"\n        ></iframe>\n      </div>\n    `;\n  }\n\n  private calculateIframeSize() {\n    const buttonWidth = utilParsePx(this.buttonStyle?.width || '200px');\n    const buttonHeight = utilParsePx(this.buttonStyle?.height || '48px');\n    const tooltipWidth = utilParsePx(this.tooltipPosition.width);\n    // Special case: tooltip height can be 'auto', so we provide a fallback value for iframe calculations\n    const tooltipHeight = this.tooltipPosition.height === 'auto' ? 200 : utilParsePx(this.tooltipPosition.height);\n    const offset = utilParsePx(this.tooltipPosition.offset);\n\n    return computeIframeSizePure({\n      buttonWidthPx: buttonWidth,\n      buttonHeightPx: buttonHeight,\n      tooltipWidthPx: tooltipWidth,\n      tooltipHeightPx: tooltipHeight,\n      offsetPx: offset,\n      position: this.tooltipPosition.position,\n      paddingPx: 0,\n    });\n  }\n\n  private buildInitData(): IframeInitData {\n    const buttonSize = {\n      width: this.buttonStyle?.width || '200px',\n      height: this.buttonStyle?.height || '48px'\n    };\n\n    const iframeSize = this.calculateIframeSize();\n\n    return {\n      size: {\n        width: toPx(buttonSize.width),\n        height: toPx(buttonSize.height)\n      },\n      tooltip: {\n        width: toPx(this.tooltipPosition.width),\n        height: this.tooltipPosition.height,\n        position: this.tooltipPosition.position,\n        offset: toPx(this.tooltipPosition.offset)\n      },\n      buttonPosition: {\n        x: iframeSize.buttonPositionX,\n        y: iframeSize.buttonPositionY\n      },\n      backgroundColor: String(this.buttonStyle?.background || this.buttonStyle?.backgroundColor || this.color),\n      tagName: BUTTON_WITH_TOOLTIP_ID,\n      targetOrigin: window.location.origin,\n    };\n  }\n\n  // ==============================\n  // Iframe Init\n  // ==============================\n  private generateIframeHtml() {\n    const embeddedTxButtonTag = BUTTON_WITH_TOOLTIP_ID;\n    const iframeBootstrapTag = IFRAME_BOOTSTRAP_MODULE;\n    const base = EMBEDDED_SDK_BASE_PATH;\n    return `<!DOCTYPE html>\n      <html>\n        <head>\n          <meta charset=\"utf-8\" />\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n          <style>html,body{margin:0;padding:0;background:transparent}</style>\n          <script type=\"module\" src=\"${base}${embeddedTxButtonTag}.js\"></script>\n          <script type=\"module\" src=\"${base}${iframeBootstrapTag}\"></script>\n        </head>\n        <body>\n          <${embeddedTxButtonTag} id=\"etx\"></${embeddedTxButtonTag}>\n          <!-- bootstrap handled by external ${iframeBootstrapTag} module -->\n        </body>\n      </html>`;\n  }\n\n  private initializeIframe() {\n    if (!this.iframeRef.value) {\n      console.warn('[IframeButtonHost]: ⚠️ No iframe ref available for initialization');\n      return;\n    }\n\n    const html = this.generateIframeHtml();\n    const iframeEl = this.iframeRef.value;\n    iframeEl.srcdoc = html;\n\n    // Set up message handling\n    this.setupMessageHandling();\n    // Set host container to button size to prevent layout shifts\n    this.setHostContainerToButtonSize();\n  }\n\n  private setHostContainerToButtonSize() {\n    // Set CSS custom properties for the .iframe-button-host container\n    const buttonWidth = this.buttonStyle?.width || '200px';\n    const buttonHeight = this.buttonStyle?.height || '48px';\n\n    // Set CSS custom properties that the .iframe-button-host CSS will use\n    this.style.setProperty('--button-width', typeof buttonWidth === 'number' ? `${buttonWidth}px` : String(buttonWidth));\n    this.style.setProperty('--button-height', typeof buttonHeight === 'number' ? `${buttonHeight}px` : String(buttonHeight));\n  }\n\n  // ==============================\n  // Sizing & Builders (continued)\n  // ==============================\n  private updateIframeViaPostMessage(changedProperties: PropertyValues) {\n    if (!this.iframeRef.value?.contentWindow) return;\n\n    // Always push latest tx data; external apps may mutate arrays/objects in place\n    // which can bypass Lit's change detection.\n    this.postToIframe('SET_TX_DATA', {\n      nearAccountId: this.nearAccountId,\n      txSigningRequests: this.txSigningRequests\n    });\n\n    if (changedProperties.has('showLoading')) {\n      this.postToIframe('SET_LOADING', this.showLoading);\n      try { this.onLoadTouchIdPrompt?.(!!this.showLoading); } catch {}\n    }\n\n    if (\n      changedProperties.has('buttonStyle') ||\n      changedProperties.has('buttonHoverStyle') ||\n      changedProperties.has('tooltipPosition') ||\n      changedProperties.has('txTreeTheme') ||\n      changedProperties.has('color')\n    ) {\n      this.postStyleUpdateToIframe();\n\n      // Update host container size when button style changes\n      if (changedProperties.has('buttonStyle')) {\n        this.setHostContainerToButtonSize();\n      }\n    }\n  }\n\n  // ==============================\n  // Messaging Helpers\n  // ==============================\n  private getIframeWindow(): Window | null {\n    return this.iframeRef.value?.contentWindow || null;\n  }\n\n  private postToIframe<T extends keyof IframeButtonMessagePayloads>(type: T, payload?: IframeButtonMessagePayloads[T]) {\n    const w = this.getIframeWindow();\n    if (!w) {\n      console.error(`[IframeButtonHost]: Cannot post message - iframe window not available`);\n      return;\n    }\n    // Post to iframe; for srcdoc + allow-same-origin, this matches parent origin\n    const targetOrigin = window.location.origin;\n    w.postMessage({ type, payload }, targetOrigin);\n  }\n\n  private postInitialStateToIframe() {\n    this.postToIframe('SET_TX_DATA', {\n      nearAccountId: this.nearAccountId,\n      txSigningRequests: this.txSigningRequests\n    });\n    this.postToIframe('SET_LOADING', !!this.showLoading);\n    this.postStyleUpdateToIframe();\n  }\n\n  private postStyleUpdateToIframe() {\n    const buttonSize = {\n      width: this.buttonStyle?.width || '200px',\n      height: this.buttonStyle?.height || '48px'\n    };\n    // Get theme styles for tooltip tree\n    const themeStyles = this.getThemeStyles(this.txTreeTheme || 'dark');\n\n    // Get embedded button theme styles\n    const embeddedButtonTheme = EMBEDDED_TX_BUTTON_THEMES[this.txTreeTheme || 'dark'];\n\n    this.postToIframe('SET_STYLE', {\n      buttonSizing: buttonSize,\n      tooltipPosition: this.tooltipPosition,\n      tooltipTreeStyles: themeStyles,\n      embeddedButtonTheme: embeddedButtonTheme,\n      theme: this.txTreeTheme,\n    });\n\n    // Also re-send HS1_INIT to reapply precise positioning whenever the\n    // button's size or tooltip position changes, keeping embedded aligned.\n    this.postToIframe('HS1_INIT', this.buildInitData());\n  }\n\n  private getThemeStyles(theme: TxTreeTheme): TxTreeStyles {\n    return TX_TREE_THEMES[theme] || TX_TREE_THEMES.dark;\n  }\n\n  // ==============================\n  // Clip-path Helpers\n  // ==============================\n\n  private setupMessageHandling() {\n    if (!this.iframeRef.value) return;\n\n    const onMessage = (e: MessageEvent) => {\n      const w = this.getIframeWindow();\n      if (!w || e.source !== w) return;\n\n      const { type, payload } = (e.data || {}) as IframeButtonMessage;\n      switch (type as IframeButtonMessageType) {\n        case 'IFRAME_ERROR':\n        case 'IFRAME_UNHANDLED_REJECTION':\n          console.error('[IframeButton iframe]', type, payload);\n          return;\n        case 'ETX_DEFINED':\n          // The embedded element is fully upgraded; send initial state now\n          this.postInitialStateToIframe();\n          return;\n        case 'HS2_POSITIONED':\n          // The button positioning has been applied; now we can measure geometry\n          this.postToIframe('HS3_GEOMETRY_REQUEST');\n          return;\n        case 'HS5_GEOMETRY_RESULT':\n          this.handleInitGeometry(payload as IframeButtonMessagePayloads['HS5_GEOMETRY_RESULT']);\n          return;\n        case 'TOOLTIP_STATE':\n          this.handleTooltipState(payload as IframeButtonMessagePayloads['TOOLTIP_STATE']);\n          return;\n        case 'BUTTON_HOVER':\n          this.handleButtonHover(payload as IframeButtonMessagePayloads['BUTTON_HOVER']);\n          try {\n            const el = this.hostRef.value;\n            if (el) el.dataset.hovered = (payload as any)?.hovering ? 'true' : 'false';\n          } catch {}\n          return;\n        case 'BUTTON_FOCUS':\n          try {\n            const el = this.hostRef.value;\n            if (el) el.dataset.focused = (payload as any)?.focused ? 'true' : 'false';\n          } catch {}\n          return;\n        case 'UI_INTENT_DIGEST': {\n          const p = payload as IframeButtonMessagePayloads['UI_INTENT_DIGEST'];\n          if (p?.ok && p?.digest && this.pendingUiDigestResolve) {\n            this.pendingUiDigestResolve(p.digest);\n          } else if (!p?.ok && this.pendingUiDigestReject) {\n            this.pendingUiDigestReject(new Error(p?.error || 'UI digest failed'));\n          }\n          this.pendingUiDigestResolve = undefined;\n          this.pendingUiDigestReject = undefined;\n          return;\n        }\n        case 'READY':\n          // Send only HS1_INIT on READY so the iframe can position accurately.\n          // Defer data/style until ETX_DEFINED to avoid upgrade races.\n          this.postToIframe('HS1_INIT', {\n            ...this.buildInitData(),\n            // Provide parent origin for tighter child->parent messaging\n            targetOrigin: window.location.origin\n          });\n          // Apply optimistic clip-path immediately to prevent blocking clicks\n          // This will be replaced once HS5_GEOMETRY_RESULT is received\n          this.applyOptimisticClipPath();\n          return;\n        case 'CONFIRM':\n          this.handleConfirm();\n          return;\n        default:\n          return;\n      }\n    };\n\n    // Remove previous listener if it exists\n    if (this.messageHandler) {\n      window.removeEventListener('message', this.messageHandler);\n    }\n\n    // Add new listener and store reference\n    this.messageHandler = onMessage;\n    window.addEventListener('message', onMessage);\n  }\n\n  private setupClipPathSupport() {\n    this.clipPathSupported = CSS.supports('clip-path: polygon(0 0)');\n    if (!this.clipPathSupported) {\n      console.warn('[IframeButton] clip-path not supported, using rectangular iframe');\n    }\n  }\n\n  /**\n   * Apply clip-path using calculated button position before geometry is available\n   */\n  private applyOptimisticClipPath() {\n    if (!this.iframeRef.value) return;\n\n    const iframeSize = this.calculateIframeSize();\n    const buttonWidth = utilParsePx(this.buttonStyle?.width || '200px');\n    const buttonHeight = utilParsePx(this.buttonStyle?.height || '48px');\n    // Use the calculated button position from iframe sizing\n    const buttonX = iframeSize.buttonPositionX;\n    const buttonY = iframeSize.buttonPositionY;\n    const pad = 4;\n    const optimisticClipPath = `polygon(${buttonX - pad}px ${buttonY - pad}px, ${buttonX + buttonWidth + pad}px ${buttonY - pad}px, ${buttonX + buttonWidth + pad}px ${buttonY + buttonHeight + pad}px, ${buttonX - pad}px ${buttonY + buttonHeight + pad}px)`;\n\n    this.iframeRef.value.style.clipPath = optimisticClipPath;\n    this.iframeRef.value.classList.remove('interactive');\n  }\n\n  /**\n   * Apply clip-path that restricts interaction to button area only\n   */\n  private applyButtonOnlyClipPath() {\n    if (!this.iframeRef.value || !this.currentGeometry) return;\n    if (!this.clipPathSupported) return;\n\n    const { button } = this.currentGeometry;\n    // Use simple rectangle to avoid clipping button corners\n    const buttonClipPath = IframeClipPathGenerator.buildButtonClipPathPure(button, 4);\n    this.iframeRef.value.style.clipPath = buttonClipPath;\n    // Remove pointer events to allow click-through outside button area\n    this.iframeRef.value.classList.remove('interactive');\n  }\n\n  /**\n   * Apply clip-path that includes both button and tooltip areas (for hover state)\n   */\n  private applyButtonTooltipClipPath() {\n    if (!this.iframeRef.value || !this.currentGeometry) return;\n    if (!this.clipPathSupported) return;\n    try {\n      const unionClipPath = IframeClipPathGenerator.generateUnion(this.currentGeometry, 4);\n      if (unionClipPath) {\n        this.iframeRef.value.style.clipPath = unionClipPath;\n        this.iframeRef.value.classList.add('interactive');\n      }\n    } catch (error) {\n      console.error('[IframeButton] Error generating button+tooltip clip-path:', error);\n      // Fallback to button-only clip-path\n      this.applyButtonOnlyClipPath();\n    }\n  }\n\n  /**\n   * Force iframe re-initialization when tooltip style changes\n   * This recalculates iframe size and positioning based on new tooltip dimensions\n   */\n  forceIframeReinitialize() {\n    this.iframeInitialized = false;\n    this.currentGeometry = null;\n    this.initialClipPathApplied = false;\n\n    // Re-initialize the iframe with new tooltip style\n    this.initializeIframe();\n    this.iframeInitialized = true;\n  }\n\n  /**\n   * Update tooltip theme dynamically - called by React component when user changes theme preference\n   */\n  updateTheme(newTheme: 'dark' | 'light'): void {\n    // Update the txTreeTheme property\n    this.txTreeTheme = newTheme as EmbeddedTxButtonTheme;\n    // If iframe is already initialized, send theme update via postMessage\n    if (this.iframeInitialized) {\n      this.postStyleUpdateToIframe();\n    }\n    // Request Lit update\n    this.requestUpdate();\n  }\n\n  // ==============================\n  // Handshake Handlers\n  // ==============================\n\n  /**\n   * Handle initial geometry setup from iframe\n   * Applies button-only clip-path to prevent blocking clicks\n   */\n  private handleInitGeometry(geometry: TooltipGeometry) {\n    // Replace optimistic clip-path with precise button-only clip-path\n    this.currentGeometry = geometry;\n    this.applyButtonOnlyClipPath();\n  }\n\n  /**\n   * Handle combined tooltip state updates (geometry + visibility) from the iframe\n   */\n  private handleTooltipState(geometry: TooltipGeometry) {\n    this.currentGeometry = geometry;\n    const wasVisible = this.tooltipVisible;\n    this.tooltipVisible = !!geometry.visible;\n    // Manage global click-away listener when visibility changes\n    if (!wasVisible && this.tooltipVisible) {\n      document.addEventListener('pointerdown', this.onDocPointerDown, true);\n    } else if (wasVisible && !this.tooltipVisible) {\n      document.removeEventListener('pointerdown', this.onDocPointerDown, true);\n    }\n    // Apply appropriate clip-path based on visibility state\n    if (!geometry.visible) {\n      this.applyButtonOnlyClipPath();\n      // Restore to calculated size when tooltip is hidden\n      const iframe = this.iframeRef.value;\n      if (iframe) {\n        const size = this.calculateIframeSize();\n        iframe.style.width = `${size.width}px`;\n        iframe.style.height = `${size.height}px`;\n      }\n    } else {\n      // When tooltip is visible, expand iframe to fit measured geometry\n      const iframe = this.iframeRef.value;\n      if (iframe) {\n        const fallback = this.calculateIframeSize();\n        const size = computeExpandedIframeSizeFromGeometryPure({ geometry, fallback, paddingPx: 0 });\n        iframe.style.width = `${size.width}px`;\n        iframe.style.height = `${size.height}px`;\n      }\n\n      // CRITICAL: Update clip-path when tooltip dimensions change\n      // This handles tooltip expansion/contraction while visible\n      this.applyButtonTooltipClipPath();\n    }\n  }\n\n  /**\n   * Handle button hover state for dual clip-path management\n   * - Not hovering: Clip-path restricts to button area only\n   * - Hovering: Clip-path expands to include button + tooltip area\n   */\n  private handleButtonHover(payload: { hovering: boolean }) {\n    if (!this.iframeRef.value || !this.currentGeometry) return;\n\n    if (payload.hovering) {\n      // Apply button + tooltip clip-path when hovering and enable pointer events\n      this.applyButtonTooltipClipPath();\n    } else {\n      // Only apply button-only clip-path if tooltip is not visible\n      // This allows mouse movement from button to tooltip without closing\n      if (!this.currentGeometry.visible) {\n        this.applyButtonOnlyClipPath();\n      } else {\n        // Keep the expanded clip-path and pointer events so user can reach the tooltip\n      }\n    }\n  }\n\n  // ==============================\n  // Digest & Confirm\n  // ==============================\n\n  // Request a digest of the UI data from the iframe (computed inside embedded element)\n  requestUiIntentDigest(): Promise<string> {\n    return new Promise<string>((resolve, reject) => {\n      if (!this.getIframeWindow()) return reject(new Error('iframe not ready'));\n      if (this.pendingUiDigestReject) {\n        this.pendingUiDigestReject(new Error('superseded'));\n      }\n      this.pendingUiDigestResolve = resolve;\n      this.pendingUiDigestReject = reject;\n      this.postToIframe('REQUEST_UI_DIGEST');\n      setTimeout(() => {\n        if (this.pendingUiDigestReject) {\n          this.pendingUiDigestReject(new Error('UI digest timeout'));\n          this.pendingUiDigestResolve = undefined;\n          this.pendingUiDigestReject = undefined;\n        }\n      }, 3000);\n    });\n  }\n\n  private async handleConfirm() {\n    if (\n      !this.passkeyManagerContext ||\n      !this.nearAccountId ||\n      !this.txSigningRequests ||\n      this.txSigningRequests.length === 0\n    ) {\n      const err = new Error('Missing required data for transaction');\n      this.options?.onError?.(err);\n      return;\n    }\n\n    // Signal loading\n    this.postToIframe('SET_LOADING', true);\n    this.onLoadTouchIdPrompt?.(true)\n\n    try {\n      const txResults = await signAndSendTransactionsInternal({\n        context: this.passkeyManagerContext,\n        nearAccountId: toAccountId(this.nearAccountId),\n        transactionInputs: this.txSigningRequests.map(tx => ({\n          receiverId: tx.receiverId,\n          actions: tx.actions\n        })),\n        options: {\n          onEvent: this.options?.onEvent,\n          onError: this.options?.onError,\n          hooks: this.options?.hooks,\n          waitUntil: this.options?.waitUntil,\n          executeSequentially: this.options?.executeSequentially\n        },\n        confirmationConfigOverride: {\n          uiMode: 'embedded',\n          behavior: 'autoProceed',\n          autoProceedDelay: 0,\n          theme: this.txTreeTheme\n        }\n      });\n      this.onSuccess?.(txResults);\n\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error(String(err));\n      this.options?.onError?.(error);\n\n    } finally {\n      this.postToIframe('SET_LOADING', false);\n      try { this.onLoadTouchIdPrompt?.(false); } catch {}\n    }\n  }\n}\n\n// Define the custom element\ncustomElements.define(IFRAME_BUTTON_ID, IframeButtonHost);\n\nexport default IframeButtonHost;\n"],"mappings":"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"}