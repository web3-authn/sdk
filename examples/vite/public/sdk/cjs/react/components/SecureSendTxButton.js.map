{"version":3,"file":"SecureSendTxButton.js","names":["TouchIdWithText: React.FC<{ buttonText?: string; loading?: boolean }>","TouchIcon","SecureSendTxButton: React.FC<SecureSendTxButtonProps & {\n  color?: string;\n  buttonStyle?: React.CSSProperties;\n  buttonHoverStyle?: React.CSSProperties;\n  /** Content shown inside the button; can be text or any element */\n  buttonTextElement?: React.ReactNode;\n  tooltipPosition?: TooltipPosition;\n  txTreeTheme?: EmbeddedTxButtonTheme;\n  lockTheme?: boolean;\n}>","usePasskeyContext","createComponent","React","IframeButtonHost","internalTooltipPosition: TooltipPositionInternal","out: Record<string, string | number>"],"sources":["../../../../src/react/components/SecureSendTxButton.tsx"],"sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useMemo,\n  isValidElement,\n  cloneElement\n} from 'react';\nimport { createComponent } from '@lit/react';\nimport {\n  TooltipPosition,\n  TooltipPositionInternal\n} from '@/core/WebAuthnManager/LitComponents/IframeButtonWithTooltipConfirmer/iframe-geometry';\nimport type { EmbeddedTxButtonTheme } from '@/core/WebAuthnManager/LitComponents/IframeButtonWithTooltipConfirmer/button-with-tooltip-themes';\nimport { IframeButtonHost } from '@/core/WebAuthnManager/LitComponents/IframeButtonWithTooltipConfirmer';\nimport type { SecureSendTxButtonProps } from '../types';\nimport { usePasskeyContext } from '../context';\nimport TouchIcon from '../components/ProfileSettingsButton/TouchIcon';\n\n\nexport const TouchIdWithText: React.FC<{ buttonText?: string; loading?: boolean }> = ({\n  buttonText = 'Send Transaction',\n  loading = false,\n}) => (\n  <span style={{ display: 'inline-flex', alignItems: 'center' }}>\n    <div style={{ borderRadius: '50%', position: 'relative', width: 22, height: 22, marginRight: 4 }}>\n      <div style={{\n        position: 'absolute', inset: 0,\n        display: 'grid', placeItems: 'center',\n        transition: 'opacity 160ms ease',\n        opacity: loading ? 0 : 1,\n      }}>\n        <TouchIcon width={22} height={22} strokeWidth={1.6} />\n      </div>\n      <div style={{\n        position: 'absolute', inset: 0,\n        display: 'grid', placeItems: 'center',\n        transition: 'opacity 160ms ease',\n        opacity: loading ? 1 : 0,\n      }}>\n        {/* SVG spinner using SMIL animateTransform for rotation */}\n        <svg width=\"22\" height=\"22\" viewBox=\"0 0 50 50\" aria-hidden focusable=\"false\">\n          <circle cx=\"25\" cy=\"25\" r=\"20\" stroke=\"currentColor\" strokeWidth=\"4\" fill=\"none\" opacity=\"0.25\" />\n          <path d=\"M25 5 a20 20 0 0 1 0 40\" stroke=\"currentColor\" strokeWidth=\"4\" fill=\"none\">\n            <animateTransform attributeName=\"transform\" type=\"rotate\" from=\"0 25 25\" to=\"360 25 25\" dur=\"0.8s\" repeatCount=\"indefinite\" />\n          </path>\n        </svg>\n      </div>\n    </div>\n    {buttonText}\n  </span>\n)\n\n/**\n * React wrapper around the Lit `iframe-button` component.\n * Much cleaner implementation that delegates iframe management to Lit.\n */\nexport const SecureSendTxButton: React.FC<SecureSendTxButtonProps & {\n  color?: string;\n  buttonStyle?: React.CSSProperties;\n  buttonHoverStyle?: React.CSSProperties;\n  /** Content shown inside the button; can be text or any element */\n  buttonTextElement?: React.ReactNode;\n  tooltipPosition?: TooltipPosition;\n  txTreeTheme?: EmbeddedTxButtonTheme;\n  lockTheme?: boolean;\n}> = ({\n  nearAccountId,\n  txSigningRequests,\n  options,\n  // Behavioral props\n  onCancel,\n  onSuccess,\n  onLoadTouchIdPrompt,\n  // Optional customizations\n  color,\n  buttonStyle,\n  buttonHoverStyle,\n  buttonTextElement = <TouchIdWithText />,\n  tooltipPosition = {\n    width: '360px',\n    height: 'auto',\n    position: 'top-center',\n  },\n  txTreeTheme = 'dark',\n  lockTheme = false,\n}) => {\n\n  const { passkeyManager } = usePasskeyContext();\n  // Memoize passkey context for stable prop identity\n  const passkeyManagerContext = useMemo(() => passkeyManager.getContext(), [passkeyManager]);\n  const [currentTheme, setCurrentTheme] = useState<EmbeddedTxButtonTheme>(txTreeTheme);\n  const [loadingTouchIdPrompt, setLoadingTouchIdPrompt] = useState(false);\n\n  // Uncontrolled mode: listen to user preference changes\n  useEffect(() => {\n    if (lockTheme) return;\n    const handleThemeChange = (newTheme: 'dark' | 'light') => {\n      setCurrentTheme(newTheme as EmbeddedTxButtonTheme);\n    };\n    // Subscribe to theme changes\n    const unsubscribe = passkeyManager.userPreferences.onThemeChange(handleThemeChange);\n    handleThemeChange(passkeyManager.userPreferences.getUserTheme());\n    return () => unsubscribe();\n  }, [passkeyManager, lockTheme]);\n\n  // Controlled mode: sync with TxTreeTheme prop changes\n  useEffect(() => {\n    if (lockTheme) setCurrentTheme(txTreeTheme);\n  }, [txTreeTheme, lockTheme]);\n\n  // Inline Lit wrapper creation\n  const RawIframeButton = useMemo(() => createComponent({\n    react: React,\n    tagName: 'iframe-button',\n    elementClass: IframeButtonHost,\n    events: {}\n  }), []);\n\n  const internalTooltipPosition: TooltipPositionInternal = useMemo(() => ({\n    width: tooltipPosition.width,\n    height: tooltipPosition.height,\n    position: tooltipPosition.position,\n    offset: '6px',\n    boxPadding: '6px',\n  }), [tooltipPosition.width, tooltipPosition.height, tooltipPosition.position]);\n  // NOTE: ensure offset >= boxPadding or tooltip's padding overlaps the button and makes\n  // it harder to click in some areas of the button.\n  // boxPadding is padding to ensure the tooltip has space for it's shadow\n\n  const handleLoadTouchIdPrompt = (loading: boolean) => {\n    try { setLoadingTouchIdPrompt(loading); } catch {}\n    try { onLoadTouchIdPrompt?.(loading); } catch {}\n  };\n\n  const content = useMemo(() => {\n    if (buttonTextElement) {\n      if (isValidElement(buttonTextElement)) {\n        const isDomElement = typeof (buttonTextElement as any).type === 'string';\n        return isDomElement\n          ? buttonTextElement\n          : cloneElement(buttonTextElement as any, { loading: loadingTouchIdPrompt });\n      }\n      return buttonTextElement;\n    }\n    return <TouchIdWithText loading={loadingTouchIdPrompt} />;\n  }, [buttonTextElement, loadingTouchIdPrompt]);\n\n  return (\n    <RawIframeButton\n      onMouseEnter={() => {\n        // Warm up block height/hash (and nonce if missing) on hover\n        // Fire-and-forget to avoid blocking UI thread\n        try { void passkeyManager.prefetchBlockheight(); } catch {}\n      }}\n      onFocus={() => {\n        // Also prefetch on keyboard focus\n        try { void passkeyManager.prefetchBlockheight(); } catch {}\n      }}\n      passkeyManagerContext={passkeyManagerContext}\n      // sendAndSignTransaction args\n      nearAccountId={nearAccountId}\n      txSigningRequests={txSigningRequests}\n      // hooks\n      options={{\n        hooks: options?.hooks,\n        onError: options?.onError,\n        onEvent: options?.onEvent,\n        waitUntil: options?.waitUntil,\n        executeSequentially: options?.executeSequentially\n      }}\n      onSuccess={onSuccess}\n      onCancel={onCancel}\n      onLoadTouchIdPrompt={handleLoadTouchIdPrompt}\n      // styles to pass to Lit component: IframeButtonHost.ts\n      color={color}\n      buttonStyle={toStyleRecord(buttonStyle)}\n      buttonHoverStyle={toStyleRecord(buttonHoverStyle)}\n      tooltipPosition={internalTooltipPosition}\n      txTreeTheme={currentTheme}\n    >\n      {content}\n    </RawIframeButton>\n  );\n};\n\n/**\n * Converts a React CSSProperties object to a Record<string, string | number> for Lit components\n * @param style\n * @returns\n */\nexport const toStyleRecord = (style?: React.CSSProperties): Record<string, string | number> | undefined => {\n  if (!style) return undefined;\n  const out: Record<string, string | number> = {};\n  Object.keys(style).forEach((k) => {\n    const v = (style as any)[k];\n    if (v !== undefined && v !== null) out[k] = v as any;\n  });\n  return out;\n};\n\nexport default SecureSendTxButton;\n"],"mappings":"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"}