{"version":3,"file":"ThemeProvider.js","names":["React","theme: ThemeName","tokens: DesignTokens","DARK_TOKENS","LIGHT_TOKENS","createCSSVariables","ThemeScope: React.FC<ThemeScopeProps>","Comp: any","attrs: any","ThemeProvider: React.FC<ThemeProviderProps>","usePasskeyContext","mergeTokens"],"sources":["../../../../../src/react/components/theme/ThemeProvider.tsx"],"sourcesContent":["import React from 'react';\nimport { usePasskeyContext } from '../../context';\nimport type { DesignTokens, UseThemeReturn } from './design-tokens';\nimport { LIGHT_TOKENS, DARK_TOKENS } from './design-tokens';\nimport { createCSSVariables, mergeTokens, PartialDeep } from './utils';\n\n// Consolidated theme context, hook, scope, and provider in one file to reduce confusion.\n// External API: ThemeProvider, useTheme, ThemeScope, ThemeName\n\nexport type ThemeName = 'light' | 'dark';\n\ninterface ThemeContextValue {\n  theme: ThemeName;\n  tokens: DesignTokens;\n  isDark: boolean;\n  prefix: string;\n  toggleTheme: () => void;\n  setTheme: (t: ThemeName) => void;\n  // Precomputed CSS variables for convenience\n  vars: React.CSSProperties;\n}\n\nconst ThemeContext = React.createContext<ThemeContextValue | null>(null);\n\nconst noop = () => {};\n\n// Internal: safe context read with sensible fallback when no provider is present\nexport const useThemeContext = (): ThemeContextValue => {\n  const ctx = React.useContext(ThemeContext);\n  if (ctx) return ctx;\n\n  const prefersDark =\n    typeof window !== 'undefined' && typeof window.matchMedia === 'function'\n      ? window.matchMedia('(prefers-color-scheme: dark)').matches\n      : false;\n  const theme: ThemeName = prefersDark ? 'dark' : 'light';\n  const tokens: DesignTokens = theme === 'dark' ? DARK_TOKENS : LIGHT_TOKENS;\n  const vars = createCSSVariables(tokens, '--w3a');\n  return {\n    theme,\n    tokens,\n    isDark: theme === 'dark',\n    prefix: '--w3a',\n    toggleTheme: noop,\n    setTheme: noop as (t: ThemeName) => void,\n    vars,\n  };\n};\n\n// Public: simple hook used by components\nexport function useTheme(): UseThemeReturn {\n  const ctx = useThemeContext();\n  return React.useMemo(() => ({\n    theme: ctx.theme,\n    tokens: ctx.tokens,\n    isDark: ctx.isDark,\n    toggleTheme: ctx.toggleTheme,\n    setTheme: ctx.setTheme,\n  }), [ctx.theme, ctx.tokens, ctx.isDark, ctx.toggleTheme, ctx.setTheme]);\n}\n\n// Public: boundary element that applies CSS variables and data attribute\nexport interface ThemeScopeProps {\n  as?: keyof React.JSX.IntrinsicElements;\n  className?: string;\n  style?: React.CSSProperties;\n  dataAttr?: string; // attribute to mark theme on boundary\n  children?: React.ReactNode;\n}\n\nexport const ThemeScope: React.FC<ThemeScopeProps> = ({\n  as = 'div',\n  className,\n  style,\n  dataAttr = 'data-w3a-theme',\n  children,\n}) => {\n  const { theme, vars } = useThemeContext();\n  const Comp: any = as;\n  const attrs: any = { [dataAttr]: theme };\n  return (\n    <Comp className={className} style={{ ...vars, ...style }} {...attrs}>\n      {children}\n    </Comp>\n  );\n};\n\nexport interface ThemeOverrides {\n  light?: PartialDeep<DesignTokens>;\n  dark?: PartialDeep<DesignTokens>;\n}\n\nexport interface ThemeProviderProps {\n  children: React.ReactNode;\n  theme?: ThemeName;                 // controlled\n  defaultTheme?: ThemeName;          // uncontrolled\n  onThemeChange?: (t: ThemeName) => void;\n  tokens?: ThemeOverrides | ((base: { light: DesignTokens; dark: DesignTokens }) => ThemeOverrides);\n  prefix?: string;                   // CSS var prefix\n}\n\nfunction getSystemPrefersDark(): boolean {\n  if (typeof window === 'undefined' || typeof window.matchMedia !== 'function') return false;\n  return window.matchMedia('(prefers-color-scheme: dark)').matches;\n}\n\nconst THEME_STORAGE_KEY = 'w3a_theme';\n\nfunction safeLoadStoredTheme(): ThemeName | null {\n  try {\n    if (typeof window === 'undefined') return null;\n    const v = window.localStorage?.getItem?.(THEME_STORAGE_KEY);\n    return v === 'light' || v === 'dark' ? v : null;\n  } catch {\n    return null;\n  }\n}\n\nfunction safeStoreTheme(t: ThemeName) {\n  try {\n    if (typeof window === 'undefined') return;\n    window.localStorage?.setItem?.(THEME_STORAGE_KEY, t);\n  } catch {}\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({\n  children,\n  theme: themeProp,\n  defaultTheme,\n  onThemeChange,\n  tokens,\n  prefix = '--w3a',\n}) => {\n  // Make passkey context optional - ThemeProvider can work without it\n  let passkeyManager;\n  try {\n    ({ passkeyManager } = usePasskeyContext());\n  } catch {\n    // ThemeProvider can work without PasskeyProvider\n    passkeyManager = null;\n  }\n  const isControlled = themeProp !== undefined && themeProp !== null;\n\n  const baseLight = React.useMemo(() => LIGHT_TOKENS, []);\n  const baseDark = React.useMemo(() => DARK_TOKENS, []);\n\n  const resolvedOverrides = React.useMemo(() =>\n    typeof tokens === 'function' ? tokens({ light: baseLight, dark: baseDark }) : (tokens || {}),\n    [tokens, baseLight, baseDark]\n  );\n\n  const lightTokens = React.useMemo(\n    () => mergeTokens(baseLight, resolvedOverrides.light),\n    [baseLight, resolvedOverrides.light]\n  );\n  const darkTokens = React.useMemo(\n    () => mergeTokens(baseDark, resolvedOverrides.dark),\n    [baseDark, resolvedOverrides.dark]\n  );\n\n  const [themeState, setThemeState] = React.useState<ThemeName>(() => {\n    if (isControlled) return themeProp as ThemeName;\n    try {\n      const t = passkeyManager?.userPreferences?.getUserTheme?.();\n      if (t === 'light' || t === 'dark') return t;\n    } catch {}\n    const stored = safeLoadStoredTheme();\n    if (stored) return stored;\n    return defaultTheme || (getSystemPrefersDark() ? 'dark' : 'light');\n  });\n\n  // Sync internal state when controlled prop changes\n  React.useEffect(() => {\n    if (isControlled && themeProp && themeProp !== themeState) {\n      setThemeState(themeProp);\n    }\n  }, [isControlled, themeProp]);\n\n  // Subscribe to manager updates if uncontrolled\n  React.useEffect(() => {\n    if (isControlled || !passkeyManager) return;\n    const up = passkeyManager.userPreferences;\n    if (!up?.onThemeChange) return;\n    const unsub = up.onThemeChange((t: ThemeName) => setThemeState(t));\n    return () => {\n      try { unsub?.(); } catch {}\n    };\n  }, [isControlled, passkeyManager]);\n\n  const setTheme = React.useCallback((t: ThemeName) => {\n    if (!isControlled) setThemeState(t);\n    try {\n      const didPersistToProfile = !!passkeyManager?.userPreferences?.setUserTheme?.(t);\n      if (!didPersistToProfile) safeStoreTheme(t);\n    } catch {\n      // If persisting to profile fails (e.g., logged out), keep local storage updated\n      safeStoreTheme(t);\n    }\n    onThemeChange?.(t);\n  }, [isControlled, onThemeChange, passkeyManager]);\n\n  const toggleTheme = React.useCallback(() => {\n    setTheme(themeState === 'dark' ? 'light' : 'dark');\n  }, [themeState, setTheme]);\n\n  const tokensForTheme = themeState === 'dark' ? darkTokens : lightTokens;\n  const vars = React.useMemo(() => createCSSVariables(tokensForTheme, prefix), [tokensForTheme, prefix]);\n\n  const value = React.useMemo(() => ({\n    theme: themeState,\n    tokens: tokensForTheme,\n    isDark: themeState === 'dark',\n    prefix,\n    toggleTheme,\n    setTheme,\n    vars,\n  }), [themeState, tokensForTheme, prefix, toggleTheme, setTheme, vars]);\n\n  return <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>;\n};\n"],"mappings":"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"}