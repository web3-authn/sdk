{"version":3,"file":"verifyAuthenticationHandler.js","names":["body: VerifyAuthenticationRequest","result: VerifyAuthenticationResponse","error: any","serverRequest: ServerRequest"],"sources":["../../../../src/server/core/verifyAuthenticationHandler.ts"],"sourcesContent":["import type {\n  ServerRequest,\n  ServerResponse,\n  VerifyAuthenticationRequest,\n  VerifyAuthenticationResponse,\n} from './types';\nimport { AuthService } from './AuthService';\n\n/**\n * Handle verify authentication response requests\n */\nexport async function handleVerifyAuthenticationResponse(\n  request: ServerRequest,\n  authService: AuthService\n): Promise<ServerResponse> {\n  try {\n    // Parse request body\n    if (!request.body) {\n      return {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ error: 'Request body is required' }),\n      };\n    }\n\n    const body: VerifyAuthenticationRequest = JSON.parse(request.body);\n\n    // Validate required fields\n    if (!body.vrf_data || !body.webauthn_authentication) {\n      return {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ error: 'vrf_data and webauthn_authentication are required' }),\n      };\n    }\n\n    // Call the account service to verify authentication\n    const result: VerifyAuthenticationResponse = await authService.verifyAuthenticationResponse(body);\n\n    // Return the response\n    return {\n      status: result.success ? 200 : 400,\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(result),\n    };\n\n  } catch (error: any) {\n    console.error('Error in verify authentication handler:', error);\n\n    return {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        success: false,\n        error: 'Internal server error',\n        details: error.message\n      }),\n    };\n  }\n}\n\n/**\n * Express.js middleware for verify authentication response\n * Usage: app.post('/verify-authentication-response', verifyAuthenticationMiddleware(authService))\n */\nexport function verifyAuthenticationMiddleware(authService: AuthService) {\n  return async (req: any, res: any) => {\n    const serverRequest: ServerRequest = {\n      method: req.method,\n      url: req.url,\n      headers: req.headers,\n      body: JSON.stringify(req.body),\n    };\n\n    const result = await authService.handleVerifyAuthenticationResponse(JSON.parse(serverRequest.body!));\n    res.status(result.success ? 200 : 400).json(result);\n  };\n}"],"mappings":";;;;AAWA,eAAsB,mCACpB,SACA,aACyB;AACzB,KAAI;AAEF,MAAI,CAAC,QAAQ,KACX,QAAO;GACL,QAAQ;GACR,SAAS,EAAE,gBAAgB;GAC3B,MAAM,KAAK,UAAU,EAAE,OAAO;;EAIlC,MAAMA,OAAoC,KAAK,MAAM,QAAQ;AAG7D,MAAI,CAAC,KAAK,YAAY,CAAC,KAAK,wBAC1B,QAAO;GACL,QAAQ;GACR,SAAS,EAAE,gBAAgB;GAC3B,MAAM,KAAK,UAAU,EAAE,OAAO;;EAKlC,MAAMC,SAAuC,MAAM,YAAY,6BAA6B;AAG5F,SAAO;GACL,QAAQ,OAAO,UAAU,MAAM;GAC/B,SAAS,EAAE,gBAAgB;GAC3B,MAAM,KAAK,UAAU;;UAGhBC,OAAY;AACnB,UAAQ,MAAM,2CAA2C;AAEzD,SAAO;GACL,QAAQ;GACR,SAAS,EAAE,gBAAgB;GAC3B,MAAM,KAAK,UAAU;IACnB,SAAS;IACT,OAAO;IACP,SAAS,MAAM;;;;;;;;;AAUvB,SAAgB,+BAA+B,aAA0B;AACvE,QAAO,OAAO,KAAU,QAAa;EACnC,MAAMC,gBAA+B;GACnC,QAAQ,IAAI;GACZ,KAAK,IAAI;GACT,SAAS,IAAI;GACb,MAAM,KAAK,UAAU,IAAI;;EAG3B,MAAM,SAAS,MAAM,YAAY,mCAAmC,KAAK,MAAM,cAAc;AAC7F,MAAI,OAAO,OAAO,UAAU,MAAM,KAAK,KAAK"}