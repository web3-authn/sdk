{"version":3,"file":"wasm_signer_worker.js","names":[],"sources":["../../../src/wasm_signer_worker/wasm_signer_worker.js"],"sourcesContent":["let wasm;\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nconst cachedTextEncoder = (typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : { encode: () => { throw Error('TextEncoder not available') } } );\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); };\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nfunction addToExternrefTable0(obj) {\n    const idx = wasm.__externref_table_alloc();\n    wasm.__wbindgen_export_4.set(idx, obj);\n    return idx;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        const idx = addToExternrefTable0(e);\n        wasm.__wbindgen_exn_store(idx);\n    }\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nconst CLOSURE_DTORS = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(state => {\n    wasm.__wbindgen_export_6.get(state.dtor)(state.a, state.b)\n});\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_6.get(state.dtor)(a, state.b);\n                CLOSURE_DTORS.unregister(state);\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches && builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction getArrayJsValueFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    const mem = getDataViewMemory0();\n    const result = [];\n    for (let i = ptr; i < ptr + 4 * len; i += 4) {\n        result.push(wasm.__wbindgen_export_4.get(mem.getUint32(i, true)));\n    }\n    wasm.__externref_drop_slice(ptr, len);\n    return result;\n}\n\nfunction passArrayJsValueToWasm0(array, malloc) {\n    const ptr = malloc(array.length * 4, 4) >>> 0;\n    for (let i = 0; i < array.length; i++) {\n        const add = addToExternrefTable0(array[i]);\n        getDataViewMemory0().setUint32(ptr + 4 * i, add, true);\n    }\n    WASM_VECTOR_LEN = array.length;\n    return ptr;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8ArrayMemory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nexport function init_worker() {\n    wasm.init_worker();\n}\n\n/**\n * Unified message handler for all signer worker operations\n * This replaces the TypeScript-based message dispatching with a Rust-based approach\n * for better type safety and performance\n * @param {string} message_json\n * @returns {Promise<string>}\n */\nexport function handle_signer_message(message_json) {\n    const ptr0 = passStringToWasm0(message_json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.handle_signer_message(ptr0, len0);\n    return ret;\n}\n\nfunction __wbg_adapter_48(arg0, arg1, arg2) {\n    wasm.closure208_externref_shim(arg0, arg1, arg2);\n}\n\nfunction __wbg_adapter_568(arg0, arg1, arg2, arg3) {\n    wasm.closure239_externref_shim(arg0, arg1, arg2, arg3);\n}\n\n/**\n * Behavior mode for confirmation flow\n * @enum {0 | 1}\n */\nexport const ConfirmationBehavior = Object.freeze({\n    RequireClick: 0, \"0\": \"RequireClick\",\n    AutoProceed: 1, \"1\": \"AutoProceed\",\n});\n/**\n * UI mode for confirmation display\n * @enum {0 | 1 | 2}\n */\nexport const ConfirmationUIMode = Object.freeze({\n    Skip: 0, \"0\": \"Skip\",\n    Modal: 1, \"1\": \"Modal\",\n    Embedded: 2, \"2\": \"Embedded\",\n});\n/**\n * Progress message types that can be sent during WASM operations\n * Values align with TypeScript WorkerResponseType enum for proper mapping\n *\n * Should match the Progress WorkerResponseTypes in worker_messages.rs:\n * - WorkerResponseType::RegistrationProgress\n * - WorkerResponseType::RegistrationComplete,\n * - WorkerResponseType::WebauthnAuthenticationProgress\n * - WorkerResponseType::AuthenticationComplete\n * - WorkerResponseType::TransactionSigningProgress\n * - WorkerResponseType::TransactionSigningComplete\n * @enum {18 | 19 | 20 | 21}\n */\nexport const ProgressMessageType = Object.freeze({\n    RegistrationProgress: 18, \"18\": \"RegistrationProgress\",\n    RegistrationComplete: 19, \"19\": \"RegistrationComplete\",\n    ExecuteActionsProgress: 20, \"20\": \"ExecuteActionsProgress\",\n    ExecuteActionsComplete: 21, \"21\": \"ExecuteActionsComplete\",\n});\n/**\n * Progress step identifiers for different phases of operations\n * Values start at 100 to avoid conflicts with WorkerResponseType enum\n * @enum {100 | 101 | 102 | 103 | 104 | 105 | 106 | 107}\n */\nexport const ProgressStep = Object.freeze({\n    Preparation: 100, \"100\": \"Preparation\",\n    UserConfirmation: 101, \"101\": \"UserConfirmation\",\n    ContractVerification: 102, \"102\": \"ContractVerification\",\n    WebauthnAuthentication: 103, \"103\": \"WebauthnAuthentication\",\n    AuthenticationComplete: 104, \"104\": \"AuthenticationComplete\",\n    TransactionSigningProgress: 105, \"105\": \"TransactionSigningProgress\",\n    TransactionSigningComplete: 106, \"106\": \"TransactionSigningComplete\",\n    Error: 107, \"107\": \"Error\",\n});\n/**\n * User verification policy for WebAuthn authenticators\n * @enum {0 | 1 | 2}\n */\nexport const UserVerificationPolicy = Object.freeze({\n    Required: 0, \"0\": \"Required\",\n    Preferred: 1, \"1\": \"Preferred\",\n    Discouraged: 2, \"2\": \"Discouraged\",\n});\n/**\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8}\n */\nexport const WorkerRequestType = Object.freeze({\n    DeriveNearKeypairAndEncrypt: 0, \"0\": \"DeriveNearKeypairAndEncrypt\",\n    RecoverKeypairFromPasskey: 1, \"1\": \"RecoverKeypairFromPasskey\",\n    CheckCanRegisterUser: 2, \"2\": \"CheckCanRegisterUser\",\n    DecryptPrivateKeyWithPrf: 3, \"3\": \"DecryptPrivateKeyWithPrf\",\n    SignTransactionsWithActions: 4, \"4\": \"SignTransactionsWithActions\",\n    ExtractCosePublicKey: 5, \"5\": \"ExtractCosePublicKey\",\n    SignTransactionWithKeyPair: 6, \"6\": \"SignTransactionWithKeyPair\",\n    SignNep413Message: 7, \"7\": \"SignNep413Message\",\n    SignVerifyAndRegisterUser: 8, \"8\": \"SignVerifyAndRegisterUser\",\n});\n/**\n * Worker response types enum - corresponds to TypeScript WorkerResponseType\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21}\n */\nexport const WorkerResponseType = Object.freeze({\n    DeriveNearKeypairAndEncryptSuccess: 0, \"0\": \"DeriveNearKeypairAndEncryptSuccess\",\n    RecoverKeypairFromPasskeySuccess: 1, \"1\": \"RecoverKeypairFromPasskeySuccess\",\n    CheckCanRegisterUserSuccess: 2, \"2\": \"CheckCanRegisterUserSuccess\",\n    DecryptPrivateKeyWithPrfSuccess: 3, \"3\": \"DecryptPrivateKeyWithPrfSuccess\",\n    SignTransactionsWithActionsSuccess: 4, \"4\": \"SignTransactionsWithActionsSuccess\",\n    ExtractCosePublicKeySuccess: 5, \"5\": \"ExtractCosePublicKeySuccess\",\n    SignTransactionWithKeyPairSuccess: 6, \"6\": \"SignTransactionWithKeyPairSuccess\",\n    SignNep413MessageSuccess: 7, \"7\": \"SignNep413MessageSuccess\",\n    SignVerifyAndRegisterUserSuccess: 8, \"8\": \"SignVerifyAndRegisterUserSuccess\",\n    DeriveNearKeypairAndEncryptFailure: 9, \"9\": \"DeriveNearKeypairAndEncryptFailure\",\n    RecoverKeypairFromPasskeyFailure: 10, \"10\": \"RecoverKeypairFromPasskeyFailure\",\n    CheckCanRegisterUserFailure: 11, \"11\": \"CheckCanRegisterUserFailure\",\n    DecryptPrivateKeyWithPrfFailure: 12, \"12\": \"DecryptPrivateKeyWithPrfFailure\",\n    SignTransactionsWithActionsFailure: 13, \"13\": \"SignTransactionsWithActionsFailure\",\n    ExtractCosePublicKeyFailure: 14, \"14\": \"ExtractCosePublicKeyFailure\",\n    SignTransactionWithKeyPairFailure: 15, \"15\": \"SignTransactionWithKeyPairFailure\",\n    SignNep413MessageFailure: 16, \"16\": \"SignNep413MessageFailure\",\n    SignVerifyAndRegisterUserFailure: 17, \"17\": \"SignVerifyAndRegisterUserFailure\",\n    RegistrationProgress: 18, \"18\": \"RegistrationProgress\",\n    RegistrationComplete: 19, \"19\": \"RegistrationComplete\",\n    ExecuteActionsProgress: 20, \"20\": \"ExecuteActionsProgress\",\n    ExecuteActionsComplete: 21, \"21\": \"ExecuteActionsComplete\",\n});\n\nconst __wbindgen_enum_RequestMode = [\"same-origin\", \"no-cors\", \"cors\", \"navigate\"];\n\nconst AuthenticationResponseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_authenticationresponse_free(ptr >>> 0, 1));\n\nexport class AuthenticationResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AuthenticationResponse.prototype);\n        obj.__wbg_ptr = ptr;\n        AuthenticationResponseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AuthenticationResponseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_authenticationresponse_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get clientDataJSON() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_authenticationresponse_clientDataJSON(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set clientDataJSON(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_authenticationresponse_clientDataJSON(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get authenticatorData() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_authenticationresponse_authenticatorData(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set authenticatorData(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_authenticationresponse_authenticatorData(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get signature() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_authenticationresponse_signature(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set signature(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_authenticationresponse_signature(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get userHandle() {\n        const ret = wasm.__wbg_get_authenticationresponse_userHandle(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * @param {string | null} [arg0]\n     */\n    set userHandle(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_authenticationresponse_userHandle(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst AuthenticatorOptionsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_authenticatoroptions_free(ptr >>> 0, 1));\n/**\n * Options for configuring WebAuthn authenticator behavior during registration\n */\nexport class AuthenticatorOptions {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AuthenticatorOptions.prototype);\n        obj.__wbg_ptr = ptr;\n        AuthenticatorOptionsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AuthenticatorOptionsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_authenticatoroptions_free(ptr, 0);\n    }\n    /**\n     * @returns {UserVerificationPolicy | undefined}\n     */\n    get userVerification() {\n        const ret = wasm.__wbg_get_authenticatoroptions_userVerification(this.__wbg_ptr);\n        return ret === 3 ? undefined : ret;\n    }\n    /**\n     * @param {UserVerificationPolicy | null} [arg0]\n     */\n    set userVerification(arg0) {\n        wasm.__wbg_set_authenticatoroptions_userVerification(this.__wbg_ptr, isLikeNone(arg0) ? 3 : arg0);\n    }\n    /**\n     * @returns {OriginPolicyInput | undefined}\n     */\n    get originPolicy() {\n        const ret = wasm.__wbg_get_authenticatoroptions_originPolicy(this.__wbg_ptr);\n        return ret === 0 ? undefined : OriginPolicyInput.__wrap(ret);\n    }\n    /**\n     * @param {OriginPolicyInput | null} [arg0]\n     */\n    set originPolicy(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, OriginPolicyInput);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_authenticatoroptions_originPolicy(this.__wbg_ptr, ptr0);\n    }\n}\n\nconst CheckCanRegisterUserRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_checkcanregisteruserrequest_free(ptr >>> 0, 1));\n\nexport class CheckCanRegisterUserRequest {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CheckCanRegisterUserRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_checkcanregisteruserrequest_free(ptr, 0);\n    }\n    /**\n     * @returns {VrfChallenge}\n     */\n    get vrfChallenge() {\n        const ret = wasm.__wbg_get_checkcanregisteruserrequest_vrfChallenge(this.__wbg_ptr);\n        return VrfChallenge.__wrap(ret);\n    }\n    /**\n     * @param {VrfChallenge} arg0\n     */\n    set vrfChallenge(arg0) {\n        _assertClass(arg0, VrfChallenge);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_checkcanregisteruserrequest_vrfChallenge(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {SerializedRegistrationCredential}\n     */\n    get credential() {\n        const ret = wasm.__wbg_get_checkcanregisteruserrequest_credential(this.__wbg_ptr);\n        return SerializedRegistrationCredential.__wrap(ret);\n    }\n    /**\n     * @param {SerializedRegistrationCredential} arg0\n     */\n    set credential(arg0) {\n        _assertClass(arg0, SerializedRegistrationCredential);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_checkcanregisteruserrequest_credential(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {string}\n     */\n    get contractId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_checkcanregisteruserrequest_contractId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set contractId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_checkcanregisteruserrequest_contractId(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get nearRpcUrl() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_checkcanregisteruserrequest_nearRpcUrl(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set nearRpcUrl(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_checkcanregisteruserrequest_nearRpcUrl(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {AuthenticatorOptions | undefined}\n     */\n    get authenticatorOptions() {\n        const ret = wasm.__wbg_get_checkcanregisteruserrequest_authenticatorOptions(this.__wbg_ptr);\n        return ret === 0 ? undefined : AuthenticatorOptions.__wrap(ret);\n    }\n    /**\n     * @param {AuthenticatorOptions | null} [arg0]\n     */\n    set authenticatorOptions(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, AuthenticatorOptions);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_checkcanregisteruserrequest_authenticatorOptions(this.__wbg_ptr, ptr0);\n    }\n}\n\nconst ClientExtensionResultsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_clientextensionresults_free(ptr >>> 0, 1));\n\nexport class ClientExtensionResults {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ClientExtensionResults.prototype);\n        obj.__wbg_ptr = ptr;\n        ClientExtensionResultsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ClientExtensionResultsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_clientextensionresults_free(ptr, 0);\n    }\n    /**\n     * @returns {PrfResults}\n     */\n    get prf() {\n        const ret = wasm.__wbg_get_clientextensionresults_prf(this.__wbg_ptr);\n        return PrfResults.__wrap(ret);\n    }\n    /**\n     * @param {PrfResults} arg0\n     */\n    set prf(arg0) {\n        _assertClass(arg0, PrfResults);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_clientextensionresults_prf(this.__wbg_ptr, ptr0);\n    }\n}\n\nconst ConfirmationConfigFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_confirmationconfig_free(ptr >>> 0, 1));\n/**\n * Unified confirmation configuration passed from main thread to WASM worker\n */\nexport class ConfirmationConfig {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ConfirmationConfig.prototype);\n        obj.__wbg_ptr = ptr;\n        ConfirmationConfigFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ConfirmationConfigFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_confirmationconfig_free(ptr, 0);\n    }\n    /**\n     * Type of UI to display for confirmation\n     * @returns {ConfirmationUIMode}\n     */\n    get uiMode() {\n        const ret = wasm.__wbg_get_confirmationconfig_uiMode(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Type of UI to display for confirmation\n     * @param {ConfirmationUIMode} arg0\n     */\n    set uiMode(arg0) {\n        wasm.__wbg_set_confirmationconfig_uiMode(this.__wbg_ptr, arg0);\n    }\n    /**\n     * How the confirmation UI behaves\n     * @returns {ConfirmationBehavior}\n     */\n    get behavior() {\n        const ret = wasm.__wbg_get_confirmationconfig_behavior(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * How the confirmation UI behaves\n     * @param {ConfirmationBehavior} arg0\n     */\n    set behavior(arg0) {\n        wasm.__wbg_set_confirmationconfig_behavior(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Delay in milliseconds before auto-proceeding (only used with autoProceedWithDelay)\n     * @returns {number | undefined}\n     */\n    get autoProceedDelay() {\n        const ret = wasm.__wbg_get_confirmationconfig_autoProceedDelay(this.__wbg_ptr);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * Delay in milliseconds before auto-proceeding (only used with autoProceedWithDelay)\n     * @param {number | null} [arg0]\n     */\n    set autoProceedDelay(arg0) {\n        wasm.__wbg_set_confirmationconfig_autoProceedDelay(this.__wbg_ptr, isLikeNone(arg0) ? 0x100000001 : (arg0) >>> 0);\n    }\n    /**\n     * UI theme preference (dark/light)\n     * @returns {string | undefined}\n     */\n    get theme() {\n        const ret = wasm.__wbg_get_confirmationconfig_theme(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * UI theme preference (dark/light)\n     * @param {string | null} [arg0]\n     */\n    set theme(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_confirmationconfig_theme(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst CoseExtractionResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_coseextractionresult_free(ptr >>> 0, 1));\n\nexport class CoseExtractionResult {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CoseExtractionResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coseextractionresult_free(ptr, 0);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get cosePublicKeyBytes() {\n        const ret = wasm.__wbg_get_coseextractionresult_cosePublicKeyBytes(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * @param {Uint8Array} arg0\n     */\n    set cosePublicKeyBytes(arg0) {\n        const ptr0 = passArray8ToWasm0(arg0, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_coseextractionresult_cosePublicKeyBytes(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst DecryptPrivateKeyRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptprivatekeyrequest_free(ptr >>> 0, 1));\n\nexport class DecryptPrivateKeyRequest {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptPrivateKeyRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptprivatekeyrequest_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get nearAccountId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_decryptprivatekeyrequest_nearAccountId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set nearAccountId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryptprivatekeyrequest_nearAccountId(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get chacha20PrfOutput() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_decryptprivatekeyrequest_chacha20PrfOutput(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set chacha20PrfOutput(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryptprivatekeyrequest_chacha20PrfOutput(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get encryptedPrivateKeyData() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_decryptprivatekeyrequest_encryptedPrivateKeyData(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set encryptedPrivateKeyData(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryptprivatekeyrequest_encryptedPrivateKeyData(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get encryptedPrivateKeyIv() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_decryptprivatekeyrequest_encryptedPrivateKeyIv(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set encryptedPrivateKeyIv(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryptprivatekeyrequest_encryptedPrivateKeyIv(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @param {string} near_account_id\n     * @param {string} chacha20_prf_output\n     * @param {string} encrypted_private_key_data\n     * @param {string} encrypted_private_key_iv\n     */\n    constructor(near_account_id, chacha20_prf_output, encrypted_private_key_data, encrypted_private_key_iv) {\n        const ptr0 = passStringToWasm0(near_account_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(chacha20_prf_output, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(encrypted_private_key_data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        const ptr3 = passStringToWasm0(encrypted_private_key_iv, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len3 = WASM_VECTOR_LEN;\n        const ret = wasm.decryptprivatekeyrequest_new(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n        this.__wbg_ptr = ret >>> 0;\n        DecryptPrivateKeyRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst DecryptPrivateKeyResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptprivatekeyresult_free(ptr >>> 0, 1));\n\nexport class DecryptPrivateKeyResult {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptPrivateKeyResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptprivatekeyresult_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get privateKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_decryptprivatekeyresult_privateKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set privateKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryptprivatekeyrequest_nearAccountId(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get nearAccountId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_decryptprivatekeyresult_nearAccountId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set nearAccountId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryptprivatekeyrequest_chacha20PrfOutput(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @param {string} private_key\n     * @param {string} near_account_id\n     */\n    constructor(private_key, near_account_id) {\n        const ptr0 = passStringToWasm0(private_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(near_account_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.decryptprivatekeyresult_new(ptr0, len0, ptr1, len1);\n        this.__wbg_ptr = ret >>> 0;\n        DecryptPrivateKeyResultFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst DecryptionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryption_free(ptr >>> 0, 1));\n\nexport class Decryption {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryption_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get chacha20_prf_output() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_decryption_chacha20_prf_output(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set chacha20_prf_output(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryption_chacha20_prf_output(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get encrypted_private_key_data() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_decryption_encrypted_private_key_data(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set encrypted_private_key_data(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryption_encrypted_private_key_data(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get encrypted_private_key_iv() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_decryption_encrypted_private_key_iv(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set encrypted_private_key_iv(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryption_encrypted_private_key_iv(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @param {string} chacha20_prf_output\n     * @param {string} encrypted_private_key_data\n     * @param {string} encrypted_private_key_iv\n     */\n    constructor(chacha20_prf_output, encrypted_private_key_data, encrypted_private_key_iv) {\n        const ptr0 = passStringToWasm0(chacha20_prf_output, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(encrypted_private_key_data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(encrypted_private_key_iv, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        const ret = wasm.decryption_new(ptr0, len0, ptr1, len1, ptr2, len2);\n        this.__wbg_ptr = ret >>> 0;\n        DecryptionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst DecryptionPayloadFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptionpayload_free(ptr >>> 0, 1));\n/**\n * Decryption payload (consolidated for deserialization and WASM binding)\n * Note: chacha20_prf_output is collected during user confirmation flow\n */\nexport class DecryptionPayload {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DecryptionPayload.prototype);\n        obj.__wbg_ptr = ptr;\n        DecryptionPayloadFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptionPayloadFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptionpayload_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get encryptedPrivateKeyData() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_decryptionpayload_encryptedPrivateKeyData(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set encryptedPrivateKeyData(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryptionpayload_encryptedPrivateKeyData(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get encryptedPrivateKeyIv() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_decryptionpayload_encryptedPrivateKeyIv(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set encryptedPrivateKeyIv(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryptionpayload_encryptedPrivateKeyIv(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @param {string} encrypted_private_key_data\n     * @param {string} encrypted_private_key_iv\n     */\n    constructor(encrypted_private_key_data, encrypted_private_key_iv) {\n        const ptr0 = passStringToWasm0(encrypted_private_key_data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(encrypted_private_key_iv, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.decryptionpayload_new(ptr0, len0, ptr1, len1);\n        this.__wbg_ptr = ret >>> 0;\n        DecryptionPayloadFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst DeriveNearKeypairAndEncryptRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_derivenearkeypairandencryptrequest_free(ptr >>> 0, 1));\n\nexport class DeriveNearKeypairAndEncryptRequest {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeriveNearKeypairAndEncryptRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_derivenearkeypairandencryptrequest_free(ptr, 0);\n    }\n    /**\n     * @returns {DualPrfOutputsStruct}\n     */\n    get dualPrfOutputs() {\n        const ret = wasm.__wbg_get_derivenearkeypairandencryptrequest_dualPrfOutputs(this.__wbg_ptr);\n        return DualPrfOutputsStruct.__wrap(ret);\n    }\n    /**\n     * @param {DualPrfOutputsStruct} arg0\n     */\n    set dualPrfOutputs(arg0) {\n        _assertClass(arg0, DualPrfOutputsStruct);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_derivenearkeypairandencryptrequest_dualPrfOutputs(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {string}\n     */\n    get nearAccountId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_derivenearkeypairandencryptrequest_nearAccountId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set nearAccountId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_derivenearkeypairandencryptrequest_nearAccountId(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {SerializedRegistrationCredential}\n     */\n    get credential() {\n        const ret = wasm.__wbg_get_derivenearkeypairandencryptrequest_credential(this.__wbg_ptr);\n        return SerializedRegistrationCredential.__wrap(ret);\n    }\n    /**\n     * @param {SerializedRegistrationCredential} arg0\n     */\n    set credential(arg0) {\n        _assertClass(arg0, SerializedRegistrationCredential);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_derivenearkeypairandencryptrequest_credential(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {LinkDeviceRegistrationTransaction | undefined}\n     */\n    get registrationTransaction() {\n        const ret = wasm.__wbg_get_derivenearkeypairandencryptrequest_registrationTransaction(this.__wbg_ptr);\n        return ret === 0 ? undefined : LinkDeviceRegistrationTransaction.__wrap(ret);\n    }\n    /**\n     * @param {LinkDeviceRegistrationTransaction | null} [arg0]\n     */\n    set registrationTransaction(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, LinkDeviceRegistrationTransaction);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_derivenearkeypairandencryptrequest_registrationTransaction(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {AuthenticatorOptions | undefined}\n     */\n    get authenticatorOptions() {\n        const ret = wasm.__wbg_get_derivenearkeypairandencryptrequest_authenticatorOptions(this.__wbg_ptr);\n        return ret === 0 ? undefined : AuthenticatorOptions.__wrap(ret);\n    }\n    /**\n     * @param {AuthenticatorOptions | null} [arg0]\n     */\n    set authenticatorOptions(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, AuthenticatorOptions);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_derivenearkeypairandencryptrequest_authenticatorOptions(this.__wbg_ptr, ptr0);\n    }\n}\n\nconst DeriveNearKeypairAndEncryptResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_derivenearkeypairandencryptresult_free(ptr >>> 0, 1));\n\nexport class DeriveNearKeypairAndEncryptResult {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeriveNearKeypairAndEncryptResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_derivenearkeypairandencryptresult_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get nearAccountId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_derivenearkeypairandencryptresult_nearAccountId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set nearAccountId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_derivenearkeypairandencryptresult_nearAccountId(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get publicKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_derivenearkeypairandencryptresult_publicKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set publicKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_derivenearkeypairandencryptresult_publicKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get encryptedData() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_derivenearkeypairandencryptresult_encryptedData(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set encryptedData(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_derivenearkeypairandencryptresult_encryptedData(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get iv() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_derivenearkeypairandencryptresult_iv(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set iv(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_derivenearkeypairandencryptresult_iv(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {boolean}\n     */\n    get stored() {\n        const ret = wasm.__wbg_get_derivenearkeypairandencryptresult_stored(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * @param {boolean} arg0\n     */\n    set stored(arg0) {\n        wasm.__wbg_set_derivenearkeypairandencryptresult_stored(this.__wbg_ptr, arg0);\n    }\n    /**\n     * @returns {WasmSignedTransaction | undefined}\n     */\n    get signedTransaction() {\n        const ret = wasm.__wbg_get_derivenearkeypairandencryptresult_signedTransaction(this.__wbg_ptr);\n        return ret === 0 ? undefined : WasmSignedTransaction.__wrap(ret);\n    }\n    /**\n     * @param {WasmSignedTransaction | null} [arg0]\n     */\n    set signedTransaction(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, WasmSignedTransaction);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_derivenearkeypairandencryptresult_signedTransaction(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @param {string} near_account_id\n     * @param {string} public_key\n     * @param {string} encrypted_data\n     * @param {string} iv\n     * @param {boolean} stored\n     * @param {WasmSignedTransaction | null} [signed_transaction]\n     */\n    constructor(near_account_id, public_key, encrypted_data, iv, stored, signed_transaction) {\n        const ptr0 = passStringToWasm0(near_account_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(public_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(encrypted_data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        const ptr3 = passStringToWasm0(iv, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(signed_transaction)) {\n            _assertClass(signed_transaction, WasmSignedTransaction);\n            ptr4 = signed_transaction.__destroy_into_raw();\n        }\n        const ret = wasm.derivenearkeypairandencryptresult_new(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, stored, ptr4);\n        this.__wbg_ptr = ret >>> 0;\n        DeriveNearKeypairAndEncryptResultFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst DualPrfOutputsStructFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dualprfoutputsstruct_free(ptr >>> 0, 1));\n\nexport class DualPrfOutputsStruct {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DualPrfOutputsStruct.prototype);\n        obj.__wbg_ptr = ptr;\n        DualPrfOutputsStructFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DualPrfOutputsStructFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dualprfoutputsstruct_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get chacha20PrfOutput() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_dualprfoutputsstruct_chacha20PrfOutput(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set chacha20PrfOutput(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_dualprfoutputsstruct_chacha20PrfOutput(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get ed25519PrfOutput() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_dualprfoutputsstruct_ed25519PrfOutput(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set ed25519PrfOutput(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_dualprfoutputsstruct_ed25519PrfOutput(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst ExtractCoseRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_extractcoserequest_free(ptr >>> 0, 1));\n\nexport class ExtractCoseRequest {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ExtractCoseRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_extractcoserequest_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get attestationObjectBase64url() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_extractcoserequest_attestationObjectBase64url(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set attestationObjectBase64url(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_coseextractionresult_cosePublicKeyBytes(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst KeyActionResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keyactionresult_free(ptr >>> 0, 1));\n\nexport class KeyActionResult {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeyActionResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keyactionresult_free(ptr, 0);\n    }\n    /**\n     * @returns {boolean}\n     */\n    get success() {\n        const ret = wasm.__wbg_get_keyactionresult_success(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * @param {boolean} arg0\n     */\n    set success(arg0) {\n        wasm.__wbg_set_keyactionresult_success(this.__wbg_ptr, arg0);\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get transactionHash() {\n        const ret = wasm.__wbg_get_keyactionresult_transactionHash(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * @param {string | null} [arg0]\n     */\n    set transactionHash(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_keyactionresult_transactionHash(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {WasmSignedTransaction | undefined}\n     */\n    get signedTransaction() {\n        const ret = wasm.__wbg_get_keyactionresult_signedTransaction(this.__wbg_ptr);\n        return ret === 0 ? undefined : WasmSignedTransaction.__wrap(ret);\n    }\n    /**\n     * @param {WasmSignedTransaction | null} [arg0]\n     */\n    set signedTransaction(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, WasmSignedTransaction);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_keyactionresult_signedTransaction(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {string[]}\n     */\n    get logs() {\n        const ret = wasm.__wbg_get_keyactionresult_logs(this.__wbg_ptr);\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n    /**\n     * @param {string[]} arg0\n     */\n    set logs(arg0) {\n        const ptr0 = passArrayJsValueToWasm0(arg0, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_keyactionresult_logs(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get error() {\n        const ret = wasm.__wbg_get_keyactionresult_error(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * @param {string | null} [arg0]\n     */\n    set error(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_keyactionresult_error(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @param {boolean} success\n     * @param {string | null | undefined} transaction_hash\n     * @param {WasmSignedTransaction | null | undefined} signed_transaction\n     * @param {string[]} logs\n     * @param {string | null} [error]\n     */\n    constructor(success, transaction_hash, signed_transaction, logs, error) {\n        var ptr0 = isLikeNone(transaction_hash) ? 0 : passStringToWasm0(transaction_hash, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        let ptr1 = 0;\n        if (!isLikeNone(signed_transaction)) {\n            _assertClass(signed_transaction, WasmSignedTransaction);\n            ptr1 = signed_transaction.__destroy_into_raw();\n        }\n        const ptr2 = passArrayJsValueToWasm0(logs, wasm.__wbindgen_malloc);\n        const len2 = WASM_VECTOR_LEN;\n        var ptr3 = isLikeNone(error) ? 0 : passStringToWasm0(error, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        const ret = wasm.keyactionresult_new(success, ptr0, len0, ptr1, ptr2, len2, ptr3, len3);\n        this.__wbg_ptr = ret >>> 0;\n        KeyActionResultFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst LinkDeviceRegistrationTransactionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_linkdeviceregistrationtransaction_free(ptr >>> 0, 1));\n\nexport class LinkDeviceRegistrationTransaction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(LinkDeviceRegistrationTransaction.prototype);\n        obj.__wbg_ptr = ptr;\n        LinkDeviceRegistrationTransactionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LinkDeviceRegistrationTransactionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_linkdeviceregistrationtransaction_free(ptr, 0);\n    }\n    /**\n     * @returns {VrfChallenge}\n     */\n    get vrfChallenge() {\n        const ret = wasm.__wbg_get_linkdeviceregistrationtransaction_vrfChallenge(this.__wbg_ptr);\n        return VrfChallenge.__wrap(ret);\n    }\n    /**\n     * @param {VrfChallenge} arg0\n     */\n    set vrfChallenge(arg0) {\n        _assertClass(arg0, VrfChallenge);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_linkdeviceregistrationtransaction_vrfChallenge(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {string}\n     */\n    get contractId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_linkdeviceregistrationtransaction_contractId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set contractId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_linkdeviceregistrationtransaction_contractId(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get nonce() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_linkdeviceregistrationtransaction_nonce(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set nonce(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_linkdeviceregistrationtransaction_nonce(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get blockHash() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_linkdeviceregistrationtransaction_blockHash(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set blockHash(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_derivenearkeypairandencryptresult_publicKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get deterministicVrfPublicKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_linkdeviceregistrationtransaction_deterministicVrfPublicKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set deterministicVrfPublicKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_linkdeviceregistrationtransaction_deterministicVrfPublicKey(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst OriginPolicyInputFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_originpolicyinput_free(ptr >>> 0, 1));\n/**\n * Origin policy input for WebAuthn registration (user-provided)\n */\nexport class OriginPolicyInput {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OriginPolicyInput.prototype);\n        obj.__wbg_ptr = ptr;\n        OriginPolicyInputFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OriginPolicyInputFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_originpolicyinput_free(ptr, 0);\n    }\n    /**\n     * Exactly one of these should be set\n     * @returns {boolean | undefined}\n     */\n    get single() {\n        const ret = wasm.__wbg_get_originpolicyinput_single(this.__wbg_ptr);\n        return ret === 0xFFFFFF ? undefined : ret !== 0;\n    }\n    /**\n     * Exactly one of these should be set\n     * @param {boolean | null} [arg0]\n     */\n    set single(arg0) {\n        wasm.__wbg_set_originpolicyinput_single(this.__wbg_ptr, isLikeNone(arg0) ? 0xFFFFFF : arg0 ? 1 : 0);\n    }\n    /**\n     * @returns {boolean | undefined}\n     */\n    get all_subdomains() {\n        const ret = wasm.__wbg_get_originpolicyinput_all_subdomains(this.__wbg_ptr);\n        return ret === 0xFFFFFF ? undefined : ret !== 0;\n    }\n    /**\n     * @param {boolean | null} [arg0]\n     */\n    set all_subdomains(arg0) {\n        wasm.__wbg_set_originpolicyinput_all_subdomains(this.__wbg_ptr, isLikeNone(arg0) ? 0xFFFFFF : arg0 ? 1 : 0);\n    }\n    /**\n     * @returns {string[] | undefined}\n     */\n    get multiple() {\n        const ret = wasm.__wbg_get_originpolicyinput_multiple(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * @param {string[] | null} [arg0]\n     */\n    set multiple(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passArrayJsValueToWasm0(arg0, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_originpolicyinput_multiple(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst PrfOutputsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_prfoutputs_free(ptr >>> 0, 1));\n\nexport class PrfOutputs {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrfOutputs.prototype);\n        obj.__wbg_ptr = ptr;\n        PrfOutputsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PrfOutputsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_prfoutputs_free(ptr, 0);\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get first() {\n        const ret = wasm.__wbg_get_prfoutputs_first(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * @param {string | null} [arg0]\n     */\n    set first(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_prfoutputs_first(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get second() {\n        const ret = wasm.__wbg_get_prfoutputs_second(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * @param {string | null} [arg0]\n     */\n    set second(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_prfoutputs_second(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst PrfResultsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_prfresults_free(ptr >>> 0, 1));\n\nexport class PrfResults {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrfResults.prototype);\n        obj.__wbg_ptr = ptr;\n        PrfResultsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PrfResultsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_prfresults_free(ptr, 0);\n    }\n    /**\n     * @returns {PrfOutputs}\n     */\n    get results() {\n        const ret = wasm.__wbg_get_clientextensionresults_prf(this.__wbg_ptr);\n        return PrfOutputs.__wrap(ret);\n    }\n    /**\n     * @param {PrfOutputs} arg0\n     */\n    set results(arg0) {\n        _assertClass(arg0, PrfOutputs);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_clientextensionresults_prf(this.__wbg_ptr, ptr0);\n    }\n}\n\nconst RecoverKeypairRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_recoverkeypairrequest_free(ptr >>> 0, 1));\n\nexport class RecoverKeypairRequest {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RecoverKeypairRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recoverkeypairrequest_free(ptr, 0);\n    }\n    /**\n     * @returns {SerializedCredential}\n     */\n    get credential() {\n        const ret = wasm.__wbg_get_recoverkeypairrequest_credential(this.__wbg_ptr);\n        return SerializedCredential.__wrap(ret);\n    }\n    /**\n     * @param {SerializedCredential} arg0\n     */\n    set credential(arg0) {\n        _assertClass(arg0, SerializedCredential);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_recoverkeypairrequest_credential(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get accountIdHint() {\n        const ret = wasm.__wbg_get_recoverkeypairrequest_accountIdHint(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * @param {string | null} [arg0]\n     */\n    set accountIdHint(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_keyactionresult_error(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst RecoverKeypairResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_recoverkeypairresult_free(ptr >>> 0, 1));\n\nexport class RecoverKeypairResult {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RecoverKeypairResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recoverkeypairresult_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get publicKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_recoverkeypairresult_publicKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set publicKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryption_chacha20_prf_output(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get encryptedData() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_recoverkeypairresult_encryptedData(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set encryptedData(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryption_encrypted_private_key_data(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get iv() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_recoverkeypairresult_iv(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set iv(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryption_encrypted_private_key_iv(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get accountIdHint() {\n        const ret = wasm.__wbg_get_recoverkeypairresult_accountIdHint(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * @param {string | null} [arg0]\n     */\n    set accountIdHint(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_recoverkeypairresult_accountIdHint(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @param {string} public_key\n     * @param {string} encrypted_data\n     * @param {string} iv\n     * @param {string | null} [account_id_hint]\n     */\n    constructor(public_key, encrypted_data, iv, account_id_hint) {\n        const ptr0 = passStringToWasm0(public_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(encrypted_data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(iv, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        var ptr3 = isLikeNone(account_id_hint) ? 0 : passStringToWasm0(account_id_hint, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        const ret = wasm.recoverkeypairresult_new(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n        this.__wbg_ptr = ret >>> 0;\n        RecoverKeypairResultFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst RegistrationCheckRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_registrationcheckrequest_free(ptr >>> 0, 1));\n\nexport class RegistrationCheckRequest {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RegistrationCheckRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_registrationcheckrequest_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get contract_id() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_registrationcheckrequest_contract_id(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set contract_id(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryptionpayload_encryptedPrivateKeyData(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get near_rpc_url() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_registrationcheckrequest_near_rpc_url(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set near_rpc_url(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryptionpayload_encryptedPrivateKeyIv(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @param {string} contract_id\n     * @param {string} near_rpc_url\n     */\n    constructor(contract_id, near_rpc_url) {\n        const ptr0 = passStringToWasm0(contract_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(near_rpc_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.decryptionpayload_new(ptr0, len0, ptr1, len1);\n        this.__wbg_ptr = ret >>> 0;\n        RegistrationCheckRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst RegistrationCheckResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_registrationcheckresult_free(ptr >>> 0, 1));\n\nexport class RegistrationCheckResult {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RegistrationCheckResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_registrationcheckresult_free(ptr, 0);\n    }\n    /**\n     * @returns {boolean}\n     */\n    get verified() {\n        const ret = wasm.__wbg_get_registrationcheckresult_verified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * @param {boolean} arg0\n     */\n    set verified(arg0) {\n        wasm.__wbg_set_registrationcheckresult_verified(this.__wbg_ptr, arg0);\n    }\n    /**\n     * @returns {RegistrationInfoStruct | undefined}\n     */\n    get registrationInfo() {\n        const ret = wasm.__wbg_get_registrationcheckresult_registrationInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : RegistrationInfoStruct.__wrap(ret);\n    }\n    /**\n     * @param {RegistrationInfoStruct | null} [arg0]\n     */\n    set registrationInfo(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, RegistrationInfoStruct);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_registrationcheckresult_registrationInfo(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {string[]}\n     */\n    get logs() {\n        const ret = wasm.__wbg_get_registrationcheckresult_logs(this.__wbg_ptr);\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n    /**\n     * @param {string[]} arg0\n     */\n    set logs(arg0) {\n        const ptr0 = passArrayJsValueToWasm0(arg0, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_registrationcheckresult_logs(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {WasmSignedTransaction | undefined}\n     */\n    get signedTransaction() {\n        const ret = wasm.__wbg_get_registrationcheckresult_signedTransaction(this.__wbg_ptr);\n        return ret === 0 ? undefined : WasmSignedTransaction.__wrap(ret);\n    }\n    /**\n     * @param {WasmSignedTransaction | null} [arg0]\n     */\n    set signedTransaction(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, WasmSignedTransaction);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_registrationcheckresult_signedTransaction(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get error() {\n        const ret = wasm.__wbg_get_registrationcheckresult_error(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * @param {string | null} [arg0]\n     */\n    set error(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_registrationcheckresult_error(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @param {boolean} verified\n     * @param {RegistrationInfoStruct | null | undefined} registration_info\n     * @param {string[]} logs\n     * @param {WasmSignedTransaction | null} [signed_transaction]\n     * @param {string | null} [error]\n     */\n    constructor(verified, registration_info, logs, signed_transaction, error) {\n        let ptr0 = 0;\n        if (!isLikeNone(registration_info)) {\n            _assertClass(registration_info, RegistrationInfoStruct);\n            ptr0 = registration_info.__destroy_into_raw();\n        }\n        const ptr1 = passArrayJsValueToWasm0(logs, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(signed_transaction)) {\n            _assertClass(signed_transaction, WasmSignedTransaction);\n            ptr2 = signed_transaction.__destroy_into_raw();\n        }\n        var ptr3 = isLikeNone(error) ? 0 : passStringToWasm0(error, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        const ret = wasm.registrationcheckresult_new(verified, ptr0, ptr1, len1, ptr2, ptr3, len3);\n        this.__wbg_ptr = ret >>> 0;\n        RegistrationCheckResultFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst RegistrationInfoStructFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_registrationinfostruct_free(ptr >>> 0, 1));\n\nexport class RegistrationInfoStruct {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RegistrationInfoStruct.prototype);\n        obj.__wbg_ptr = ptr;\n        RegistrationInfoStructFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RegistrationInfoStructFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_registrationinfostruct_free(ptr, 0);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get credentialId() {\n        const ret = wasm.__wbg_get_registrationinfostruct_credentialId(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * @param {Uint8Array} arg0\n     */\n    set credentialId(arg0) {\n        const ptr0 = passArray8ToWasm0(arg0, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_registrationinfostruct_credentialId(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get credentialPublicKey() {\n        const ret = wasm.__wbg_get_registrationinfostruct_credentialPublicKey(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * @param {Uint8Array} arg0\n     */\n    set credentialPublicKey(arg0) {\n        const ptr0 = passArray8ToWasm0(arg0, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_registrationinfostruct_credentialPublicKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get userId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_registrationinfostruct_userId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set userId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryption_encrypted_private_key_iv(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    get vrfPublicKey() {\n        const ret = wasm.__wbg_get_registrationinfostruct_vrfPublicKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * @param {Uint8Array | null} [arg0]\n     */\n    set vrfPublicKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passArray8ToWasm0(arg0, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_registrationinfostruct_vrfPublicKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @param {Uint8Array} credential_id\n     * @param {Uint8Array} credential_public_key\n     * @param {string} user_id\n     * @param {Uint8Array | null} [vrf_public_key]\n     */\n    constructor(credential_id, credential_public_key, user_id, vrf_public_key) {\n        const ptr0 = passArray8ToWasm0(credential_id, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(credential_public_key, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(user_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        var ptr3 = isLikeNone(vrf_public_key) ? 0 : passArray8ToWasm0(vrf_public_key, wasm.__wbindgen_malloc);\n        var len3 = WASM_VECTOR_LEN;\n        const ret = wasm.recoverkeypairresult_new(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n        this.__wbg_ptr = ret >>> 0;\n        RegistrationInfoStructFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst RegistrationPayloadFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_registrationpayload_free(ptr >>> 0, 1));\n\nexport class RegistrationPayload {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RegistrationPayload.prototype);\n        obj.__wbg_ptr = ptr;\n        RegistrationPayloadFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RegistrationPayloadFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_registrationpayload_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get nearAccountId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_registrationpayload_nearAccountId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set nearAccountId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryptionpayload_encryptedPrivateKeyData(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get nonce() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_registrationpayload_nonce(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set nonce(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryptionpayload_encryptedPrivateKeyIv(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get blockHash() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_registrationpayload_blockHash(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set blockHash(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_registrationpayload_blockHash(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get deterministicVrfPublicKey() {\n        const ret = wasm.__wbg_get_registrationpayload_deterministicVrfPublicKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * @param {string | null} [arg0]\n     */\n    set deterministicVrfPublicKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_registrationpayload_deterministicVrfPublicKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    get deviceNumber() {\n        const ret = wasm.__wbg_get_registrationpayload_deviceNumber(this.__wbg_ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n     * @param {number | null} [arg0]\n     */\n    set deviceNumber(arg0) {\n        wasm.__wbg_set_registrationpayload_deviceNumber(this.__wbg_ptr, isLikeNone(arg0) ? 0xFFFFFF : arg0);\n    }\n    /**\n     * @returns {AuthenticatorOptions | undefined}\n     */\n    get authenticatorOptions() {\n        const ret = wasm.__wbg_get_registrationpayload_authenticatorOptions(this.__wbg_ptr);\n        return ret === 0 ? undefined : AuthenticatorOptions.__wrap(ret);\n    }\n    /**\n     * @param {AuthenticatorOptions | null} [arg0]\n     */\n    set authenticatorOptions(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, AuthenticatorOptions);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_registrationpayload_authenticatorOptions(this.__wbg_ptr, ptr0);\n    }\n}\n\nconst RegistrationResponseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_registrationresponse_free(ptr >>> 0, 1));\n\nexport class RegistrationResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RegistrationResponse.prototype);\n        obj.__wbg_ptr = ptr;\n        RegistrationResponseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RegistrationResponseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_registrationresponse_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get clientDataJSON() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_registrationresponse_clientDataJSON(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set clientDataJSON(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_authenticationresponse_clientDataJSON(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get attestationObject() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_registrationresponse_attestationObject(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set attestationObject(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_authenticationresponse_authenticatorData(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string[]}\n     */\n    get transports() {\n        const ret = wasm.__wbg_get_registrationresponse_transports(this.__wbg_ptr);\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n    /**\n     * @param {string[]} arg0\n     */\n    set transports(arg0) {\n        const ptr0 = passArrayJsValueToWasm0(arg0, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_registrationresponse_transports(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst RegistrationResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_registrationresult_free(ptr >>> 0, 1));\n\nexport class RegistrationResult {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RegistrationResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_registrationresult_free(ptr, 0);\n    }\n    /**\n     * @returns {boolean}\n     */\n    get verified() {\n        const ret = wasm.__wbg_get_registrationresult_verified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * @param {boolean} arg0\n     */\n    set verified(arg0) {\n        wasm.__wbg_set_registrationresult_verified(this.__wbg_ptr, arg0);\n    }\n    /**\n     * @returns {RegistrationInfoStruct | undefined}\n     */\n    get registrationInfo() {\n        const ret = wasm.__wbg_get_registrationresult_registrationInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : RegistrationInfoStruct.__wrap(ret);\n    }\n    /**\n     * @param {RegistrationInfoStruct | null} [arg0]\n     */\n    set registrationInfo(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, RegistrationInfoStruct);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_registrationresult_registrationInfo(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {string[]}\n     */\n    get logs() {\n        const ret = wasm.__wbg_get_registrationresult_logs(this.__wbg_ptr);\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n    /**\n     * @param {string[]} arg0\n     */\n    set logs(arg0) {\n        const ptr0 = passArrayJsValueToWasm0(arg0, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_registrationresult_logs(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {WasmSignedTransaction | undefined}\n     */\n    get signedTransaction() {\n        const ret = wasm.__wbg_get_registrationresult_signedTransaction(this.__wbg_ptr);\n        return ret === 0 ? undefined : WasmSignedTransaction.__wrap(ret);\n    }\n    /**\n     * @param {WasmSignedTransaction | null} [arg0]\n     */\n    set signedTransaction(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, WasmSignedTransaction);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_registrationresult_signedTransaction(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {WasmSignedTransaction | undefined}\n     */\n    get preSignedDeleteTransaction() {\n        const ret = wasm.__wbg_get_registrationresult_preSignedDeleteTransaction(this.__wbg_ptr);\n        return ret === 0 ? undefined : WasmSignedTransaction.__wrap(ret);\n    }\n    /**\n     * @param {WasmSignedTransaction | null} [arg0]\n     */\n    set preSignedDeleteTransaction(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, WasmSignedTransaction);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_registrationresult_preSignedDeleteTransaction(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get error() {\n        const ret = wasm.__wbg_get_registrationresult_error(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * @param {string | null} [arg0]\n     */\n    set error(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_registrationresult_error(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @param {boolean} verified\n     * @param {RegistrationInfoStruct | null | undefined} registration_info\n     * @param {string[]} logs\n     * @param {WasmSignedTransaction | null} [signed_transaction]\n     * @param {WasmSignedTransaction | null} [pre_signed_delete_transaction]\n     * @param {string | null} [error]\n     */\n    constructor(verified, registration_info, logs, signed_transaction, pre_signed_delete_transaction, error) {\n        let ptr0 = 0;\n        if (!isLikeNone(registration_info)) {\n            _assertClass(registration_info, RegistrationInfoStruct);\n            ptr0 = registration_info.__destroy_into_raw();\n        }\n        const ptr1 = passArrayJsValueToWasm0(logs, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(signed_transaction)) {\n            _assertClass(signed_transaction, WasmSignedTransaction);\n            ptr2 = signed_transaction.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(pre_signed_delete_transaction)) {\n            _assertClass(pre_signed_delete_transaction, WasmSignedTransaction);\n            ptr3 = pre_signed_delete_transaction.__destroy_into_raw();\n        }\n        var ptr4 = isLikeNone(error) ? 0 : passStringToWasm0(error, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len4 = WASM_VECTOR_LEN;\n        const ret = wasm.registrationresult_new(verified, ptr0, ptr1, len1, ptr2, ptr3, ptr4, len4);\n        this.__wbg_ptr = ret >>> 0;\n        RegistrationResultFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst RpcCallPayloadFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rpccallpayload_free(ptr >>> 0, 1));\n/**\n * RPC call parameters for NEAR operations and VRF generation\n * Used to pass essential parameters for background operations\n */\nexport class RpcCallPayload {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RpcCallPayload.prototype);\n        obj.__wbg_ptr = ptr;\n        RpcCallPayloadFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RpcCallPayloadFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rpccallpayload_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get contractId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_rpccallpayload_contractId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set contractId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryptionpayload_encryptedPrivateKeyData(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get nearRpcUrl() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_rpccallpayload_nearRpcUrl(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set nearRpcUrl(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryptionpayload_encryptedPrivateKeyIv(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get nearAccountId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_rpccallpayload_nearAccountId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set nearAccountId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_registrationpayload_blockHash(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst SerializedCredentialFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_serializedcredential_free(ptr >>> 0, 1));\n\nexport class SerializedCredential {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SerializedCredential.prototype);\n        obj.__wbg_ptr = ptr;\n        SerializedCredentialFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SerializedCredentialFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_serializedcredential_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get id() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_serializedcredential_id(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set id(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_authenticationresponse_clientDataJSON(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get rawId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_serializedcredential_rawId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set rawId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_authenticationresponse_authenticatorData(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get type() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_serializedcredential_type(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set type(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_authenticationresponse_signature(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get authenticatorAttachment() {\n        const ret = wasm.__wbg_get_serializedcredential_authenticatorAttachment(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * @param {string | null} [arg0]\n     */\n    set authenticatorAttachment(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_serializedcredential_authenticatorAttachment(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {AuthenticationResponse}\n     */\n    get response() {\n        const ret = wasm.__wbg_get_serializedcredential_response(this.__wbg_ptr);\n        return AuthenticationResponse.__wrap(ret);\n    }\n    /**\n     * @param {AuthenticationResponse} arg0\n     */\n    set response(arg0) {\n        _assertClass(arg0, AuthenticationResponse);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_serializedcredential_response(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {ClientExtensionResults}\n     */\n    get clientExtensionResults() {\n        const ret = wasm.__wbg_get_serializedcredential_clientExtensionResults(this.__wbg_ptr);\n        return ClientExtensionResults.__wrap(ret);\n    }\n    /**\n     * @param {ClientExtensionResults} arg0\n     */\n    set clientExtensionResults(arg0) {\n        _assertClass(arg0, ClientExtensionResults);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_serializedcredential_clientExtensionResults(this.__wbg_ptr, ptr0);\n    }\n}\n\nconst SerializedRegistrationCredentialFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_serializedregistrationcredential_free(ptr >>> 0, 1));\n\nexport class SerializedRegistrationCredential {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SerializedRegistrationCredential.prototype);\n        obj.__wbg_ptr = ptr;\n        SerializedRegistrationCredentialFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SerializedRegistrationCredentialFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_serializedregistrationcredential_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get id() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_serializedregistrationcredential_id(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set id(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_authenticationresponse_clientDataJSON(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get rawId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_serializedregistrationcredential_rawId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set rawId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_authenticationresponse_authenticatorData(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get type() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_serializedregistrationcredential_type(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set type(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_authenticationresponse_signature(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get authenticatorAttachment() {\n        const ret = wasm.__wbg_get_serializedregistrationcredential_authenticatorAttachment(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * @param {string | null} [arg0]\n     */\n    set authenticatorAttachment(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_serializedregistrationcredential_authenticatorAttachment(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {RegistrationResponse}\n     */\n    get response() {\n        const ret = wasm.__wbg_get_serializedregistrationcredential_response(this.__wbg_ptr);\n        return RegistrationResponse.__wrap(ret);\n    }\n    /**\n     * @param {RegistrationResponse} arg0\n     */\n    set response(arg0) {\n        _assertClass(arg0, RegistrationResponse);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_serializedregistrationcredential_response(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {ClientExtensionResults}\n     */\n    get clientExtensionResults() {\n        const ret = wasm.__wbg_get_serializedregistrationcredential_clientExtensionResults(this.__wbg_ptr);\n        return ClientExtensionResults.__wrap(ret);\n    }\n    /**\n     * @param {ClientExtensionResults} arg0\n     */\n    set clientExtensionResults(arg0) {\n        _assertClass(arg0, ClientExtensionResults);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_serializedregistrationcredential_clientExtensionResults(this.__wbg_ptr, ptr0);\n    }\n}\n\nconst SignNep413RequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signnep413request_free(ptr >>> 0, 1));\n\nexport class SignNep413Request {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignNep413RequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signnep413request_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get message() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_signnep413request_message(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set message(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_coseextractionresult_cosePublicKeyBytes(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get recipient() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_signnep413request_recipient(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set recipient(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_signnep413request_recipient(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get nonce() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_signnep413request_nonce(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set nonce(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_signnep413request_nonce(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get state() {\n        const ret = wasm.__wbg_get_signnep413request_state(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * @param {string | null} [arg0]\n     */\n    set state(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_signnep413request_state(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get accountId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_signnep413request_accountId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set accountId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_signnep413request_accountId(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get encryptedPrivateKeyData() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_signnep413request_encryptedPrivateKeyData(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set encryptedPrivateKeyData(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_signnep413request_encryptedPrivateKeyData(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get encryptedPrivateKeyIv() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_signnep413request_encryptedPrivateKeyIv(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set encryptedPrivateKeyIv(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_signnep413request_encryptedPrivateKeyIv(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get prfOutput() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_signnep413request_prfOutput(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set prfOutput(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_signnep413request_prfOutput(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst SignNep413ResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signnep413result_free(ptr >>> 0, 1));\n\nexport class SignNep413Result {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignNep413ResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signnep413result_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get accountId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_signnep413result_accountId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set accountId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_coseextractionresult_cosePublicKeyBytes(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get publicKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_signnep413result_publicKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set publicKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_signnep413request_recipient(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get signature() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_signnep413result_signature(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set signature(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_signnep413request_nonce(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get state() {\n        const ret = wasm.__wbg_get_signnep413result_state(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * @param {string | null} [arg0]\n     */\n    set state(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_signnep413result_state(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @param {string} account_id\n     * @param {string} public_key\n     * @param {string} signature\n     * @param {string | null} [state]\n     */\n    constructor(account_id, public_key, signature, state) {\n        const ptr0 = passStringToWasm0(account_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(public_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        var ptr3 = isLikeNone(state) ? 0 : passStringToWasm0(state, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        const ret = wasm.signnep413result_new(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n        this.__wbg_ptr = ret >>> 0;\n        SignNep413ResultFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst SignTransactionWithKeyPairRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signtransactionwithkeypairrequest_free(ptr >>> 0, 1));\n\nexport class SignTransactionWithKeyPairRequest {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignTransactionWithKeyPairRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signtransactionwithkeypairrequest_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get nearPrivateKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_signtransactionwithkeypairrequest_nearPrivateKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set nearPrivateKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_dualprfoutputsstruct_chacha20PrfOutput(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get signerAccountId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_signtransactionwithkeypairrequest_signerAccountId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set signerAccountId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_dualprfoutputsstruct_ed25519PrfOutput(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get receiverId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_signtransactionwithkeypairrequest_receiverId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set receiverId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_derivenearkeypairandencryptrequest_nearAccountId(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get nonce() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_signtransactionwithkeypairrequest_nonce(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set nonce(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_signtransactionwithkeypairrequest_nonce(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get blockHash() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_signtransactionwithkeypairrequest_blockHash(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set blockHash(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_signtransactionwithkeypairrequest_blockHash(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get actions() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_signtransactionwithkeypairrequest_actions(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set actions(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_signtransactionwithkeypairrequest_actions(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst SignTransactionsWithActionsRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signtransactionswithactionsrequest_free(ptr >>> 0, 1));\n\nexport class SignTransactionsWithActionsRequest {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignTransactionsWithActionsRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signtransactionswithactionsrequest_free(ptr, 0);\n    }\n    /**\n     * @returns {RpcCallPayload}\n     */\n    get rpcCall() {\n        const ret = wasm.__wbg_get_signtransactionswithactionsrequest_rpcCall(this.__wbg_ptr);\n        return RpcCallPayload.__wrap(ret);\n    }\n    /**\n     * @param {RpcCallPayload} arg0\n     */\n    set rpcCall(arg0) {\n        _assertClass(arg0, RpcCallPayload);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_signtransactionswithactionsrequest_rpcCall(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {DecryptionPayload}\n     */\n    get decryption() {\n        const ret = wasm.__wbg_get_signtransactionswithactionsrequest_decryption(this.__wbg_ptr);\n        return DecryptionPayload.__wrap(ret);\n    }\n    /**\n     * @param {DecryptionPayload} arg0\n     */\n    set decryption(arg0) {\n        _assertClass(arg0, DecryptionPayload);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_signtransactionswithactionsrequest_decryption(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {TransactionPayload[]}\n     */\n    get txSigningRequests() {\n        const ret = wasm.__wbg_get_signtransactionswithactionsrequest_txSigningRequests(this.__wbg_ptr);\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n    /**\n     * @param {TransactionPayload[]} arg0\n     */\n    set txSigningRequests(arg0) {\n        const ptr0 = passArrayJsValueToWasm0(arg0, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_signtransactionswithactionsrequest_txSigningRequests(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * Unified confirmation configuration for controlling the confirmation flow\n     * @returns {ConfirmationConfig | undefined}\n     */\n    get confirmationConfig() {\n        const ret = wasm.__wbg_get_signtransactionswithactionsrequest_confirmationConfig(this.__wbg_ptr);\n        return ret === 0 ? undefined : ConfirmationConfig.__wrap(ret);\n    }\n    /**\n     * Unified confirmation configuration for controlling the confirmation flow\n     * @param {ConfirmationConfig | null} [arg0]\n     */\n    set confirmationConfig(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, ConfirmationConfig);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_signtransactionswithactionsrequest_confirmationConfig(this.__wbg_ptr, ptr0);\n    }\n}\n\nconst SignVerifyAndRegisterUserRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signverifyandregisteruserrequest_free(ptr >>> 0, 1));\n\nexport class SignVerifyAndRegisterUserRequest {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignVerifyAndRegisterUserRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signverifyandregisteruserrequest_free(ptr, 0);\n    }\n    /**\n     * @returns {VerificationPayload}\n     */\n    get verification() {\n        const ret = wasm.__wbg_get_signverifyandregisteruserrequest_verification(this.__wbg_ptr);\n        return VerificationPayload.__wrap(ret);\n    }\n    /**\n     * @param {VerificationPayload} arg0\n     */\n    set verification(arg0) {\n        _assertClass(arg0, VerificationPayload);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_signverifyandregisteruserrequest_verification(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {DecryptionPayload}\n     */\n    get decryption() {\n        const ret = wasm.__wbg_get_signverifyandregisteruserrequest_decryption(this.__wbg_ptr);\n        return DecryptionPayload.__wrap(ret);\n    }\n    /**\n     * @param {DecryptionPayload} arg0\n     */\n    set decryption(arg0) {\n        _assertClass(arg0, DecryptionPayload);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_signverifyandregisteruserrequest_decryption(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {RegistrationPayload}\n     */\n    get registration() {\n        const ret = wasm.__wbg_get_signverifyandregisteruserrequest_registration(this.__wbg_ptr);\n        return RegistrationPayload.__wrap(ret);\n    }\n    /**\n     * @param {RegistrationPayload} arg0\n     */\n    set registration(arg0) {\n        _assertClass(arg0, RegistrationPayload);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_signverifyandregisteruserrequest_registration(this.__wbg_ptr, ptr0);\n    }\n}\n\nconst TransactionContextFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_transactioncontext_free(ptr >>> 0, 1));\n/**\n * Transaction context containing NEAR blockchain data\n * Computed in the main thread confirmation flow\n */\nexport class TransactionContext {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TransactionContextFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactioncontext_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get nearPublicKeyStr() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_transactioncontext_nearPublicKeyStr(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set nearPublicKeyStr(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryptionpayload_encryptedPrivateKeyData(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get nextNonce() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_transactioncontext_nextNonce(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set nextNonce(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryptionpayload_encryptedPrivateKeyIv(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get txBlockHeight() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_transactioncontext_txBlockHeight(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set txBlockHeight(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_registrationpayload_blockHash(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get txBlockHash() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_transactioncontext_txBlockHash(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set txBlockHash(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_transactioncontext_txBlockHash(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst TransactionPayloadFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_transactionpayload_free(ptr >>> 0, 1));\n\nexport class TransactionPayload {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(TransactionPayload.prototype);\n        obj.__wbg_ptr = ptr;\n        TransactionPayloadFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof TransactionPayload)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TransactionPayloadFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionpayload_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get nearAccountId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_transactionpayload_nearAccountId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set nearAccountId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryption_chacha20_prf_output(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get receiverId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_transactionpayload_receiverId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set receiverId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryption_encrypted_private_key_data(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get actions() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_transactionpayload_actions(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set actions(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryption_encrypted_private_key_iv(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst TransactionSignResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_transactionsignresult_free(ptr >>> 0, 1));\n\nexport class TransactionSignResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(TransactionSignResult.prototype);\n        obj.__wbg_ptr = ptr;\n        TransactionSignResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TransactionSignResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionsignresult_free(ptr, 0);\n    }\n    /**\n     * @returns {boolean}\n     */\n    get success() {\n        const ret = wasm.__wbg_get_transactionsignresult_success(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * @param {boolean} arg0\n     */\n    set success(arg0) {\n        wasm.__wbg_set_transactionsignresult_success(this.__wbg_ptr, arg0);\n    }\n    /**\n     * @returns {string[] | undefined}\n     */\n    get transactionHashes() {\n        const ret = wasm.__wbg_get_transactionsignresult_transactionHashes(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * @param {string[] | null} [arg0]\n     */\n    set transactionHashes(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passArrayJsValueToWasm0(arg0, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_transactionsignresult_transactionHashes(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {WasmSignedTransaction[] | undefined}\n     */\n    get signedTransactions() {\n        const ret = wasm.__wbg_get_transactionsignresult_signedTransactions(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * @param {WasmSignedTransaction[] | null} [arg0]\n     */\n    set signedTransactions(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passArrayJsValueToWasm0(arg0, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_transactionsignresult_signedTransactions(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string[]}\n     */\n    get logs() {\n        const ret = wasm.__wbg_get_transactionsignresult_logs(this.__wbg_ptr);\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n    /**\n     * @param {string[]} arg0\n     */\n    set logs(arg0) {\n        const ptr0 = passArrayJsValueToWasm0(arg0, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_transactionsignresult_logs(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get error() {\n        const ret = wasm.__wbg_get_transactionsignresult_error(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * @param {string | null} [arg0]\n     */\n    set error(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_recoverkeypairresult_accountIdHint(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @param {boolean} success\n     * @param {string[] | null | undefined} transaction_hashes\n     * @param {WasmSignedTransaction[] | null | undefined} signed_transactions\n     * @param {string[]} logs\n     * @param {string | null} [error]\n     */\n    constructor(success, transaction_hashes, signed_transactions, logs, error) {\n        var ptr0 = isLikeNone(transaction_hashes) ? 0 : passArrayJsValueToWasm0(transaction_hashes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(signed_transactions) ? 0 : passArrayJsValueToWasm0(signed_transactions, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ptr2 = passArrayJsValueToWasm0(logs, wasm.__wbindgen_malloc);\n        const len2 = WASM_VECTOR_LEN;\n        var ptr3 = isLikeNone(error) ? 0 : passStringToWasm0(error, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        const ret = wasm.transactionsignresult_new(success, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n        this.__wbg_ptr = ret >>> 0;\n        TransactionSignResultFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Helper function to create a failed TransactionSignResult\n     * @param {string[]} logs\n     * @param {string} error_msg\n     * @returns {TransactionSignResult}\n     */\n    static failed(logs, error_msg) {\n        const ptr0 = passArrayJsValueToWasm0(logs, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(error_msg, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.transactionsignresult_failed(ptr0, len0, ptr1, len1);\n        return TransactionSignResult.__wrap(ret);\n    }\n}\n\nconst VerificationPayloadFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_verificationpayload_free(ptr >>> 0, 1));\n/**\n * Consolidated verification type for all flows.\n * Credentials are collected during the confirmation flow via the main thread.\n * DEPRECATED: Use RpcCallPayload instead\n */\nexport class VerificationPayload {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerificationPayload.prototype);\n        obj.__wbg_ptr = ptr;\n        VerificationPayloadFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VerificationPayloadFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verificationpayload_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get contractId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_verificationpayload_contractId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set contractId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryptionpayload_encryptedPrivateKeyData(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get nearRpcUrl() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_verificationpayload_nearRpcUrl(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set nearRpcUrl(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_decryptionpayload_encryptedPrivateKeyIv(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {VrfChallenge | undefined}\n     */\n    get vrfChallenge() {\n        const ret = wasm.__wbg_get_verificationpayload_vrfChallenge(this.__wbg_ptr);\n        return ret === 0 ? undefined : VrfChallenge.__wrap(ret);\n    }\n    /**\n     * @param {VrfChallenge | null} [arg0]\n     */\n    set vrfChallenge(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, VrfChallenge);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_verificationpayload_vrfChallenge(this.__wbg_ptr, ptr0);\n    }\n}\n\nconst VrfChallengeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_vrfchallenge_free(ptr >>> 0, 1));\n\nexport class VrfChallenge {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VrfChallenge.prototype);\n        obj.__wbg_ptr = ptr;\n        VrfChallengeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VrfChallengeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vrfchallenge_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get vrfInput() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_vrfchallenge_vrfInput(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set vrfInput(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_authenticationresponse_clientDataJSON(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get vrfOutput() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_vrfchallenge_vrfOutput(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set vrfOutput(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_authenticationresponse_authenticatorData(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get vrfProof() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_vrfchallenge_vrfProof(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set vrfProof(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_authenticationresponse_signature(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get vrfPublicKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_vrfchallenge_vrfPublicKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set vrfPublicKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_vrfchallenge_vrfPublicKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get userId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_vrfchallenge_userId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set userId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_vrfchallenge_userId(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get rpId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_vrfchallenge_rpId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set rpId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_vrfchallenge_rpId(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get blockHeight() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_vrfchallenge_blockHeight(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set blockHeight(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_vrfchallenge_blockHeight(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get blockHash() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_vrfchallenge_blockHash(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set blockHash(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_vrfchallenge_blockHash(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst WasmPublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_wasmpublickey_free(ptr >>> 0, 1));\n\nexport class WasmPublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WasmPublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        WasmPublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WasmPublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_wasmpublickey_free(ptr, 0);\n    }\n    /**\n     * @returns {number}\n     */\n    get keyType() {\n        const ret = wasm.__wbg_get_wasmpublickey_keyType(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @param {number} arg0\n     */\n    set keyType(arg0) {\n        wasm.__wbg_set_wasmpublickey_keyType(this.__wbg_ptr, arg0);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get keyData() {\n        const ret = wasm.__wbg_get_wasmpublickey_keyData(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * @param {Uint8Array} arg0\n     */\n    set keyData(arg0) {\n        const ptr0 = passArray8ToWasm0(arg0, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_wasmpublickey_keyData(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @param {number} keyType\n     * @param {Uint8Array} keyData\n     */\n    constructor(keyType, keyData) {\n        const ptr0 = passArray8ToWasm0(keyData, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.wasmpublickey_new(keyType, ptr0, len0);\n        this.__wbg_ptr = ret >>> 0;\n        WasmPublicKeyFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst WasmSignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_wasmsignature_free(ptr >>> 0, 1));\n\nexport class WasmSignature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WasmSignature.prototype);\n        obj.__wbg_ptr = ptr;\n        WasmSignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WasmSignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_wasmsignature_free(ptr, 0);\n    }\n    /**\n     * @returns {number}\n     */\n    get keyType() {\n        const ret = wasm.__wbg_get_wasmpublickey_keyType(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @param {number} arg0\n     */\n    set keyType(arg0) {\n        wasm.__wbg_set_wasmpublickey_keyType(this.__wbg_ptr, arg0);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get signatureData() {\n        const ret = wasm.__wbg_get_wasmsignature_signatureData(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * @param {Uint8Array} arg0\n     */\n    set signatureData(arg0) {\n        const ptr0 = passArray8ToWasm0(arg0, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_wasmpublickey_keyData(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @param {number} keyType\n     * @param {Uint8Array} signatureData\n     */\n    constructor(keyType, signatureData) {\n        const ptr0 = passArray8ToWasm0(signatureData, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.wasmpublickey_new(keyType, ptr0, len0);\n        this.__wbg_ptr = ret >>> 0;\n        WasmSignatureFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst WasmSignedTransactionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_wasmsignedtransaction_free(ptr >>> 0, 1));\n\nexport class WasmSignedTransaction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WasmSignedTransaction.prototype);\n        obj.__wbg_ptr = ptr;\n        WasmSignedTransactionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof WasmSignedTransaction)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WasmSignedTransactionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_wasmsignedtransaction_free(ptr, 0);\n    }\n    /**\n     * @returns {WasmTransaction}\n     */\n    get transaction() {\n        const ret = wasm.__wbg_get_wasmsignedtransaction_transaction(this.__wbg_ptr);\n        return WasmTransaction.__wrap(ret);\n    }\n    /**\n     * @param {WasmTransaction} arg0\n     */\n    set transaction(arg0) {\n        _assertClass(arg0, WasmTransaction);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_wasmsignedtransaction_transaction(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {WasmSignature}\n     */\n    get signature() {\n        const ret = wasm.__wbg_get_wasmsignedtransaction_signature(this.__wbg_ptr);\n        return WasmSignature.__wrap(ret);\n    }\n    /**\n     * @param {WasmSignature} arg0\n     */\n    set signature(arg0) {\n        _assertClass(arg0, WasmSignature);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_wasmsignedtransaction_signature(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get borshBytes() {\n        const ret = wasm.__wbg_get_wasmsignedtransaction_borshBytes(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * @param {Uint8Array} arg0\n     */\n    set borshBytes(arg0) {\n        const ptr0 = passArray8ToWasm0(arg0, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_wasmsignedtransaction_borshBytes(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @param {WasmTransaction} transaction\n     * @param {WasmSignature} signature\n     * @param {Uint8Array} borshBytes\n     */\n    constructor(transaction, signature, borshBytes) {\n        _assertClass(transaction, WasmTransaction);\n        var ptr0 = transaction.__destroy_into_raw();\n        _assertClass(signature, WasmSignature);\n        var ptr1 = signature.__destroy_into_raw();\n        const ptr2 = passArray8ToWasm0(borshBytes, wasm.__wbindgen_malloc);\n        const len2 = WASM_VECTOR_LEN;\n        const ret = wasm.wasmsignedtransaction_new(ptr0, ptr1, ptr2, len2);\n        this.__wbg_ptr = ret >>> 0;\n        WasmSignedTransactionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst WasmTransactionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_wasmtransaction_free(ptr >>> 0, 1));\n\nexport class WasmTransaction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WasmTransaction.prototype);\n        obj.__wbg_ptr = ptr;\n        WasmTransactionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WasmTransactionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_wasmtransaction_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get signerId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_wasmtransaction_signerId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set signerId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_wasmtransaction_signerId(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {WasmPublicKey}\n     */\n    get publicKey() {\n        const ret = wasm.__wbg_get_wasmtransaction_publicKey(this.__wbg_ptr);\n        return WasmPublicKey.__wrap(ret);\n    }\n    /**\n     * @param {WasmPublicKey} arg0\n     */\n    set publicKey(arg0) {\n        _assertClass(arg0, WasmPublicKey);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_wasmtransaction_publicKey(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * @returns {bigint}\n     */\n    get nonce() {\n        const ret = wasm.__wbg_get_wasmtransaction_nonce(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * @param {bigint} arg0\n     */\n    set nonce(arg0) {\n        wasm.__wbg_set_wasmtransaction_nonce(this.__wbg_ptr, arg0);\n    }\n    /**\n     * @returns {string}\n     */\n    get receiverId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_wasmtransaction_receiverId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set receiverId(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_wasmtransaction_receiverId(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get blockHash() {\n        const ret = wasm.__wbg_get_wasmtransaction_blockHash(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * @param {Uint8Array} arg0\n     */\n    set blockHash(arg0) {\n        const ptr0 = passArray8ToWasm0(arg0, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_wasmtransaction_blockHash(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get actionsJson() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_wasmtransaction_actionsJson(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set actionsJson(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_wasmtransaction_actionsJson(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @param {string} signerId\n     * @param {WasmPublicKey} publicKey\n     * @param {bigint} nonce\n     * @param {string} receiverId\n     * @param {Uint8Array} blockHash\n     * @param {string} actionsJson\n     */\n    constructor(signerId, publicKey, nonce, receiverId, blockHash, actionsJson) {\n        const ptr0 = passStringToWasm0(signerId, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(publicKey, WasmPublicKey);\n        var ptr1 = publicKey.__destroy_into_raw();\n        const ptr2 = passStringToWasm0(receiverId, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        const ptr3 = passArray8ToWasm0(blockHash, wasm.__wbindgen_malloc);\n        const len3 = WASM_VECTOR_LEN;\n        const ptr4 = passStringToWasm0(actionsJson, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len4 = WASM_VECTOR_LEN;\n        const ret = wasm.wasmtransaction_new(ptr0, len0, ptr1, nonce, ptr2, len2, ptr3, len3, ptr4, len4);\n        this.__wbg_ptr = ret >>> 0;\n        WasmTransactionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst WebAuthnAuthenticationCredentialStructFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_webauthnauthenticationcredentialstruct_free(ptr >>> 0, 1));\n\nexport class WebAuthnAuthenticationCredentialStruct {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WebAuthnAuthenticationCredentialStructFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_webauthnauthenticationcredentialstruct_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get id() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_webauthnauthenticationcredentialstruct_id(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set id(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_authenticationresponse_clientDataJSON(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get raw_id() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_webauthnauthenticationcredentialstruct_raw_id(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set raw_id(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_authenticationresponse_authenticatorData(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get credential_type() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_webauthnauthenticationcredentialstruct_credential_type(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set credential_type(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_authenticationresponse_signature(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get authenticator_attachment() {\n        const ret = wasm.__wbg_get_webauthnauthenticationcredentialstruct_authenticator_attachment(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * @param {string | null} [arg0]\n     */\n    set authenticator_attachment(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_serializedregistrationcredential_authenticatorAttachment(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get client_data_json() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_webauthnauthenticationcredentialstruct_client_data_json(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set client_data_json(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_vrfchallenge_vrfPublicKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get authenticator_data() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_webauthnauthenticationcredentialstruct_authenticator_data(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set authenticator_data(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_vrfchallenge_userId(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get signature() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_webauthnauthenticationcredentialstruct_signature(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set signature(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_vrfchallenge_rpId(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get user_handle() {\n        const ret = wasm.__wbg_get_webauthnauthenticationcredentialstruct_user_handle(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * @param {string | null} [arg0]\n     */\n    set user_handle(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_serializedcredential_authenticatorAttachment(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @param {string} id\n     * @param {string} raw_id\n     * @param {string} credential_type\n     * @param {string | null | undefined} authenticator_attachment\n     * @param {string} client_data_json\n     * @param {string} authenticator_data\n     * @param {string} signature\n     * @param {string | null} [user_handle]\n     */\n    constructor(id, raw_id, credential_type, authenticator_attachment, client_data_json, authenticator_data, signature, user_handle) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(raw_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(credential_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        var ptr3 = isLikeNone(authenticator_attachment) ? 0 : passStringToWasm0(authenticator_attachment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        const ptr4 = passStringToWasm0(client_data_json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len4 = WASM_VECTOR_LEN;\n        const ptr5 = passStringToWasm0(authenticator_data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len5 = WASM_VECTOR_LEN;\n        const ptr6 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len6 = WASM_VECTOR_LEN;\n        var ptr7 = isLikeNone(user_handle) ? 0 : passStringToWasm0(user_handle, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len7 = WASM_VECTOR_LEN;\n        const ret = wasm.webauthnauthenticationcredentialstruct_new(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, ptr4, len4, ptr5, len5, ptr6, len6, ptr7, len7);\n        this.__wbg_ptr = ret >>> 0;\n        WebAuthnAuthenticationCredentialStructFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst WebAuthnRegistrationCredentialStructFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_webauthnregistrationcredentialstruct_free(ptr >>> 0, 1));\n\nexport class WebAuthnRegistrationCredentialStruct {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WebAuthnRegistrationCredentialStructFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_webauthnregistrationcredentialstruct_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get id() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_webauthnregistrationcredentialstruct_id(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set id(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_authenticationresponse_clientDataJSON(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get raw_id() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_webauthnregistrationcredentialstruct_raw_id(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set raw_id(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_authenticationresponse_authenticatorData(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get credential_type() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_webauthnregistrationcredentialstruct_credential_type(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set credential_type(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_authenticationresponse_signature(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get authenticator_attachment() {\n        const ret = wasm.__wbg_get_webauthnregistrationcredentialstruct_authenticator_attachment(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * @param {string | null} [arg0]\n     */\n    set authenticator_attachment(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_webauthnregistrationcredentialstruct_authenticator_attachment(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get client_data_json() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_webauthnregistrationcredentialstruct_client_data_json(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set client_data_json(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_vrfchallenge_vrfPublicKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get attestation_object() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_webauthnregistrationcredentialstruct_attestation_object(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set attestation_object(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_vrfchallenge_userId(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string[] | undefined}\n     */\n    get transports() {\n        const ret = wasm.__wbg_get_webauthnregistrationcredentialstruct_transports(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * @param {string[] | null} [arg0]\n     */\n    set transports(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passArrayJsValueToWasm0(arg0, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_webauthnregistrationcredentialstruct_transports(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get ed25519_prf_output() {\n        const ret = wasm.__wbg_get_webauthnregistrationcredentialstruct_ed25519_prf_output(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * @param {string | null} [arg0]\n     */\n    set ed25519_prf_output(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_serializedcredential_authenticatorAttachment(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @param {string} id\n     * @param {string} raw_id\n     * @param {string} credential_type\n     * @param {string | null | undefined} authenticator_attachment\n     * @param {string} client_data_json\n     * @param {string} attestation_object\n     * @param {string[] | null} [transports]\n     * @param {string | null} [ed25519_prf_output]\n     */\n    constructor(id, raw_id, credential_type, authenticator_attachment, client_data_json, attestation_object, transports, ed25519_prf_output) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(raw_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(credential_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        var ptr3 = isLikeNone(authenticator_attachment) ? 0 : passStringToWasm0(authenticator_attachment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        const ptr4 = passStringToWasm0(client_data_json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len4 = WASM_VECTOR_LEN;\n        const ptr5 = passStringToWasm0(attestation_object, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len5 = WASM_VECTOR_LEN;\n        var ptr6 = isLikeNone(transports) ? 0 : passArrayJsValueToWasm0(transports, wasm.__wbindgen_malloc);\n        var len6 = WASM_VECTOR_LEN;\n        var ptr7 = isLikeNone(ed25519_prf_output) ? 0 : passStringToWasm0(ed25519_prf_output, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len7 = WASM_VECTOR_LEN;\n        const ret = wasm.webauthnregistrationcredentialstruct_new(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, ptr4, len4, ptr5, len5, ptr6, len6, ptr7, len7);\n        this.__wbg_ptr = ret >>> 0;\n        WebAuthnRegistrationCredentialStructFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst WorkerProgressMessageFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_workerprogressmessage_free(ptr >>> 0, 1));\n/**\n * Base progress message structure sent from WASM to TypeScript\n * Auto-generates TypeScript interface: WorkerProgressMessage\n */\nexport class WorkerProgressMessage {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WorkerProgressMessageFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_workerprogressmessage_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get message_type() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_workerprogressmessage_message_type(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set message_type(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_workerprogressmessage_message_type(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get step() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_workerprogressmessage_step(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set step(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_workerprogressmessage_step(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get message() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_workerprogressmessage_message(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set message(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_workerprogressmessage_message(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {string}\n     */\n    get status() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_workerprogressmessage_status(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {string} arg0\n     */\n    set status(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_workerprogressmessage_status(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @returns {number}\n     */\n    get timestamp() {\n        const ret = wasm.__wbg_get_workerprogressmessage_timestamp(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @param {number} arg0\n     */\n    set timestamp(arg0) {\n        wasm.__wbg_set_workerprogressmessage_timestamp(this.__wbg_ptr, arg0);\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get data() {\n        const ret = wasm.__wbg_get_workerprogressmessage_data(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * @param {string | null} [arg0]\n     */\n    set data(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_workerprogressmessage_data(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * @param {string} message_type\n     * @param {string} step\n     * @param {string} message\n     * @param {string} status\n     * @param {number} timestamp\n     * @param {string | null} [data]\n     */\n    constructor(message_type, step, message, status, timestamp, data) {\n        const ptr0 = passStringToWasm0(message_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(step, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        const ptr3 = passStringToWasm0(status, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len3 = WASM_VECTOR_LEN;\n        var ptr4 = isLikeNone(data) ? 0 : passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len4 = WASM_VECTOR_LEN;\n        const ret = wasm.workerprogressmessage_new(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, timestamp, ptr4, len4);\n        this.__wbg_ptr = ret >>> 0;\n        WorkerProgressMessageFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_String_8f0eb39a4a4c2f66 = function(arg0, arg1) {\n        const ret = String(arg1);\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n        getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n    };\n    imports.wbg.__wbg_awaitSecureConfirmation_d61224543ac80ce1 = function(arg0, arg1, arg2, arg3, arg4, arg5) {\n        const ret = awaitSecureConfirmation(getStringFromWasm0(arg0, arg1), arg2, arg3, getStringFromWasm0(arg4, arg5));\n        return ret;\n    };\n    imports.wbg.__wbg_buffer_609cc3eee51ed158 = function(arg0) {\n        const ret = arg0.buffer;\n        return ret;\n    };\n    imports.wbg.__wbg_call_672a4d21634d4a24 = function() { return handleError(function (arg0, arg1) {\n        const ret = arg0.call(arg1);\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_call_7cccdd69e0791ae2 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = arg0.call(arg1, arg2);\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_crypto_574e78ad8b13b65f = function(arg0) {\n        const ret = arg0.crypto;\n        return ret;\n    };\n    imports.wbg.__wbg_debug_e17b51583ca6a632 = function(arg0, arg1, arg2, arg3) {\n        console.debug(arg0, arg1, arg2, arg3);\n    };\n    imports.wbg.__wbg_done_769e5ede4b31c67b = function(arg0) {\n        const ret = arg0.done;\n        return ret;\n    };\n    imports.wbg.__wbg_entries_3265d4158b33e5dc = function(arg0) {\n        const ret = Object.entries(arg0);\n        return ret;\n    };\n    imports.wbg.__wbg_error_524f506f44df1645 = function(arg0) {\n        console.error(arg0);\n    };\n    imports.wbg.__wbg_error_7534b8e9a36f1ab4 = function(arg0, arg1) {\n        let deferred0_0;\n        let deferred0_1;\n        try {\n            deferred0_0 = arg0;\n            deferred0_1 = arg1;\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n        }\n    };\n    imports.wbg.__wbg_error_80de38b3f7cc3c3c = function(arg0, arg1, arg2, arg3) {\n        console.error(arg0, arg1, arg2, arg3);\n    };\n    imports.wbg.__wbg_getRandomValues_b8f5dbd5f3995a9e = function() { return handleError(function (arg0, arg1) {\n        arg0.getRandomValues(arg1);\n    }, arguments) };\n    imports.wbg.__wbg_get_67b2ba62fc30de12 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.get(arg0, arg1);\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_get_b9b93047fe3cf45b = function(arg0, arg1) {\n        const ret = arg0[arg1 >>> 0];\n        return ret;\n    };\n    imports.wbg.__wbg_getwithrefkey_1dc361bd10053bfe = function(arg0, arg1) {\n        const ret = arg0[arg1];\n        return ret;\n    };\n    imports.wbg.__wbg_info_033d8b8a0838f1d3 = function(arg0, arg1, arg2, arg3) {\n        console.info(arg0, arg1, arg2, arg3);\n    };\n    imports.wbg.__wbg_instanceof_ArrayBuffer_e14585432e3737fc = function(arg0) {\n        let result;\n        try {\n            result = arg0 instanceof ArrayBuffer;\n        } catch (_) {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_instanceof_Map_f3469ce2244d2430 = function(arg0) {\n        let result;\n        try {\n            result = arg0 instanceof Map;\n        } catch (_) {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_instanceof_Promise_935168b8f4b49db3 = function(arg0) {\n        let result;\n        try {\n            result = arg0 instanceof Promise;\n        } catch (_) {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_instanceof_Response_f2cc20d9f7dfd644 = function(arg0) {\n        let result;\n        try {\n            result = arg0 instanceof Response;\n        } catch (_) {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_instanceof_Uint8Array_17156bcf118086a9 = function(arg0) {\n        let result;\n        try {\n            result = arg0 instanceof Uint8Array;\n        } catch (_) {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_isArray_a1eab7e0d067391b = function(arg0) {\n        const ret = Array.isArray(arg0);\n        return ret;\n    };\n    imports.wbg.__wbg_isSafeInteger_343e2beeeece1bb0 = function(arg0) {\n        const ret = Number.isSafeInteger(arg0);\n        return ret;\n    };\n    imports.wbg.__wbg_iterator_9a24c88df860dc65 = function() {\n        const ret = Symbol.iterator;\n        return ret;\n    };\n    imports.wbg.__wbg_json_1671bfa3e3625686 = function() { return handleError(function (arg0) {\n        const ret = arg0.json();\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_length_a446193dc22c12f8 = function(arg0) {\n        const ret = arg0.length;\n        return ret;\n    };\n    imports.wbg.__wbg_length_e2d2a49132c1b256 = function(arg0) {\n        const ret = arg0.length;\n        return ret;\n    };\n    imports.wbg.__wbg_log_4aa07facca81ff45 = function(arg0, arg1) {\n        console.log(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbg_log_c222819a41e063d3 = function(arg0) {\n        console.log(arg0);\n    };\n    imports.wbg.__wbg_log_cad59bb680daec67 = function(arg0, arg1, arg2, arg3) {\n        console.log(arg0, arg1, arg2, arg3);\n    };\n    imports.wbg.__wbg_msCrypto_a61aeb35a24c1329 = function(arg0) {\n        const ret = arg0.msCrypto;\n        return ret;\n    };\n    imports.wbg.__wbg_new_018dcc2d6c8c2f6a = function() { return handleError(function () {\n        const ret = new Headers();\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_new_23a2665fac83c611 = function(arg0, arg1) {\n        try {\n            var state0 = {a: arg0, b: arg1};\n            var cb0 = (arg0, arg1) => {\n                const a = state0.a;\n                state0.a = 0;\n                try {\n                    return __wbg_adapter_568(a, state0.b, arg0, arg1);\n                } finally {\n                    state0.a = a;\n                }\n            };\n            const ret = new Promise(cb0);\n            return ret;\n        } finally {\n            state0.a = state0.b = 0;\n        }\n    };\n    imports.wbg.__wbg_new_405e22f390576ce2 = function() {\n        const ret = new Object();\n        return ret;\n    };\n    imports.wbg.__wbg_new_8a6f238a6ece86ea = function() {\n        const ret = new Error();\n        return ret;\n    };\n    imports.wbg.__wbg_new_a12002a7f91c75be = function(arg0) {\n        const ret = new Uint8Array(arg0);\n        return ret;\n    };\n    imports.wbg.__wbg_newnoargs_105ed471475aaf50 = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return ret;\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_d97e637ebe145a9a = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(arg0, arg1 >>> 0, arg2 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbg_newwithlength_a381634e90c276d4 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbg_newwithstrandinit_06c535e0a867c635 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = new Request(getStringFromWasm0(arg0, arg1), arg2);\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_next_25feadfc0913fea9 = function(arg0) {\n        const ret = arg0.next;\n        return ret;\n    };\n    imports.wbg.__wbg_next_6574e1a8a62d1055 = function() { return handleError(function (arg0) {\n        const ret = arg0.next();\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_node_905d3e251edff8a2 = function(arg0) {\n        const ret = arg0.node;\n        return ret;\n    };\n    imports.wbg.__wbg_now_807e54c39636c349 = function() {\n        const ret = Date.now();\n        return ret;\n    };\n    imports.wbg.__wbg_ok_3aaf32d069979723 = function(arg0) {\n        const ret = arg0.ok;\n        return ret;\n    };\n    imports.wbg.__wbg_process_dc0fbacc7c1c06f7 = function(arg0) {\n        const ret = arg0.process;\n        return ret;\n    };\n    imports.wbg.__wbg_queueMicrotask_97d92b4fcc8a61c5 = function(arg0) {\n        queueMicrotask(arg0);\n    };\n    imports.wbg.__wbg_queueMicrotask_d3219def82552485 = function(arg0) {\n        const ret = arg0.queueMicrotask;\n        return ret;\n    };\n    imports.wbg.__wbg_randomFillSync_ac0988aba3254290 = function() { return handleError(function (arg0, arg1) {\n        arg0.randomFillSync(arg1);\n    }, arguments) };\n    imports.wbg.__wbg_random_3ad904d98382defe = function() {\n        const ret = Math.random();\n        return ret;\n    };\n    imports.wbg.__wbg_require_60cc747a6bc5215a = function() { return handleError(function () {\n        const ret = module.require;\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_resolve_4851785c9c5f573d = function(arg0) {\n        const ret = Promise.resolve(arg0);\n        return ret;\n    };\n    imports.wbg.__wbg_sendProgressMessage_f12fbbae1e730197 = function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) {\n        sendProgressMessage(arg0 >>> 0, getStringFromWasm0(arg1, arg2), arg3 >>> 0, getStringFromWasm0(arg4, arg5), getStringFromWasm0(arg6, arg7), getStringFromWasm0(arg8, arg9), getStringFromWasm0(arg10, arg11));\n    };\n    imports.wbg.__wbg_set_11cd83f45504cedf = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n        arg0.set(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n    }, arguments) };\n    imports.wbg.__wbg_set_65595bdd868b3009 = function(arg0, arg1, arg2) {\n        arg0.set(arg1, arg2 >>> 0);\n    };\n    imports.wbg.__wbg_setbody_5923b78a95eedf29 = function(arg0, arg1) {\n        arg0.body = arg1;\n    };\n    imports.wbg.__wbg_setheaders_834c0bdb6a8949ad = function(arg0, arg1) {\n        arg0.headers = arg1;\n    };\n    imports.wbg.__wbg_setmethod_3c5280fe5d890842 = function(arg0, arg1, arg2) {\n        arg0.method = getStringFromWasm0(arg1, arg2);\n    };\n    imports.wbg.__wbg_setmode_5dc300b865044b65 = function(arg0, arg1) {\n        arg0.mode = __wbindgen_enum_RequestMode[arg1];\n    };\n    imports.wbg.__wbg_stack_0ed75d68575b0f3c = function(arg0, arg1) {\n        const ret = arg1.stack;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n        getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n    };\n    imports.wbg.__wbg_static_accessor_GLOBAL_88a902d13a557d07 = function() {\n        const ret = typeof global === 'undefined' ? null : global;\n        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n    };\n    imports.wbg.__wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0 = function() {\n        const ret = typeof globalThis === 'undefined' ? null : globalThis;\n        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n    };\n    imports.wbg.__wbg_static_accessor_SELF_37c5d418e4bf5819 = function() {\n        const ret = typeof self === 'undefined' ? null : self;\n        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n    };\n    imports.wbg.__wbg_static_accessor_WINDOW_5de37043a91a9c40 = function() {\n        const ret = typeof window === 'undefined' ? null : window;\n        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n    };\n    imports.wbg.__wbg_statusText_207754230b39e67c = function(arg0, arg1) {\n        const ret = arg1.statusText;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n        getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n    };\n    imports.wbg.__wbg_status_f6360336ca686bf0 = function(arg0) {\n        const ret = arg0.status;\n        return ret;\n    };\n    imports.wbg.__wbg_subarray_aa9065fa9dc5df96 = function(arg0, arg1, arg2) {\n        const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbg_text_7805bea50de2af49 = function() { return handleError(function (arg0) {\n        const ret = arg0.text();\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_then_44b73946d2fb3e7d = function(arg0, arg1) {\n        const ret = arg0.then(arg1);\n        return ret;\n    };\n    imports.wbg.__wbg_then_48b406749878a531 = function(arg0, arg1, arg2) {\n        const ret = arg0.then(arg1, arg2);\n        return ret;\n    };\n    imports.wbg.__wbg_transactionpayload_new = function(arg0) {\n        const ret = TransactionPayload.__wrap(arg0);\n        return ret;\n    };\n    imports.wbg.__wbg_transactionpayload_unwrap = function(arg0) {\n        const ret = TransactionPayload.__unwrap(arg0);\n        return ret;\n    };\n    imports.wbg.__wbg_value_cd1ffa7b1ab794f1 = function(arg0) {\n        const ret = arg0.value;\n        return ret;\n    };\n    imports.wbg.__wbg_versions_c01dfd4722a88165 = function(arg0) {\n        const ret = arg0.versions;\n        return ret;\n    };\n    imports.wbg.__wbg_warn_aaf1f4664a035bd6 = function(arg0, arg1, arg2, arg3) {\n        console.warn(arg0, arg1, arg2, arg3);\n    };\n    imports.wbg.__wbg_wasmsignedtransaction_new = function(arg0) {\n        const ret = WasmSignedTransaction.__wrap(arg0);\n        return ret;\n    };\n    imports.wbg.__wbg_wasmsignedtransaction_unwrap = function(arg0) {\n        const ret = WasmSignedTransaction.__unwrap(arg0);\n        return ret;\n    };\n    imports.wbg.__wbindgen_bigint_from_i64 = function(arg0) {\n        const ret = arg0;\n        return ret;\n    };\n    imports.wbg.__wbindgen_bigint_from_u64 = function(arg0) {\n        const ret = BigInt.asUintN(64, arg0);\n        return ret;\n    };\n    imports.wbg.__wbindgen_bigint_get_as_i64 = function(arg0, arg1) {\n        const v = arg1;\n        const ret = typeof(v) === 'bigint' ? v : undefined;\n        getDataViewMemory0().setBigInt64(arg0 + 8 * 1, isLikeNone(ret) ? BigInt(0) : ret, true);\n        getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n    };\n    imports.wbg.__wbindgen_boolean_get = function(arg0) {\n        const v = arg0;\n        const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n        return ret;\n    };\n    imports.wbg.__wbindgen_cb_drop = function(arg0) {\n        const obj = arg0.original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        const ret = false;\n        return ret;\n    };\n    imports.wbg.__wbindgen_closure_wrapper1639 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 209, __wbg_adapter_48);\n        return ret;\n    };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        const ret = debugString(arg1);\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n        getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n    };\n    imports.wbg.__wbindgen_error_new = function(arg0, arg1) {\n        const ret = new Error(getStringFromWasm0(arg0, arg1));\n        return ret;\n    };\n    imports.wbg.__wbindgen_in = function(arg0, arg1) {\n        const ret = arg0 in arg1;\n        return ret;\n    };\n    imports.wbg.__wbindgen_init_externref_table = function() {\n        const table = wasm.__wbindgen_export_4;\n        const offset = table.grow(4);\n        table.set(0, undefined);\n        table.set(offset + 0, undefined);\n        table.set(offset + 1, null);\n        table.set(offset + 2, true);\n        table.set(offset + 3, false);\n        ;\n    };\n    imports.wbg.__wbindgen_is_bigint = function(arg0) {\n        const ret = typeof(arg0) === 'bigint';\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        const ret = typeof(arg0) === 'function';\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = arg0;\n        const ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(arg0) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = arg0 === undefined;\n        return ret;\n    };\n    imports.wbg.__wbindgen_jsval_eq = function(arg0, arg1) {\n        const ret = arg0 === arg1;\n        return ret;\n    };\n    imports.wbg.__wbindgen_jsval_loose_eq = function(arg0, arg1) {\n        const ret = arg0 == arg1;\n        return ret;\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return ret;\n    };\n    imports.wbg.__wbindgen_number_get = function(arg0, arg1) {\n        const obj = arg1;\n        const ret = typeof(obj) === 'number' ? obj : undefined;\n        getDataViewMemory0().setFloat64(arg0 + 8 * 1, isLikeNone(ret) ? 0 : ret, true);\n        getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n    };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = arg1;\n        const ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n        getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return ret;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, memory) {\n\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedDataViewMemory0 = null;\n    cachedUint8ArrayMemory0 = null;\n\n\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nfunction initSync(module) {\n    if (wasm !== undefined) return wasm;\n\n\n    if (typeof module !== 'undefined') {\n        if (Object.getPrototypeOf(module) === Object.prototype) {\n            ({module} = module)\n        } else {\n            console.warn('using deprecated parameters for `initSync()`; pass a single object instead')\n        }\n    }\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(module_or_path) {\n    if (wasm !== undefined) return wasm;\n\n\n    if (typeof module_or_path !== 'undefined') {\n        if (Object.getPrototypeOf(module_or_path) === Object.prototype) {\n            ({module_or_path} = module_or_path)\n        } else {\n            console.warn('using deprecated parameters for the initialization function; pass a single object instead')\n        }\n    }\n\n    if (typeof module_or_path === 'undefined') {\n        module_or_path = new URL('wasm_signer_worker_bg.wasm', import.meta.url);\n    }\n    const imports = __wbg_get_imports();\n\n    if (typeof module_or_path === 'string' || (typeof Request === 'function' && module_or_path instanceof Request) || (typeof URL === 'function' && module_or_path instanceof URL)) {\n        module_or_path = fetch(module_or_path);\n    }\n\n    __wbg_init_memory(imports);\n\n    const { instance, module } = await __wbg_load(await module_or_path, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nexport { initSync };\nexport default __wbg_init;\n"],"mappings":";AAAA,IAAI;AAaJ,MAAM,oBAAqB,OAAO,gBAAgB,cAAc,IAAI,YAAY,WAAW,EAAE,cAAc;AAAE,OAAM,MAAM;;AAEzH,MAAM,eAAgB,OAAO,kBAAkB,eAAe,aACxD,SAAU,KAAK,MAAM;AACvB,QAAO,kBAAkB,WAAW,KAAK;IAEvC,SAAU,KAAK,MAAM;CACvB,MAAM,MAAM,kBAAkB,OAAO;AACrC,MAAK,IAAI;AACT,QAAO;EACH,MAAM,IAAI;EACV,SAAS,IAAI;;;AAoDrB,MAAM,oBAAqB,OAAO,gBAAgB,cAAc,IAAI,YAAY,SAAS;CAAE,WAAW;CAAM,OAAO;KAAU,EAAE,cAAc;AAAE,OAAM,MAAM;;AAE3J,IAAI,OAAO,gBAAgB,YAAe,mBAAkB;AA0B5D,MAAM,gBAAiB,OAAO,yBAAyB,cACjD;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,UAAS;AACpC,MAAK,oBAAoB,IAAI,MAAM,MAAM,MAAM,GAAG,MAAM;;;;;;AAkK5D,MAAa,uBAAuB,OAAO,OAAO;CAC9C,cAAc;CAAG,KAAK;CACtB,aAAa;CAAG,KAAK;;;;;;AAMzB,MAAa,qBAAqB,OAAO,OAAO;CAC5C,MAAM;CAAG,KAAK;CACd,OAAO;CAAG,KAAK;CACf,UAAU;CAAG,KAAK;;;;;;;;;;;;;;;AAetB,MAAa,sBAAsB,OAAO,OAAO;CAC7C,sBAAsB;CAAI,MAAM;CAChC,sBAAsB;CAAI,MAAM;CAChC,wBAAwB;CAAI,MAAM;CAClC,wBAAwB;CAAI,MAAM;;;;;;;AAOtC,MAAa,eAAe,OAAO,OAAO;CACtC,aAAa;CAAK,OAAO;CACzB,kBAAkB;CAAK,OAAO;CAC9B,sBAAsB;CAAK,OAAO;CAClC,wBAAwB;CAAK,OAAO;CACpC,wBAAwB;CAAK,OAAO;CACpC,4BAA4B;CAAK,OAAO;CACxC,4BAA4B;CAAK,OAAO;CACxC,OAAO;CAAK,OAAO;;;;;;AAMvB,MAAa,yBAAyB,OAAO,OAAO;CAChD,UAAU;CAAG,KAAK;CAClB,WAAW;CAAG,KAAK;CACnB,aAAa;CAAG,KAAK;;;;;AAKzB,MAAa,oBAAoB,OAAO,OAAO;CAC3C,6BAA6B;CAAG,KAAK;CACrC,2BAA2B;CAAG,KAAK;CACnC,sBAAsB;CAAG,KAAK;CAC9B,0BAA0B;CAAG,KAAK;CAClC,6BAA6B;CAAG,KAAK;CACrC,sBAAsB;CAAG,KAAK;CAC9B,4BAA4B;CAAG,KAAK;CACpC,mBAAmB;CAAG,KAAK;CAC3B,2BAA2B;CAAG,KAAK;;;;;;AAMvC,MAAa,qBAAqB,OAAO,OAAO;CAC5C,oCAAoC;CAAG,KAAK;CAC5C,kCAAkC;CAAG,KAAK;CAC1C,6BAA6B;CAAG,KAAK;CACrC,iCAAiC;CAAG,KAAK;CACzC,oCAAoC;CAAG,KAAK;CAC5C,6BAA6B;CAAG,KAAK;CACrC,mCAAmC;CAAG,KAAK;CAC3C,0BAA0B;CAAG,KAAK;CAClC,kCAAkC;CAAG,KAAK;CAC1C,oCAAoC;CAAG,KAAK;CAC5C,kCAAkC;CAAI,MAAM;CAC5C,6BAA6B;CAAI,MAAM;CACvC,iCAAiC;CAAI,MAAM;CAC3C,oCAAoC;CAAI,MAAM;CAC9C,6BAA6B;CAAI,MAAM;CACvC,mCAAmC;CAAI,MAAM;CAC7C,0BAA0B;CAAI,MAAM;CACpC,kCAAkC;CAAI,MAAM;CAC5C,sBAAsB;CAAI,MAAM;CAChC,sBAAsB;CAAI,MAAM;CAChC,wBAAwB;CAAI,MAAM;CAClC,wBAAwB;CAAI,MAAM;;AAKtC,MAAM,qCAAsC,OAAO,yBAAyB,cACtE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,kCAAkC,QAAQ,GAAG;AAkHxF,MAAM,mCAAoC,OAAO,yBAAyB,cACpE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,gCAAgC,QAAQ,GAAG;AA0DtF,MAAM,0CAA2C,OAAO,yBAAyB,cAC3E;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,uCAAuC,QAAQ,GAAG;AA+G7F,MAAM,qCAAsC,OAAO,yBAAyB,cACtE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,kCAAkC,QAAQ,GAAG;AAwCxF,MAAM,iCAAkC,OAAO,yBAAyB,cAClE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,8BAA8B,QAAQ,GAAG;AA8FpF,MAAM,mCAAoC,OAAO,yBAAyB,cACpE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,gCAAgC,QAAQ,GAAG;AAkCtF,MAAM,uCAAwC,OAAO,yBAAyB,cACxE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,oCAAoC,QAAQ,GAAG;AAiI1F,MAAM,sCAAuC,OAAO,yBAAyB,cACvE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,mCAAmC,QAAQ,GAAG;AA6EzF,MAAM,yBAA0B,OAAO,yBAAyB,cAC1D;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,sBAAsB,QAAQ,GAAG;AAuG5E,MAAM,gCAAiC,OAAO,yBAAyB,cACjE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,6BAA6B,QAAQ,GAAG;AAwFnF,MAAM,iDAAkD,OAAO,yBAAyB,cAClF;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,8CAA8C,QAAQ,GAAG;AA0GpG,MAAM,gDAAiD,OAAO,yBAAyB,cACjF;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,6CAA6C,QAAQ,GAAG;AAuKnG,MAAM,mCAAoC,OAAO,yBAAyB,cACpE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,gCAAgC,QAAQ,GAAG;AAuEtF,MAAM,iCAAkC,OAAO,yBAAyB,cAClE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,8BAA8B,QAAQ,GAAG;AAwCpF,MAAM,8BAA+B,OAAO,yBAAyB,cAC/D;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,2BAA2B,QAAQ,GAAG;AAiIjF,MAAM,gDAAiD,OAAO,yBAAyB,cACjF;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,6CAA6C,QAAQ,GAAG;AAoInG,MAAM,gCAAiC,OAAO,yBAAyB,cACjE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,6BAA6B,QAAQ,GAAG;AA2EnF,MAAM,yBAA0B,OAAO,yBAAyB,cAC1D;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,sBAAsB,QAAQ,GAAG;AAiE5E,MAAM,yBAA0B,OAAO,yBAAyB,cAC1D;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,sBAAsB,QAAQ,GAAG;AAwC5E,MAAM,oCAAqC,OAAO,yBAAyB,cACrE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,iCAAiC,QAAQ,GAAG;AAoDvF,MAAM,mCAAoC,OAAO,yBAAyB,cACpE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,gCAAgC,QAAQ,GAAG;AA8HtF,MAAM,uCAAwC,OAAO,yBAAyB,cACxE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,oCAAoC,QAAQ,GAAG;AA6E1F,MAAM,sCAAuC,OAAO,yBAAyB,cACvE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,mCAAmC,QAAQ,GAAG;AAkIzF,MAAM,qCAAsC,OAAO,yBAAyB,cACtE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,kCAAkC,QAAQ,GAAG;AA0HxF,MAAM,kCAAmC,OAAO,yBAAyB,cACnE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,+BAA+B,QAAQ,GAAG;AAiJrF,MAAM,mCAAoC,OAAO,yBAAyB,cACpE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,gCAAgC,QAAQ,GAAG;AAwFtF,MAAM,iCAAkC,OAAO,yBAAyB,cAClE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,8BAA8B,QAAQ,GAAG;AA0JpF,MAAM,6BAA8B,OAAO,yBAAyB,cAC9D;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,0BAA0B,QAAQ,GAAG;AAiGhF,MAAM,mCAAoC,OAAO,yBAAyB,cACpE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,gCAAgC,QAAQ,GAAG;AAgJtF,MAAM,+CAAgD,OAAO,yBAAyB,cAChF;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,4CAA4C,QAAQ,GAAG;AAgJlG,MAAM,gCAAiC,OAAO,yBAAyB,cACjE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,6BAA6B,QAAQ,GAAG;AAsMnF,MAAM,+BAAgC,OAAO,yBAAyB,cAChE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,4BAA4B,QAAQ,GAAG;AA8HlF,MAAM,gDAAiD,OAAO,yBAAyB,cACjF;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,6CAA6C,QAAQ,GAAG;AA2JnG,MAAM,iDAAkD,OAAO,yBAAyB,cAClF;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,8CAA8C,QAAQ,GAAG;AAoFpG,MAAM,+CAAgD,OAAO,yBAAyB,cAChF;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,4CAA4C,QAAQ,GAAG;AA8DlG,MAAM,iCAAkC,OAAO,yBAAyB,cAClE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,8BAA8B,QAAQ,GAAG;AAgHpF,MAAM,iCAAkC,OAAO,yBAAyB,cAClE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,8BAA8B,QAAQ,GAAG;AAqGpF,MAAM,oCAAqC,OAAO,yBAAyB,cACrE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,iCAAiC,QAAQ,GAAG;AAsJvF,MAAM,kCAAmC,OAAO,yBAAyB,cACnE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,+BAA+B,QAAQ,GAAG;AA6FrF,MAAM,2BAA4B,OAAO,yBAAyB,cAC5D;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,wBAAwB,QAAQ,GAAG;AAiN9E,MAAM,4BAA6B,OAAO,yBAAyB,cAC7D;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,yBAAyB,QAAQ,GAAG;AAmE/E,MAAM,4BAA6B,OAAO,yBAAyB,cAC7D;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,yBAAyB,QAAQ,GAAG;AAmE/E,MAAM,oCAAqC,OAAO,yBAAyB,cACrE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,iCAAiC,QAAQ,GAAG;AAgGvF,MAAM,8BAA+B,OAAO,yBAAyB,cAC/D;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,2BAA2B,QAAQ,GAAG;AAmKjF,MAAM,qDAAsD,OAAO,yBAAyB,cACtF;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,kDAAkD,QAAQ,GAAG;AAmOxG,MAAM,mDAAoD,OAAO,yBAAyB,cACpF;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,gDAAgD,QAAQ,GAAG;AAgOtG,MAAM,oCAAqC,OAAO,yBAAyB,cACrE;CAAE,gBAAgB;CAAI,kBAAkB;IACxC,IAAI,sBAAqB,QAAO,KAAK,iCAAiC,QAAQ,GAAG"}