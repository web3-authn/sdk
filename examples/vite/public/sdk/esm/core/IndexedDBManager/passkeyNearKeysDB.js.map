{"version":3,"file":"passkeyNearKeysDB.js","names":["DB_CONFIG: PasskeyNearKeysDBConfig"],"sources":["../../../../src/core/IndexedDBManager/passkeyNearKeysDB.ts"],"sourcesContent":["import { openDB, type IDBPDatabase } from 'idb';\n\n// === CONSTANTS ===\n\nconst DB_CONFIG: PasskeyNearKeysDBConfig = {\n  dbName: 'PasskeyNearKeys',\n  dbVersion: 1,\n  storeName: 'encryptedKeys',\n  keyPath: 'nearAccountId'\n} as const;\n\nexport interface EncryptedKeyData {\n  nearAccountId: string;\n  encryptedData: string;\n  iv: string;\n  timestamp: number;\n}\n\ninterface PasskeyNearKeysDBConfig {\n  dbName: string;\n  dbVersion: number;\n  storeName: string;\n  keyPath: string;\n}\n\nexport class PasskeyNearKeysDBManager {\n  private config: PasskeyNearKeysDBConfig;\n  private db: IDBPDatabase | null = null;\n\n  constructor(config: PasskeyNearKeysDBConfig = DB_CONFIG) {\n    this.config = config;\n  }\n\n  /**\n   * Get database connection, initializing if necessary\n   */\n  private async getDB(): Promise<IDBPDatabase> {\n    if (this.db) {\n      return this.db;\n    }\n\n    this.db = await openDB(this.config.dbName, this.config.dbVersion, {\n      upgrade(db, oldVersion): void {\n        // Create store if it doesn't exist\n        if (!db.objectStoreNames.contains(DB_CONFIG.storeName)) {\n          db.createObjectStore(DB_CONFIG.storeName, { keyPath: DB_CONFIG.keyPath });\n        }\n      },\n      blocked() {\n        console.warn('PasskeyNearKeysDB connection is blocked.');\n      },\n      blocking() {\n        console.warn('PasskeyNearKeysDB connection is blocking another connection.');\n      },\n      terminated: () => {\n        console.warn('PasskeyNearKeysDB connection has been terminated.');\n        this.db = null;\n      },\n    });\n\n    return this.db;\n  }\n\n  /**\n   * Store encrypted key data\n   */\n  async storeEncryptedKey(data: EncryptedKeyData): Promise<void> {\n    const db = await this.getDB();\n    await db.put(this.config.storeName, data);\n  }\n\n  /**\n   * Retrieve encrypted key data\n   */\n  async getEncryptedKey(nearAccountId: string): Promise<EncryptedKeyData | null> {\n    const db = await this.getDB();\n    const result = await db.get(this.config.storeName, nearAccountId);\n    if (!result?.encryptedData && nearAccountId !== '_init_check') {\n      console.warn('PasskeyNearKeysDB: getEncryptedKey - No result found');\n    }\n    return result || null;\n  }\n\n  /**\n   * Verify key storage by attempting retrieval\n   */\n  async verifyKeyStorage(nearAccountId: string): Promise<boolean> {\n    try {\n      const retrievedKey = await this.getEncryptedKey(nearAccountId);\n      return !!retrievedKey;\n    } catch (error) {\n      console.error('PasskeyNearKeysDB: verifyKeyStorage - Error:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Delete encrypted key data for a specific account\n   */\n  async deleteEncryptedKey(nearAccountId: string): Promise<void> {\n    const db = await this.getDB();\n    await db.delete(this.config.storeName, nearAccountId);\n    console.debug('PasskeyNearKeysDB: deleteEncryptedKey - Successfully deleted');\n  }\n\n  /**\n   * Get all encrypted keys (for migration or debugging purposes)\n   */\n  async getAllEncryptedKeys(): Promise<EncryptedKeyData[]> {\n    const db = await this.getDB();\n    return await db.getAll(this.config.storeName);\n  }\n\n  /**\n   * Check if a key exists for the given account\n   */\n  async hasEncryptedKey(nearAccountId: string): Promise<boolean> {\n    try {\n      const keyData = await this.getEncryptedKey(nearAccountId);\n      return !!keyData;\n    } catch (error) {\n      console.error('PasskeyNearKeysDB: hasEncryptedKey - Error:', error);\n      return false;\n    }\n  }\n}"],"mappings":";;;AAIA,MAAMA,YAAqC;CACzC,QAAQ;CACR,WAAW;CACX,WAAW;CACX,SAAS;;AAiBX,IAAa,2BAAb,MAAsC;CACpC,AAAQ;CACR,AAAQ,KAA0B;CAElC,YAAY,SAAkC,WAAW;AACvD,OAAK,SAAS;;;;;CAMhB,MAAc,QAA+B;AAC3C,MAAI,KAAK,GACP,QAAO,KAAK;AAGd,OAAK,KAAK,MAAM,OAAO,KAAK,OAAO,QAAQ,KAAK,OAAO,WAAW;GAChE,QAAQ,IAAI,YAAkB;AAE5B,QAAI,CAAC,GAAG,iBAAiB,SAAS,UAAU,WAC1C,IAAG,kBAAkB,UAAU,WAAW,EAAE,SAAS,UAAU;;GAGnE,UAAU;AACR,YAAQ,KAAK;;GAEf,WAAW;AACT,YAAQ,KAAK;;GAEf,kBAAkB;AAChB,YAAQ,KAAK;AACb,SAAK,KAAK;;;AAId,SAAO,KAAK;;;;;CAMd,MAAM,kBAAkB,MAAuC;EAC7D,MAAM,KAAK,MAAM,KAAK;AACtB,QAAM,GAAG,IAAI,KAAK,OAAO,WAAW;;;;;CAMtC,MAAM,gBAAgB,eAAyD;EAC7E,MAAM,KAAK,MAAM,KAAK;EACtB,MAAM,SAAS,MAAM,GAAG,IAAI,KAAK,OAAO,WAAW;AACnD,MAAI,CAAC,QAAQ,iBAAiB,kBAAkB,cAC9C,SAAQ,KAAK;AAEf,SAAO,UAAU;;;;;CAMnB,MAAM,iBAAiB,eAAyC;AAC9D,MAAI;GACF,MAAM,eAAe,MAAM,KAAK,gBAAgB;AAChD,UAAO,CAAC,CAAC;WACF,OAAO;AACd,WAAQ,MAAM,gDAAgD;AAC9D,UAAO;;;;;;CAOX,MAAM,mBAAmB,eAAsC;EAC7D,MAAM,KAAK,MAAM,KAAK;AACtB,QAAM,GAAG,OAAO,KAAK,OAAO,WAAW;AACvC,UAAQ,MAAM;;;;;CAMhB,MAAM,sBAAmD;EACvD,MAAM,KAAK,MAAM,KAAK;AACtB,SAAO,MAAM,GAAG,OAAO,KAAK,OAAO;;;;;CAMrC,MAAM,gBAAgB,eAAyC;AAC7D,MAAI;GACF,MAAM,UAAU,MAAM,KAAK,gBAAgB;AAC3C,UAAO,CAAC,CAAC;WACF,OAAO;AACd,WAAQ,MAAM,+CAA+C;AAC7D,UAAO"}