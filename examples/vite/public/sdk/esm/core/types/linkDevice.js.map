{"version":3,"file":"linkDevice.js","names":["code: DeviceLinkingErrorCode","phase: 'generation' | 'authorization' | 'registration'"],"sources":["../../../../src/core/types/linkDevice.ts"],"sourcesContent":["import {\n  ActionResult,\n  EventCallback,\n  OperationHooks,\n  DeviceLinkingPhase,\n  DeviceLinkingSSEEvent\n} from './passkeyManager';\nimport { VRFChallenge } from './vrf-worker';\nimport { AccountId } from './accountIds';\nimport { SignedTransaction } from '../NearClient';\n\n// Re-export DeviceLinkingPhase from passkeyManager\nexport { DeviceLinkingPhase } from './passkeyManager';\n\n// === DEVICE LINKING TYPES ===\nexport interface DeviceLinkingQRData {\n  accountId?: AccountId; // Optional - Device2 discovers this from contract polling\n  device2PublicKey: string; // Device2 initiates and creates the QR code containing this public key\n                            // for Device1 to scan and add it to their account.\n  timestamp: number;\n  version: string; // For future compatibility\n}\n\nexport interface DeviceLinkingSession {\n  accountId: AccountId | null; // Null until discovered from contract logs (Option F) or provided upfront (Option E)\n  deviceNumber?: number; // Device number assigned by Device1 for device linking\n  nearPublicKey: string;\n  credential: PublicKeyCredential | null; // Null for Option F until real account discovered\n  vrfChallenge: VRFChallenge | null; // Null for Option F until real account discovered\n  phase: DeviceLinkingPhase;\n  createdAt: number;\n  expiresAt: number;\n  tempPrivateKey?: string; // For Option F flow - temporary private key before replacement\n}\n\nexport interface LinkDeviceResult extends ActionResult {\n  device2PublicKey: string;\n  transactionId?: string;\n  fundingAmount: string;\n  linkedToAccount?: string; // The account ID that the device key was added to\n  signedDeleteKeyTransaction?: SignedTransaction;\n}\n\nexport class DeviceLinkingError extends Error {\n  constructor(\n    message: string,\n    public code: DeviceLinkingErrorCode,\n    public phase: 'generation' | 'authorization' | 'registration'\n  ) {\n    super(message);\n  }\n}\n\nexport enum DeviceLinkingErrorCode {\n  INVALID_QR_DATA = 'INVALID_QR_DATA',\n  ACCOUNT_NOT_OWNED = 'ACCOUNT_NOT_OWNED',\n  AUTHORIZATION_TIMEOUT = 'AUTHORIZATION_TIMEOUT',\n  INSUFFICIENT_BALANCE = 'INSUFFICIENT_BALANCE',\n  REGISTRATION_FAILED = 'REGISTRATION_FAILED',\n  SESSION_EXPIRED = 'SESSION_EXPIRED'\n}\n\nexport interface StartDeviceLinkingOptionsDevice2 {\n  cameraId?: string;\n  onEvent?: EventCallback<DeviceLinkingSSEEvent>;\n  onError?: (error: Error) => void;\n  hooks?: OperationHooks;\n}\n\nexport interface ScanAndLinkDeviceOptionsDevice1 {\n  fundingAmount: string;\n  onEvent?: EventCallback<DeviceLinkingSSEEvent>;\n  onError?: (error: Error) => void;\n  hooks?: OperationHooks;\n}"],"mappings":";;;AA2CA,IAAa,qBAAb,cAAwC,MAAM;CAC5C,YACE,SACA,AAAOA,MACP,AAAOC,OACP;AACA,QAAM;EAHC;EACA;;;AAMX,IAAY,4EAAL;AACL;AACA;AACA;AACA;AACA;AACA"}