{"version":3,"file":"tags.js","names":[],"sources":["../../../../../../src/core/WebAuthnManager/LitComponents/IframeButtonWithTooltipConfirmer/tags.ts"],"sourcesContent":["\n// Lit component tag names\n// These are rendered as web components:\n// e.g. <iframe-button></iframe-button>, <button-with-tooltip>, etc;\nexport const IFRAME_BUTTON_ID = 'iframe-button';\nexport const BUTTON_WITH_TOOLTIP_ID = 'button-with-tooltip';\n\n// Asset path and bootstrap module used by the iframe host to hydrate the embedded element.\nexport const EMBEDDED_SDK_BASE_PATH = '/sdk/embedded/';\nexport const IFRAME_BOOTSTRAP_MODULE = 'iframe-button-bootstrap.js';\n// Modal iframe host + bootstrap + modal bundle\nexport const IFRAME_MODAL_ID = 'iframe-modal';\nexport const IFRAME_MODAL_BOOTSTRAP_MODULE = 'iframe-modal-bootstrap.js';\nexport const MODAL_TX_CONFIRM_BUNDLE = 'modal-tx-confirm.js';\n\n// CSS Class Names - Centralized for type safety and maintainability\nexport const CSS_CLASSES = {\n  // Container elements\n  EMBEDDED_CONFIRM_CONTAINER: 'embedded-confirm-container',\n\n  // Button elements\n  EMBEDDED_BTN: 'embedded-btn',\n\n  // Tooltip elements\n  TOOLTIP_CONTENT: 'tooltip-content',\n\n  // Loading elements\n  LOADING: 'loading',\n  SPINNER: 'spinner',\n} as const;\n\n// Type-safe selector functions using data attributes - corresponds to CSS selectors in ButtonWithTooltip.ts\nexport const SELECTORS = {\n  EMBEDDED_CONFIRM_CONTAINER: `[data-embedded-tx-button-root]`, // CSS: [data-embedded-tx-button-root]\n  EMBEDDED_BTN: `[data-embedded-btn]`, // CSS: [data-embedded-btn]\n  TOOLTIP_CONTENT: `[data-tooltip-content]`, // CSS: [data-tooltip-content], [data-tooltip-content][data-position=\"...\"], etc.\n  LOADING: `[data-loading]`, // CSS: [data-loading], [data-loading][data-visible=\"true\"]\n  SPINNER: `[data-spinner]`, // CSS: [data-spinner]\n} as const;\n\n// Type-safe query selector functions for HTMLElement - uses SELECTORS constants that correspond to CSS selectors\nexport class ElementSelectors {\n  private root: Document | ShadowRoot | Element | null | undefined;\n\n  constructor(root?: Document | ShadowRoot | Element | null) {\n    this.root = root;\n  }\n\n  // Instance methods (bound to the root passed in constructor) - uses SELECTORS that correspond to CSS selectors\n  getEmbeddedConfirmContainer(): HTMLElement | null { // Corresponds to [data-embedded-tx-button-root] CSS selector\n    return this.root?.querySelector(SELECTORS.EMBEDDED_CONFIRM_CONTAINER) || null;\n  }\n\n  getEmbeddedBtn(): HTMLElement | null { // Corresponds to [data-embedded-btn] CSS selector\n    return this.root?.querySelector(SELECTORS.EMBEDDED_BTN) || null;\n  }\n\n  getTooltipContent(): HTMLElement | null { // Corresponds to [data-tooltip-content] CSS selector\n    return this.root?.querySelector(SELECTORS.TOOLTIP_CONTENT) || null;\n  }\n\n  getLoading(): HTMLElement | null { // Corresponds to [data-loading] CSS selector\n    return this.root?.querySelector(SELECTORS.LOADING) || null;\n  }\n\n  getSpinner(): HTMLElement | null { // Corresponds to [data-spinner] CSS selector\n    return this.root?.querySelector(SELECTORS.SPINNER) || null;\n  }\n\n  // Static methods (require root parameter) - uses SELECTORS that correspond to CSS selectors\n  static getEmbeddedConfirmContainer(root: Document | ShadowRoot | Element | null | undefined): HTMLElement | null { // Corresponds to [data-embedded-tx-button-root] CSS selector\n    return root?.querySelector(SELECTORS.EMBEDDED_CONFIRM_CONTAINER) || null;\n  }\n\n  static getEmbeddedBtn(root: Document | ShadowRoot | Element | null | undefined): HTMLElement | null { // Corresponds to [data-embedded-btn] CSS selector\n    return root?.querySelector(SELECTORS.EMBEDDED_BTN) || null;\n  }\n\n  static getTooltipContent(root: Document | ShadowRoot | Element | null | undefined): HTMLElement | null { // Corresponds to [data-tooltip-content] CSS selector\n    return root?.querySelector(SELECTORS.TOOLTIP_CONTENT) || null;\n  }\n\n  static getLoading(root: Document | ShadowRoot | Element | null | undefined): HTMLElement | null { // Corresponds to [data-loading] CSS selector\n    return root?.querySelector(SELECTORS.LOADING) || null;\n  }\n\n  static getSpinner(root: Document | ShadowRoot | Element | null | undefined): HTMLElement | null { // Corresponds to [data-spinner] CSS selector\n    return root?.querySelector(SELECTORS.SPINNER) || null;\n  }\n}\n"],"mappings":";AAIA,MAAa,mBAAmB;AAOhC,MAAa,kBAAkB"}