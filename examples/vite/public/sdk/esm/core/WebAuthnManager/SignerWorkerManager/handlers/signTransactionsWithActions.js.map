{"version":3,"file":"signTransactionsWithActions.js","names":["txSigningRequests: TransactionPayload[]","error: any"],"sources":["../../../../../../src/core/WebAuthnManager/SignerWorkerManager/handlers/signTransactionsWithActions.ts"],"sourcesContent":["\nimport { SignedTransaction } from '../../../NearClient';\nimport { TransactionInputWasm, validateActionArgsWasm } from '../../../types/actions';\nimport type { onProgressEvents } from '../../../types/passkeyManager';\nimport {\n  WorkerRequestType,\n  TransactionPayload,\n  ConfirmationConfig,\n  isSignTransactionsWithActionsSuccess,\n} from '../../../types/signer-worker';\nimport { AccountId } from \"../../../types/accountIds\";\nimport { SignerWorkerManagerContext } from '..';\nimport { RpcCallPayload } from '../../../types/signer-worker';\nimport { toAccountId } from '../../../types/accountIds';\n\n/**\n * Sign multiple transactions with shared VRF challenge and credential\n * Efficiently processes multiple transactions with one PRF authentication\n */\nexport async function signTransactionsWithActions({\n  ctx,\n  transactions,\n  rpcCall,\n  onEvent,\n  confirmationConfigOverride\n}: {\n  ctx: SignerWorkerManagerContext,\n  transactions: TransactionInputWasm[],\n  rpcCall: RpcCallPayload;\n  onEvent?: (update: onProgressEvents) => void;\n  confirmationConfigOverride?: ConfirmationConfig;\n}): Promise<Array<{\n  signedTransaction: SignedTransaction;\n  nearAccountId: AccountId;\n  logs?: string[]\n}>> {\n  try {\n    console.info(`WebAuthnManager: Starting batch transaction signing for ${transactions.length} transactions`);\n\n    if (transactions.length === 0) {\n      throw new Error('No transactions provided for batch signing');\n    }\n\n    // Extract nearAccountId from rpcCall\n    const nearAccountId = rpcCall.nearAccountId;\n\n    // Validate all actions in all payloads\n    transactions.forEach((txPayload, txIndex) => {\n      txPayload.actions.forEach((action, actionIndex) => {\n        try {\n          validateActionArgsWasm(action);\n        } catch (error) {\n          throw new Error(`Transaction ${txIndex}, Action ${actionIndex} validation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n      });\n    });\n\n    // Retrieve encrypted key data from IndexedDB in main thread\n    console.debug('WebAuthnManager: Retrieving encrypted key from IndexedDB for account:', nearAccountId);\n    const encryptedKeyData = await ctx.indexedDB.nearKeysDB.getEncryptedKey(nearAccountId);\n    if (!encryptedKeyData) {\n      throw new Error(`No encrypted key found for account: ${nearAccountId}`);\n    }\n\n    // Credentials and PRF outputs are collected during user confirmation handshake\n\n    // Create transaction signing requests\n    // NOTE: nonce and blockHash are computed in confirmation flow, not here\n    const txSigningRequests: TransactionPayload[] = transactions.map(tx => ({\n      nearAccountId: rpcCall.nearAccountId,\n      receiverId: tx.receiverId,\n      actions: JSON.stringify(tx.actions)\n    }));\n\n    const confirmationConfig = confirmationConfigOverride\n      || ctx.userPreferencesManager.getConfirmationConfig();\n\n    // Send batch signing request to WASM worker\n    const response = await ctx.sendMessage({\n      message: {\n        type: WorkerRequestType.SignTransactionsWithActions,\n        payload: {\n          rpcCall: rpcCall,\n          decryption: {\n            encryptedPrivateKeyData: encryptedKeyData.encryptedData,\n            encryptedPrivateKeyIv: encryptedKeyData.iv\n          },\n          txSigningRequests: txSigningRequests,\n          confirmationConfig: confirmationConfig\n        }\n      },\n      onEvent\n    });\n\n    if (!isSignTransactionsWithActionsSuccess(response)) {\n      console.error('WebAuthnManager: Batch transaction signing failed:', response);\n      throw new Error('Batch transaction signing failed');\n    }\n    if (!response.payload.success) {\n      throw new Error(response.payload.error || 'Batch transaction signing failed');\n    }\n    // Extract arrays from the single result - wasmResult contains arrays of all transactions\n    const signedTransactions = response.payload.signedTransactions || [];\n    if (signedTransactions.length !== transactions.length) {\n      throw new Error(`Expected ${transactions.length} signed transactions but received ${signedTransactions.length}`);\n    }\n\n    // Process results for each transaction using WASM types directly\n    const results = signedTransactions.map((signedTx, index) => {\n      if (!signedTx || !signedTx.transaction || !signedTx.signature) {\n        throw new Error(`Incomplete signed transaction data received for transaction ${index + 1}`);\n      }\n      return {\n        signedTransaction: new SignedTransaction({\n          transaction: signedTx.transaction,\n          signature: signedTx.signature,\n          borsh_bytes: Array.from(signedTx.borshBytes || [])\n        }),\n        nearAccountId: toAccountId(nearAccountId),\n        logs: response.payload.logs\n      };\n    });\n\n    return results;\n\n  } catch (error: any) {\n    console.error('WebAuthnManager: Batch transaction signing error:', error);\n    throw error;\n  }\n}\n"],"mappings":";;;;;;;;;;;AAmBA,eAAsB,4BAA4B,EAChD,KACA,cACA,SACA,SACA,8BAWE;AACF,KAAI;AACF,UAAQ,KAAK,2DAA2D,aAAa,OAAO;AAE5F,MAAI,aAAa,WAAW,EAC1B,OAAM,IAAI,MAAM;EAIlB,MAAM,gBAAgB,QAAQ;AAG9B,eAAa,SAAS,WAAW,YAAY;AAC3C,aAAU,QAAQ,SAAS,QAAQ,gBAAgB;AACjD,QAAI;AACF,4BAAuB;aAChB,OAAO;AACd,WAAM,IAAI,MAAM,eAAe,QAAQ,WAAW,YAAY,sBAAsB,iBAAiB,QAAQ,MAAM,UAAU;;;;AAMnI,UAAQ,MAAM,yEAAyE;EACvF,MAAM,mBAAmB,MAAM,IAAI,UAAU,WAAW,gBAAgB;AACxE,MAAI,CAAC,iBACH,OAAM,IAAI,MAAM,uCAAuC;EAOzD,MAAMA,oBAA0C,aAAa,KAAI,QAAO;GACtE,eAAe,QAAQ;GACvB,YAAY,GAAG;GACf,SAAS,KAAK,UAAU,GAAG;;EAG7B,MAAM,qBAAqB,8BACtB,IAAI,uBAAuB;EAGhC,MAAM,WAAW,MAAM,IAAI,YAAY;GACrC,SAAS;IACP,MAAM,kBAAkB;IACxB,SAAS;KACE;KACT,YAAY;MACV,yBAAyB,iBAAiB;MAC1C,uBAAuB,iBAAiB;;KAEvB;KACC;;;GAGxB;;AAGF,MAAI,CAAC,qCAAqC,WAAW;AACnD,WAAQ,MAAM,sDAAsD;AACpE,SAAM,IAAI,MAAM;;AAElB,MAAI,CAAC,SAAS,QAAQ,QACpB,OAAM,IAAI,MAAM,SAAS,QAAQ,SAAS;EAG5C,MAAM,qBAAqB,SAAS,QAAQ,sBAAsB;AAClE,MAAI,mBAAmB,WAAW,aAAa,OAC7C,OAAM,IAAI,MAAM,YAAY,aAAa,OAAO,oCAAoC,mBAAmB;EAIzG,MAAM,UAAU,mBAAmB,KAAK,UAAU,UAAU;AAC1D,OAAI,CAAC,YAAY,CAAC,SAAS,eAAe,CAAC,SAAS,UAClD,OAAM,IAAI,MAAM,+DAA+D,QAAQ;AAEzF,UAAO;IACL,mBAAmB,IAAI,kBAAkB;KACvC,aAAa,SAAS;KACtB,WAAW,SAAS;KACpB,aAAa,MAAM,KAAK,SAAS,cAAc;;IAEjD,eAAe,YAAY;IAC3B,MAAM,SAAS,QAAQ;;;AAI3B,SAAO;UAEAC,OAAY;AACnB,UAAQ,MAAM,qDAAqD;AACnE,QAAM"}