{"version":3,"file":"signVerifyAndRegisterUser.js","names":["error: any"],"sources":["../../../../../../src/core/WebAuthnManager/SignerWorkerManager/handlers/signVerifyAndRegisterUser.ts"],"sourcesContent":["\nimport { SIGNER_WORKER_MANAGER_CONFIG } from \"../../../../config\";\nimport { SignedTransaction, type NearClient } from '../../../NearClient';\nimport { WorkerRequestType, isSignVerifyAndRegisterUserSuccess } from '../../../types/signer-worker';\nimport { toEnumUserVerificationPolicy } from '../../../types/authenticatorOptions';\nimport { VRFChallenge } from '../../../types/vrf-worker';\nimport { AccountId } from \"../../../types/accountIds\";\n\nimport type { onProgressEvents } from '../../../types/passkeyManager';\nimport type { AuthenticatorOptions } from '../../../types/authenticatorOptions';\nimport { SignerWorkerManagerContext } from '..';\n\n\nexport async function signVerifyAndRegisterUser({\n  ctx,\n  vrfChallenge,\n  contractId,\n  deterministicVrfPublicKey,\n  nearAccountId,\n  nearPublicKeyStr,\n  nearClient,\n  nearRpcUrl,\n  deviceNumber = 1, // Default to device number 1 for first device (1-indexed)\n  authenticatorOptions,\n  onEvent,\n}: {\n  ctx: SignerWorkerManagerContext,\n  vrfChallenge: VRFChallenge,\n  contractId: string;\n  deterministicVrfPublicKey: string; // Required deterministic VRF key for dual registration\n  nearAccountId: AccountId;\n  nearPublicKeyStr: string;\n  nearClient: NearClient; // NEAR RPC client for getting transaction metadata\n  nearRpcUrl: string; // NEAR RPC URL for contract verification\n  deviceNumber?: number; // Device number for multi-device support (defaults to 1)\n  authenticatorOptions?: AuthenticatorOptions; // Authenticator options for registration\n  onEvent?: (update: onProgressEvents) => void;\n}): Promise<{\n  verified: boolean;\n  registrationInfo?: any;\n  logs?: string[];\n  signedTransaction: SignedTransaction;\n  preSignedDeleteTransaction: SignedTransaction | null;\n}> {\n  try {\n    console.info('WebAuthnManager: Starting on-chain user registration with transaction');\n\n    if (!nearPublicKeyStr) {\n      throw new Error('Client NEAR public key not provided - cannot get access key nonce');\n    }\n\n    // Retrieve encrypted key data from IndexedDB in main thread\n    console.debug('WebAuthnManager: Retrieving encrypted key from IndexedDB for account:', nearAccountId);\n    const encryptedKeyData = await ctx.indexedDB.nearKeysDB.getEncryptedKey(nearAccountId);\n    if (!encryptedKeyData) {\n      throw new Error(`No encrypted key found for account: ${nearAccountId}`);\n    }\n\n    const {\n      accessKeyInfo,\n      nextNonce,\n      txBlockHash,\n      txBlockHeight,\n    } = await ctx.nonceManager.getNonceBlockHashAndHeight(nearClient);\n\n    // Step 2: Execute registration transaction via WASM\n    // Credentials will be collected during the confirmation flow\n    const response = await ctx.sendMessage({\n      message: {\n        type: WorkerRequestType.SignVerifyAndRegisterUser,\n        payload: {\n          verification: {\n            contractId: contractId,\n            nearRpcUrl: nearRpcUrl,\n            vrfChallenge: vrfChallenge,\n          },\n          decryption: {\n            encryptedPrivateKeyData: encryptedKeyData.encryptedData,\n            encryptedPrivateKeyIv: encryptedKeyData.iv\n          },\n          registration: {\n            nearAccountId,\n            nonce: nextNonce,\n            blockHash: txBlockHash,\n            deterministicVrfPublicKey,\n            deviceNumber, // Pass device number for multi-device support\n            authenticatorOptions: authenticatorOptions ? {\n              userVerification: toEnumUserVerificationPolicy(authenticatorOptions.userVerification),\n              originPolicy: authenticatorOptions.originPolicy,\n            } : undefined\n          },\n        }\n      },\n      onEvent,\n      timeoutMs: SIGNER_WORKER_MANAGER_CONFIG.TIMEOUTS.REGISTRATION\n    });\n\n    if (isSignVerifyAndRegisterUserSuccess(response)) {\n      console.debug('WebAuthnManager: On-chain user registration transaction successful');\n      const wasmResult = response.payload;\n      return {\n        verified: wasmResult.verified,\n        registrationInfo: wasmResult.registrationInfo,\n        logs: wasmResult.logs,\n        signedTransaction: new SignedTransaction({\n          transaction: wasmResult.signedTransaction!.transaction,\n          signature: wasmResult.signedTransaction!.signature,\n          borsh_bytes: Array.from(wasmResult.signedTransaction!.borshBytes || [])\n        }),\n        preSignedDeleteTransaction: wasmResult.preSignedDeleteTransaction\n          ? new SignedTransaction({\n              transaction: wasmResult.preSignedDeleteTransaction.transaction,\n              signature: wasmResult.preSignedDeleteTransaction.signature,\n              borsh_bytes: Array.from(wasmResult.preSignedDeleteTransaction.borshBytes || [])\n            })\n          : null\n      };\n    } else {\n      console.error('WebAuthnManager: On-chain user registration transaction failed:', response);\n      throw new Error('On-chain user registration transaction failed');\n    }\n  } catch (error: any) {\n    console.error('WebAuthnManager: On-chain user registration error:', error);\n    throw error;\n  }\n}"],"mappings":";;;;;;;AAaA,eAAsB,0BAA0B,EAC9C,KACA,cACA,YACA,2BACA,eACA,kBACA,YACA,YACA,eAAe,GACf,sBACA,WAmBC;AACD,KAAI;AACF,UAAQ,KAAK;AAEb,MAAI,CAAC,iBACH,OAAM,IAAI,MAAM;AAIlB,UAAQ,MAAM,yEAAyE;EACvF,MAAM,mBAAmB,MAAM,IAAI,UAAU,WAAW,gBAAgB;AACxE,MAAI,CAAC,iBACH,OAAM,IAAI,MAAM,uCAAuC;EAGzD,MAAM,EACJ,eACA,WACA,aACA,kBACE,MAAM,IAAI,aAAa,2BAA2B;EAItD,MAAM,WAAW,MAAM,IAAI,YAAY;GACrC,SAAS;IACP,MAAM,kBAAkB;IACxB,SAAS;KACP,cAAc;MACA;MACA;MACE;;KAEhB,YAAY;MACV,yBAAyB,iBAAiB;MAC1C,uBAAuB,iBAAiB;;KAE1C,cAAc;MACZ;MACA,OAAO;MACP,WAAW;MACX;MACA;MACA,sBAAsB,uBAAuB;OAC3C,kBAAkB,6BAA6B,qBAAqB;OACpE,cAAc,qBAAqB;UACjC;;;;GAIV;GACA,WAAW,6BAA6B,SAAS;;AAGnD,MAAI,mCAAmC,WAAW;AAChD,WAAQ,MAAM;GACd,MAAM,aAAa,SAAS;AAC5B,UAAO;IACL,UAAU,WAAW;IACrB,kBAAkB,WAAW;IAC7B,MAAM,WAAW;IACjB,mBAAmB,IAAI,kBAAkB;KACvC,aAAa,WAAW,kBAAmB;KAC3C,WAAW,WAAW,kBAAmB;KACzC,aAAa,MAAM,KAAK,WAAW,kBAAmB,cAAc;;IAEtE,4BAA4B,WAAW,6BACnC,IAAI,kBAAkB;KACpB,aAAa,WAAW,2BAA2B;KACnD,WAAW,WAAW,2BAA2B;KACjD,aAAa,MAAM,KAAK,WAAW,2BAA2B,cAAc;SAE9E;;SAED;AACL,WAAQ,MAAM,mEAAmE;AACjF,SAAM,IAAI,MAAM;;UAEXA,OAAY;AACnB,UAAQ,MAAM,sDAAsD;AACpE,QAAM"}