{"version":3,"file":"useAccountInput.js","names":["targetAccountId: string","displayPostfix: string","isUsingExistingAccount: boolean"],"sources":["../../../../src/react/hooks/useAccountInput.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport {\n  type PasskeyManager,\n  toAccountId\n} from '@/index';\n\nexport interface AccountInputState {\n  inputUsername: string;\n  lastLoggedInUsername: string;\n  lastLoggedInDomain: string;\n  targetAccountId: string;\n  displayPostfix: string;\n  isUsingExistingAccount: boolean;\n  accountExists: boolean;\n  indexDBAccounts: string[];\n}\n\nexport interface UseAccountInputOptions {\n  passkeyManager: PasskeyManager;\n  relayerAccount: string;\n  useRelayer: boolean;\n  currentNearAccountId?: string | null;\n  isLoggedIn: boolean;\n}\n\nexport interface UseAccountInputReturn extends AccountInputState {\n  setInputUsername: (username: string) => void;\n  refreshAccountData: () => Promise<void>;\n}\n\nexport function useAccountInput({\n  passkeyManager,\n  relayerAccount,\n  useRelayer,\n  currentNearAccountId,\n  isLoggedIn\n}: UseAccountInputOptions): UseAccountInputReturn {\n  const [state, setState] = useState<AccountInputState>({\n    inputUsername: '',\n    lastLoggedInUsername: '',\n    lastLoggedInDomain: '',\n    targetAccountId: '',\n    displayPostfix: '',\n    isUsingExistingAccount: false,\n    accountExists: false,\n    indexDBAccounts: []\n  });\n\n  // Load IndexDB accounts and determine account info\n  const refreshAccountData = useCallback(async () => {\n    try {\n      const { accountIds, lastUsedAccountId } = await passkeyManager.getRecentLogins();\n\n      let lastUsername = '';\n      let lastDomain = '';\n\n      if (lastUsedAccountId) {\n\n        const parts = lastUsedAccountId.nearAccountId.split('.');\n        lastUsername = parts[0];\n        lastDomain = `.${parts.slice(1).join('.')}`;\n      }\n\n      setState(prevState => ({\n        ...prevState,\n        indexDBAccounts: accountIds,\n        lastLoggedInUsername: lastUsername,\n        lastLoggedInDomain: lastDomain\n      }));\n\n    } catch (error) {\n      console.warn('Error loading account data:', error);\n    }\n  }, [passkeyManager]);\n\n  // Update derived state when inputs change\n  const updateDerivedState = useCallback((username: string, accounts: string[]) => {\n    if (!username.trim()) {\n      setState(prevState => ({\n        ...prevState,\n        targetAccountId: '',\n        displayPostfix: '',\n        isUsingExistingAccount: false,\n        accountExists: false\n      }));\n      return;\n    }\n\n    // Check if username matches any existing account in IndexDB\n    const existingAccount = accounts.find(accountId =>\n      accountId.split('.')[0].toLowerCase() === username.toLowerCase()\n    );\n\n    let targetAccountId: string;\n    let displayPostfix: string;\n    let isUsingExistingAccount: boolean;\n\n    if (existingAccount) {\n      // Use existing account's full ID\n      targetAccountId = existingAccount;\n      const parts = existingAccount.split('.');\n      displayPostfix = `.${parts.slice(1).join('.')}`;\n      isUsingExistingAccount = true;\n    } else {\n      // New account: use relayer or testnet based on useRelayer setting\n      const postfix = useRelayer ? relayerAccount : 'testnet';\n      targetAccountId = `${username}.${postfix}`;\n      displayPostfix = `.${postfix}`;\n      isUsingExistingAccount = false;\n    }\n\n    setState(prevState => ({\n      ...prevState,\n      targetAccountId,\n      displayPostfix,\n      isUsingExistingAccount\n    }));\n\n    // Check if account has credentials\n    checkAccountExists(targetAccountId);\n  }, [useRelayer, relayerAccount, passkeyManager]);\n\n  // Check if account has passkey credentials\n  const checkAccountExists = useCallback(async (accountId: string) => {\n    if (!accountId) {\n      setState(prevState => ({ ...prevState, accountExists: false }));\n      return;\n    }\n\n    try {\n      const hasCredential = await passkeyManager.hasPasskeyCredential(toAccountId(accountId));\n      setState(prevState => ({ ...prevState, accountExists: hasCredential }));\n    } catch (error) {\n      console.warn('Error checking credentials:', error);\n      setState(prevState => ({ ...prevState, accountExists: false }));\n    }\n  }, [passkeyManager]);\n\n  // Handle username input changes\n  const setInputUsername = useCallback((username: string) => {\n    setState(prevState => ({ ...prevState, inputUsername: username }));\n    updateDerivedState(username, state.indexDBAccounts);\n  }, [state.indexDBAccounts, updateDerivedState]);\n\n  // onInitialMount: Load last logged in user and prefill\n  useEffect(() => {\n    const initializeAccountInput = async () => {\n      await refreshAccountData();\n\n      if (isLoggedIn && currentNearAccountId) {\n        // User is logged in, show their username\n        const username = currentNearAccountId.split('.')[0];\n        setState(prevState => ({ ...prevState, inputUsername: username }));\n      } else {\n        // No logged-in user, try to get last used account\n        const { lastUsedAccountId } = await passkeyManager.getRecentLogins();\n        if (lastUsedAccountId) {\n          const username = lastUsedAccountId.nearAccountId.split('.')[0];\n          setState(prevState => ({ ...prevState, inputUsername: username }));\n        }\n      }\n    };\n\n    initializeAccountInput();\n  }, [passkeyManager, isLoggedIn, currentNearAccountId, passkeyManager]);\n\n  // onLogout: Reset to last used account\n  useEffect(() => {\n    const handleLogoutReset = async () => {\n      // Only reset if user just logged out (isLoggedIn is false but we had a nearAccountId before)\n      if (!isLoggedIn && !currentNearAccountId) {\n        try {\n        const { lastUsedAccountId } = await passkeyManager.getRecentLogins();\n          if (lastUsedAccountId) {\n            const username = lastUsedAccountId.nearAccountId.split('.')[0];\n            setState(prevState => ({ ...prevState, inputUsername: username }));\n          }\n        } catch (error) {\n          console.warn('Error resetting username after logout:', error);\n        }\n      }\n    };\n\n    handleLogoutReset();\n  }, [isLoggedIn, currentNearAccountId, passkeyManager]);\n\n  // Update derived state when dependencies change\n  useEffect(() => {\n    updateDerivedState(state.inputUsername, state.indexDBAccounts);\n  }, [state.inputUsername, state.indexDBAccounts, updateDerivedState]);\n\n  return {\n    ...state,\n    setInputUsername,\n    refreshAccountData\n  };\n}\n"],"mappings":"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"}