{"version":3,"file":"index.js","names":["PasskeyAuthMenuInner: React.FC<SignupMenuProps>","ctx: any","passkeyManager: any","preferredDefaultMode: AuthMenuMode","QRCodeIcon","PasskeyAuthMenu: React.FC<SignupMenuProps>"],"sources":["../../../../../src/react/components/PasskeyAuthMenu/index.tsx"],"sourcesContent":["import React from 'react';\nimport './PasskeyAuthMenu.css';\nimport { ThemeScope, useTheme } from '../theme';\nimport { usePasskeyContext } from '../../context';\nimport { ArrowLeftIcon } from './icons';\nimport { SocialProviders } from './SocialProviders';\nimport { SegmentedControl } from './SegmentedControl';\nimport { PasskeyInput } from './PasskeyInput';\nimport { ContentSwitcher } from './ContentSwitcher';\nimport { ShowQRCode } from '../ShowQRCode';\nimport QRCodeIcon from '../QRCodeIcon';\nimport { useAuthMenuMode } from './useAuthMenuMode';\nimport { useProceedEligibility } from './useProceedEligibility';\nimport type { LinkDeviceFlow } from '../../../core/PasskeyManager/linkDevice';\n\nexport type AuthMenuMode = 'register' | 'login' | 'recover';\n\nexport interface SignupMenuProps {\n  onLogin?: () => void;\n  onRegister?: () => void;\n  onRecoverAccount?: () => void;\n  deviceLinkingFlow?: LinkDeviceFlow;\n\n  /** Optional custom header element rendered when not waiting */\n  header?: React.ReactElement;\n  defaultMode?: AuthMenuMode;\n  style?: React.CSSProperties;\n  className?: string;\n  /**\n   * Optional social login hooks. Provide a function per provider that returns\n   * the derived username (e.g., email/handle) after the external auth flow.\n   * If omitted or all undefined, the social row is hidden.\n   */\n  socialLogin?: {\n    google?: () => string;\n    x?: () => string;\n    apple?: () => string;\n  };\n  // /** Optional controlled input value for the username/email field */\n  // userInput?: string;\n  // /** Optional change handler to control the input */\n  // onUserInputChange?: (value: string) => void;\n  /** Text to show inline after the input (e.g., .testnet) */\n  postfixText?: string;\n  /** Whether the account domain/postfix corresponds to an existing account */\n  isUsingExistingAccount?: boolean;\n  /** Whether the current account exists (used to enable/disable proceed) */\n  accountExists?: boolean;\n  /** Optionally pass secure-context flag; defaults to window.isSecureContext */\n  isSecureContext?: boolean;\n}\n\n/**\n * - Uses theme tokens from design-tokens.ts via ThemeProvider/useTheme\n * - Segmented Register/Login with animated highlight\n * - Arrow proceeds to a simple \"Waiting for Passkey\" view with spinner\n */\nconst PasskeyAuthMenuInner: React.FC<SignupMenuProps> = ({\n  defaultMode,\n  onLogin,\n  onRegister,\n  style,\n  className,\n  header,\n  socialLogin,\n  // userInput,\n  // onUserInputChange,\n  postfixText,\n  isUsingExistingAccount,\n  accountExists,\n  isSecureContext,\n  onRecoverAccount,\n  deviceLinkingFlow,\n}) => {\n  const { tokens, isDark } = useTheme();\n  // Access Passkey context if available (tolerate absence)\n  let ctx: any = null;\n  try {\n    ctx = usePasskeyContext();\n  } catch {\n    ctx = null;\n  }\n  const passkeyManager: any = ctx?.passkeyManager || null;\n  // Resolve default mode: prefer prop, otherwise infer from account existence\n  const accountExistsResolved = (typeof accountExists === 'boolean')\n    ? accountExists\n    : (ctx?.accountInputState?.accountExists ?? false);\n  const preferredDefaultMode: AuthMenuMode = (defaultMode ?? (accountExistsResolved ? 'login' : 'register')) as AuthMenuMode;\n\n  const [waiting, setWaiting] = React.useState(false);\n  const [showScanDevice, setShowScanDevice] = React.useState(false);\n  const [internalUserInput, setInternalUserInput] = React.useState('');\n  // Hover/press states replaced by CSS :hover/:active\n\n  // const controlled = typeof userInput === 'string' && typeof onUserInputChange === 'function';\n  const usingContext = !!ctx;\n  const currentValue = usingContext\n    ? (ctx.accountInputState?.inputUsername || '')\n    : internalUserInput;\n\n  const setCurrentValue = usingContext\n    ? (ctx.setInputUsername as (v: string) => void)\n    : setInternalUserInput;\n\n  const secure = typeof isSecureContext === 'boolean' ? isSecureContext : (typeof window !== 'undefined' ? window.isSecureContext : true);\n\n  const postfixTextResolved = typeof postfixText === 'string'\n    ? postfixText\n    : (ctx?.accountInputState?.displayPostfix ?? undefined);\n\n  const isUsingExistingAccountResolved = (typeof isUsingExistingAccount === 'boolean')\n    ? isUsingExistingAccount\n    : (ctx?.accountInputState?.isUsingExistingAccount ?? undefined);\n\n  const {\n    mode,\n    setMode,\n    title,\n    onSegmentChange,\n    onInputChange,\n    resetToDefault\n  } = useAuthMenuMode({\n    defaultMode: preferredDefaultMode,\n    accountExists: accountExistsResolved,\n    passkeyManager,\n    currentValue,\n    setCurrentValue,\n  });\n\n  const { canShowContinue, canSubmit } = useProceedEligibility({\n    mode,\n    currentValue,\n    accountExists: accountExistsResolved,\n    secure,\n  });\n\n  const onArrowClick = async () => {\n    if (!canSubmit) return;\n\n    // Immediately show waiting state (no delayed timer)\n    setWaiting(true);\n    // No transitions; switch immediately\n\n    try {\n      if (mode === 'recover') {\n        await onRecoverAccount?.();\n      } else if (mode === 'login') {\n        await onLogin?.();\n      } else {\n        await onRegister?.();\n      }\n    } catch (error) {\n      onResetToStart();\n    }\n  };\n\n  // Handle Enter key to trigger continue button\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Enter' && !waiting && canShowContinue) {\n        event.preventDefault();\n        onArrowClick();\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [waiting, canShowContinue, onArrowClick]);\n\n  const onResetToStart = () => {\n    setWaiting(false);\n    setShowScanDevice(false);\n    // Reset mode to appropriate default based on account existence\n    resetToDefault();\n    setCurrentValue('');\n  };\n\n  const segActiveBg = isDark ? 'rgba(255,255,255,0.12)' : 'rgba(0,0,0,0.08)';\n\n  return (\n    <div\n      className={`w3a-signup-menu-root${className ? ` ${className}` : ''}`}\n      data-mode={mode}\n      data-waiting={waiting}\n      data-scan-device={showScanDevice}\n      style={style}\n    >\n      <ContentSwitcher\n        waiting={waiting}\n        showScanDevice={showScanDevice}\n        backButton={\n          <button\n            aria-label=\"Back\"\n            onClick={onResetToStart}\n            className={`w3a-back-button${(waiting || showScanDevice) ? ' is-visible' : ''}`}\n          >\n            <ArrowLeftIcon size={18} strokeWidth={2.25} style={{ display: 'block' }} />\n          </button>\n        }\n        scanDeviceContent={\n          <ShowQRCode\n            isOpen={showScanDevice}\n            onClose={() => setShowScanDevice(false)}\n            onEvent={(event) => {\n              console.log('ShowQRCode event:', event);\n            }}\n            onError={(error) => {\n              console.error('ShowQRCode error:', error);\n            }}\n            deviceLinkingFlow={deviceLinkingFlow}\n          />\n        }\n      >\n\n        {/* Header */}\n        <div className=\"w3a-header\">\n          {header ?? (\n            <div>\n              <div className=\"w3a-title\">{title.title}</div>\n              <div className=\"w3a-subhead\">{title.subtitle}</div>\n            </div>\n          )}\n        </div>\n\n        {/* Social providers row (optional) */}\n        <SocialProviders socialLogin={socialLogin} />\n\n        {/* Passkey row */}\n        <PasskeyInput\n          value={currentValue}\n          onChange={onInputChange}\n          placeholder={'Enter your username'}\n          postfixText={postfixTextResolved}\n          isUsingExistingAccount={isUsingExistingAccountResolved}\n          canProceed={canShowContinue}\n          onProceed={onArrowClick}\n          variant=\"both\"\n          primaryLabel={mode === 'login' ? 'Login' : mode === 'recover' ? 'Recover account' : 'Register'}\n          mode={mode}\n          secure={secure}\n        />\n\n        {/* Segmented control: Register | Login */}\n        <SegmentedControl mode={mode} onChange={onSegmentChange} activeBg={segActiveBg} />\n\n        {/* Help copy under segments */}\n        <div className=\"w3a-seg-help-row\">\n          <div className=\"w3a-seg-help\" aria-live=\"polite\">\n            {mode === 'login' && 'Sign in with your passkey this device'}\n            {mode === 'register' && 'Create a new account'}\n            {mode === 'recover' && 'Recover an account (iCloud/Chrome passkey sync)'}\n          </div>\n        </div>\n\n        {/* Scan and Link Device button */}\n        <div className=\"w3a-scan-device-row\">\n          <div className=\"w3a-section-divider\">\n            <span className=\"w3a-section-divider-text\">Already have an account?</span>\n          </div>\n          <button\n            onClick={() => setShowScanDevice(true)}\n            className=\"w3a-link-device-btn\"\n            onMouseEnter={(e) => {\n              e.currentTarget.style.background = tokens.colors.colorSurface2;\n              e.currentTarget.style.boxShadow = tokens.shadows.md;\n            }}\n            onMouseLeave={(e) => {\n              e.currentTarget.style.background = tokens.colors.colorSurface;\n              e.currentTarget.style.boxShadow = tokens.shadows.sm;\n            }}\n          >\n            <QRCodeIcon width={18} height={18} strokeWidth={2} />\n            Scan and Link Device\n          </button>\n        </div>\n\n      </ContentSwitcher>\n    </div>\n  );\n};\n\nexport const PasskeyAuthMenu: React.FC<SignupMenuProps> = (props) => (\n  <ThemeScope>\n    <PasskeyAuthMenuInner {...props} />\n  </ThemeScope>\n);\n\nexport default PasskeyAuthMenu;\n"],"mappings":"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"}