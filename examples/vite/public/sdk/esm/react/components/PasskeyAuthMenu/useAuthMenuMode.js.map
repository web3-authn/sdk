{"version":3,"file":"useAuthMenuMode.js","names":["preferredDefaultMode: AuthMenuMode","mode"],"sources":["../../../../../src/react/components/PasskeyAuthMenu/useAuthMenuMode.ts"],"sourcesContent":["import React from 'react';\nimport { AuthMenuMode } from '.';\nimport { title } from 'process';\nimport { get } from 'http';\n\nexport interface UseAuthMenuModeArgs {\n  defaultMode?: AuthMenuMode;\n  accountExists: boolean;\n  passkeyManager?: {\n    getRecentLogins: () => Promise<{\n      lastUsedAccountId?: { nearAccountId?: string } | null;\n    }>;\n  } | null;\n  currentValue: string;\n  setCurrentValue: (v: string) => void;\n}\n\nexport interface UseAuthMenuModeResult {\n  mode: AuthMenuMode;\n  setMode: React.Dispatch<React.SetStateAction<AuthMenuMode>>;\n  title: { title: string; subtitle: string };\n  onSegmentChange: (next: AuthMenuMode) => void;\n  onInputChange: (val: string) => void;\n  resetToDefault: () => void;\n}\n\nexport function useAuthMenuMode({\n  defaultMode,\n  accountExists,\n  passkeyManager,\n  currentValue,\n  setCurrentValue,\n}: UseAuthMenuModeArgs): UseAuthMenuModeResult {\n  const preferredDefaultMode: AuthMenuMode = (defaultMode ?? (accountExists ? 'login' : 'register')) as AuthMenuMode;\n  const [mode, setMode] = React.useState<AuthMenuMode>(preferredDefaultMode);\n  const [title, setTitle] = React.useState<{\n    title: string;\n    subtitle: string;\n  }>({ title: '', subtitle: '' });\n\n  // Track if current input was auto-prefilled from IndexedDB and what value\n  const prefilledFromIdbRef = React.useRef(false);\n  const prefilledValueRef = React.useRef<string>('');\n  // Track last mode to detect transitions into 'login'\n  const prevModeRef = React.useRef<AuthMenuMode | null>(null);\n\n  // When switching to the \"login\" segment, attempt to prefill last used account\n  React.useEffect(() => {\n    let cancelled = false;\n    const enteringLogin = mode === 'login' && prevModeRef.current !== 'login';\n    if (enteringLogin && passkeyManager) {\n      (async () => {\n        try {\n          const { lastUsedAccountId } = await passkeyManager.getRecentLogins();\n          if (!cancelled && lastUsedAccountId) {\n            const username = (lastUsedAccountId.nearAccountId || '').split('.')[0] || '';\n            // Only populate if empty on entry to login segment\n            if (!currentValue || currentValue.trim().length === 0) {\n              setCurrentValue(username);\n              prefilledFromIdbRef.current = true;\n              prefilledValueRef.current = username;\n            }\n          }\n        } catch {\n          // ignore if IndexedDB is unavailable\n        }\n      })();\n    }\n    prevModeRef.current = mode;\n    return () => { cancelled = true; };\n  }, [mode, passkeyManager, currentValue, setCurrentValue]);\n\n  const getTitleForMode = (mode: AuthMenuMode): { title: string; subtitle: string } => {\n    if (mode === 'login') {\n      return {\n        title: 'Login',\n        subtitle: 'Fast passwordless, keyless login'\n      };\n    } else if (mode === 'register') {\n      return {\n        title: 'Register Account',\n        subtitle: 'Create a wallet with a Passkey'\n      };\n    } else if (mode === 'recover') {\n      return {\n        title: 'Recover Account',\n        subtitle: 'Restore a wallet with Passkey',\n      };\n    } else {\n      return {\n        title: 'Login',\n        subtitle: 'Fast passwordless, keyless login'\n      };\n    }\n  }\n\n  React.useEffect(() => {\n    setTitle(getTitleForMode(mode));\n  }, [mode]);\n\n  const onSegmentChange = (nextMode: AuthMenuMode) => {\n    if (mode === 'login' && nextMode !== 'login') {\n      // Clear only if the value was auto-prefilled and remains unchanged\n      if (prefilledFromIdbRef.current && currentValue === prefilledValueRef.current) {\n        setCurrentValue('');\n      }\n      prefilledFromIdbRef.current = false;\n      prefilledValueRef.current = '';\n    }\n    setMode(nextMode);\n    setTitle(getTitleForMode(nextMode));\n  };\n\n  const onInputChange = (val: string) => {\n    if (val !== prefilledValueRef.current) {\n      prefilledFromIdbRef.current = false;\n    }\n    setCurrentValue(val);\n  };\n\n  const resetToDefault = () => {\n    // Reset mode to appropriate default based on account existence\n    setMode(accountExists ? 'login' : 'register');\n    setTitle(getTitleForMode(mode));\n    // Clear any prefill markers\n    prefilledFromIdbRef.current = false;\n    prefilledValueRef.current = '';\n  };\n\n  return { mode, setMode, title, onSegmentChange, onInputChange, resetToDefault };\n}\n\nexport default useAuthMenuMode;\n"],"mappings":";;;AA0BA,SAAgB,gBAAgB,EAC9B,aACA,eACA,gBACA,cACA,mBAC6C;CAC7C,MAAMA,uBAAsC,gBAAgB,gBAAgB,UAAU;CACtF,MAAM,CAAC,MAAM,WAAW,MAAM,SAAuB;CACrD,MAAM,CAAC,OAAO,YAAY,MAAM,SAG7B;EAAE,OAAO;EAAI,UAAU;;CAG1B,MAAM,sBAAsB,MAAM,OAAO;CACzC,MAAM,oBAAoB,MAAM,OAAe;CAE/C,MAAM,cAAc,MAAM,OAA4B;AAGtD,OAAM,gBAAgB;EACpB,IAAI,YAAY;EAChB,MAAM,gBAAgB,SAAS,WAAW,YAAY,YAAY;AAClE,MAAI,iBAAiB,eACnB,EAAC,YAAY;AACX,OAAI;IACF,MAAM,EAAE,sBAAsB,MAAM,eAAe;AACnD,QAAI,CAAC,aAAa,mBAAmB;KACnC,MAAM,YAAY,kBAAkB,iBAAiB,IAAI,MAAM,KAAK,MAAM;AAE1E,SAAI,CAAC,gBAAgB,aAAa,OAAO,WAAW,GAAG;AACrD,sBAAgB;AAChB,0BAAoB,UAAU;AAC9B,wBAAkB,UAAU;;;WAG1B;;AAKZ,cAAY,UAAU;AACtB,eAAa;AAAE,eAAY;;IAC1B;EAAC;EAAM;EAAgB;EAAc;;CAExC,MAAM,mBAAmB,WAA4D;AACnF,MAAIC,WAAS,QACX,QAAO;GACL,OAAO;GACP,UAAU;;WAEHA,WAAS,WAClB,QAAO;GACL,OAAO;GACP,UAAU;;WAEHA,WAAS,UAClB,QAAO;GACL,OAAO;GACP,UAAU;;MAGZ,QAAO;GACL,OAAO;GACP,UAAU;;;AAKhB,OAAM,gBAAgB;AACpB,WAAS,gBAAgB;IACxB,CAAC;CAEJ,MAAM,mBAAmB,aAA2B;AAClD,MAAI,SAAS,WAAW,aAAa,SAAS;AAE5C,OAAI,oBAAoB,WAAW,iBAAiB,kBAAkB,QACpE,iBAAgB;AAElB,uBAAoB,UAAU;AAC9B,qBAAkB,UAAU;;AAE9B,UAAQ;AACR,WAAS,gBAAgB;;CAG3B,MAAM,iBAAiB,QAAgB;AACrC,MAAI,QAAQ,kBAAkB,QAC5B,qBAAoB,UAAU;AAEhC,kBAAgB;;CAGlB,MAAM,uBAAuB;AAE3B,UAAQ,gBAAgB,UAAU;AAClC,WAAS,gBAAgB;AAEzB,sBAAoB,UAAU;AAC9B,oBAAkB,UAAU;;AAG9B,QAAO;EAAE;EAAM;EAAS;EAAO;EAAiB;EAAe"}