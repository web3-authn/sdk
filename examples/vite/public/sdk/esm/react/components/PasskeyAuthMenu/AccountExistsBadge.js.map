{"version":3,"file":"AccountExistsBadge.js","names":["AccountExistsBadge: React.FC<AccountExistsBadgeProps>"],"sources":["../../../../../src/react/components/PasskeyAuthMenu/AccountExistsBadge.tsx"],"sourcesContent":["import React from 'react';\nimport { AuthMenuMode } from './index';\nimport { useTheme } from '../theme';\n\nexport interface AccountExistsBadgeProps {\n  /** Whether the account domain/postfix corresponds to an existing account */\n  isUsingExistingAccount?: boolean;\n  /** Current signup mode */\n  mode: AuthMenuMode;\n  /** Whether the current context is secure (HTTPS) */\n  secure?: boolean;\n  /** Optional extra class name for message styling/location */\n  className?: string;\n  /** Optional id for aria-describedby */\n  id?: string;\n}\n\n/**\n * AccountExistsBadge renders a small inline status message with tone classes.\n */\nexport const AccountExistsBadge: React.FC<AccountExistsBadgeProps> = ({\n  isUsingExistingAccount,\n  mode,\n  secure = true,\n  className,\n  id,\n}) => {\n  // Ensure theme variables applied (not directly used)\n  useTheme();\n\n  type Tone = 'error' | 'success' | 'neutral';\n  const getStatus = (): { message: string; tone: Tone } => {\n    if (mode === 'register') {\n      if (!secure) return { message: 'HTTPS required', tone: 'error' };\n      if (isUsingExistingAccount) return { message: 'name taken', tone: 'error' };\n      return { message: '', tone: 'neutral' };\n    }\n    if (mode === 'login' || mode === 'recover') {\n      if (isUsingExistingAccount) return { message: '', tone: 'success' };\n      return { message: 'Account not found', tone: 'error' };\n    }\n    return { message: '', tone: 'neutral' };\n  };\n\n  const { message, tone } = getStatus();\n  const hasContent = message && message.trim().length > 0;\n  const [visible, setVisible] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!hasContent) {\n      setVisible(false);\n      return;\n    }\n    setVisible(true);\n    const t = setTimeout(() => setVisible(false), 3000);\n    return () => clearTimeout(t);\n  }, [hasContent, message]);\n\n  if (!hasContent) {\n    return <></>;\n  }\n\n  const toneClass = tone === 'error'\n    ? 'is-error'\n    : tone === 'success'\n      ? 'is-success'\n      : '';\n\n  const classes = [\n    'w3a-tooltip',\n    toneClass,\n    visible ? 'is-visible' : '', className\n  ].filter(Boolean).join(' ');\n\n  return (\n    <div id={id} className={classes} role=\"status\" aria-live=\"polite\">\n      {message}\n    </div>\n  );\n};\n\nexport default AccountExistsBadge;\n"],"mappings":";;;;;;;;AAoBA,MAAaA,sBAAyD,EACpE,wBACA,MACA,SAAS,MACT,WACA,SACI;AAEJ;CAGA,MAAM,kBAAmD;AACvD,MAAI,SAAS,YAAY;AACvB,OAAI,CAAC,OAAQ,QAAO;IAAE,SAAS;IAAkB,MAAM;;AACvD,OAAI,uBAAwB,QAAO;IAAE,SAAS;IAAc,MAAM;;AAClE,UAAO;IAAE,SAAS;IAAI,MAAM;;;AAE9B,MAAI,SAAS,WAAW,SAAS,WAAW;AAC1C,OAAI,uBAAwB,QAAO;IAAE,SAAS;IAAI,MAAM;;AACxD,UAAO;IAAE,SAAS;IAAqB,MAAM;;;AAE/C,SAAO;GAAE,SAAS;GAAI,MAAM;;;CAG9B,MAAM,EAAE,SAAS,SAAS;CAC1B,MAAM,aAAa,WAAW,QAAQ,OAAO,SAAS;CACtD,MAAM,CAAC,SAAS,cAAc,MAAM,SAAS;AAE7C,OAAM,gBAAgB;AACpB,MAAI,CAAC,YAAY;AACf,cAAW;AACX;;AAEF,aAAW;EACX,MAAM,IAAI,iBAAiB,WAAW,QAAQ;AAC9C,eAAa,aAAa;IACzB,CAAC,YAAY;AAEhB,KAAI,CAAC,WACH,QAAO;CAGT,MAAM,YAAY,SAAS,UACvB,aACA,SAAS,YACP,eACA;CAEN,MAAM,UAAU;EACd;EACA;EACA,UAAU,eAAe;EAAI;GAC7B,OAAO,SAAS,KAAK;AAEvB,QACE,oBAAC;EAAQ;EAAI,WAAW;EAAS,MAAK;EAAS,aAAU;YACtD"}