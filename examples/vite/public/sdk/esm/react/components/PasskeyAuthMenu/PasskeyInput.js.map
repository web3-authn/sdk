{"version":3,"file":"PasskeyInput.js","names":["PasskeyInput: React.FC<PasskeyInputProps>","ArrowButton: React.FC<{\n  onClick: () => void;\n  disabled: boolean;\n}>"],"sources":["../../../../../src/react/components/PasskeyAuthMenu/PasskeyInput.tsx"],"sourcesContent":["import React from 'react';\nimport { ArrowUpIcon } from './icons';\nimport TouchIcon from '../ProfileSettingsButton/TouchIcon';\n// Refactored: React-driven postfix positioning (no imperative DOM writes)\nimport { AuthMenuMode } from './index';\nimport { AccountExistsBadge } from './AccountExistsBadge';\n\nexport interface PasskeyInputProps {\n  value: string;\n  onChange: (value: string) => void;\n  placeholder: string;\n  postfixText?: string;\n  isUsingExistingAccount?: boolean;\n  canProceed: boolean;\n  onProceed: () => void;\n  /** Controls which proceed controls render */\n  variant?: 'arrow' | 'label' | 'both';\n  /** Text for the primary labeled button (e.g., Login/Register) */\n  primaryLabel?: string;\n  /** Current signup mode for status badge */\n  mode?: AuthMenuMode;\n  /** Whether the current context is secure (HTTPS) */\n  secure?: boolean;\n}\n\nexport const PasskeyInput: React.FC<PasskeyInputProps> = ({\n  value,\n  onChange,\n  placeholder,\n  postfixText,\n  isUsingExistingAccount,\n  canProceed,\n  onProceed,\n  variant = 'arrow',\n  primaryLabel,\n  mode,\n  secure,\n}) => {\n  const inputRef = React.useRef<HTMLInputElement | null>(null);\n  const measurerRef = React.useRef<HTMLSpanElement | null>(null);\n  // caretIndex retained initially but not used for measuring anymore\n  const [caretIndex, setCaretIndex] = React.useState<number>(value.length);\n  const [postfixLeft, setPostfixLeft] = React.useState<number>(0);\n  const [measured, setMeasured] = React.useState<boolean>(false);\n  const [padAndBorderLeft, setPadAndBorderLeft] = React.useState<number>(0);\n  const statusId = React.useId();\n\n  // Read static paddings from computed style once\n  React.useLayoutEffect(() => {\n    const input = inputRef.current;\n    if (!input) return;\n    const cs = window.getComputedStyle(input);\n    const pl = parseFloat(cs.paddingLeft) || 0;\n    const bl = parseFloat(cs.borderLeftWidth) || 0;\n    setPadAndBorderLeft(pl + bl);\n  }, []);\n\n  const onEnter = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') onProceed();\n  };\n\n  const updateCaret = () => {\n    const el = inputRef.current;\n    if (!el) return;\n    const ci = el.selectionStart ?? el.value.length;\n    setCaretIndex(ci);\n  };\n\n  // Measure width of full username via hidden measurer\n  React.useLayoutEffect(() => {\n    const measurer = measurerRef.current;\n    const input = inputRef.current;\n    if (!measurer || !input) return;\n    const cs = window.getComputedStyle(input);\n    let text = value;\n    switch (cs.textTransform) {\n      case 'uppercase': text = text.toUpperCase(); break;\n      case 'lowercase': text = text.toLowerCase(); break;\n      case 'capitalize': text = text.replace(/\\b(\\p{L})/gu, (m) => m.toUpperCase()); break;\n    }\n    measurer.textContent = text;\n    const w = measurer.offsetWidth || 0;\n    setPostfixLeft(padAndBorderLeft + w + 1);\n    setMeasured(true);\n  }, [value, padAndBorderLeft]);\n\n  // Re-measure after fonts are ready just in case\n  React.useEffect(() => {\n    const measurer = measurerRef.current;\n    const input = inputRef.current;\n    // @ts-ignore fonts API optional\n    const fonts = (document as any)?.fonts;\n    if (measurer && input && fonts && fonts.ready) {\n      fonts.ready.then(() => {\n        // trigger layout effect by forcing state update\n        setPadAndBorderLeft((x) => x);\n      }).catch(() => {});\n    }\n  }, []);\n\n  return (\n    <div className=\"w3a-passkey-row\">\n      <div className={`w3a-input-pill${canProceed ? ' is-enabled' : ''}`}>\n        <div className=\"w3a-input-wrap\">\n          {/* Hidden measurer to compute width up to caret; mirrors input font */}\n          <span ref={measurerRef} aria-hidden className=\"w3a-measurer\" />\n          <input\n            ref={inputRef}\n            type=\"text\"\n            value={value}\n            onChange={(e) => { onChange(e.target.value); }}\n            onKeyDown={onEnter}\n            onKeyUp={updateCaret}\n            onClick={updateCaret}\n            onSelect={updateCaret}\n            placeholder={placeholder}\n            className=\"w3a-input\"\n            aria-describedby={statusId}\n          />\n          {postfixText && value.length > 0 && (\n            <span\n              title={isUsingExistingAccount ? 'Using existing account domain' : 'New account domain'}\n              className={`w3a-postfix${isUsingExistingAccount ? ' is-existing' : ''}`}\n              style={{ left: `${postfixLeft}px`, visibility: measured ? 'visible' : 'hidden' }}\n            >\n              {postfixText}\n            </span>\n          )}\n          {mode && typeof secure === 'boolean' && (\n            <AccountExistsBadge\n              id={statusId}\n              isUsingExistingAccount={isUsingExistingAccount}\n              mode={mode}\n              secure={secure}\n            />\n          )}\n        </div>\n      </div>\n      <ArrowButton onClick={onProceed} disabled={!canProceed} />\n    </div>\n  );\n};\n\nconst ArrowButton: React.FC<{\n  onClick: () => void;\n  disabled: boolean;\n}> = ({ onClick, disabled }) => {\n  return (\n    <button\n      aria-label=\"Continue\"\n      onClick={onClick}\n      className={`w3a-arrow-btn${!disabled ? ' is-enabled' : ''}`}\n      disabled={disabled}\n    >\n      {!disabled && (\n        <ArrowUpIcon\n          size={24}\n          strokeWidth={2.5}\n          color=\"#ffffff\"\n          style={{ display: 'block', transition: 'transform 200ms, width 200ms, height 200ms' }}\n        />\n      )}\n    </button>\n  )\n};\n\nexport default PasskeyInput;\n"],"mappings":";;;;;;AAyBA,MAAaA,gBAA6C,EACxD,OACA,UACA,aACA,aACA,wBACA,YACA,WACA,UAAU,SACV,cACA,MACA,aACI;CACJ,MAAM,WAAW,MAAM,OAAgC;CACvD,MAAM,cAAc,MAAM,OAA+B;CAEzD,MAAM,CAAC,YAAY,iBAAiB,MAAM,SAAiB,MAAM;CACjE,MAAM,CAAC,aAAa,kBAAkB,MAAM,SAAiB;CAC7D,MAAM,CAAC,UAAU,eAAe,MAAM,SAAkB;CACxD,MAAM,CAAC,kBAAkB,uBAAuB,MAAM,SAAiB;CACvE,MAAM,WAAW,MAAM;AAGvB,OAAM,sBAAsB;EAC1B,MAAM,QAAQ,SAAS;AACvB,MAAI,CAAC,MAAO;EACZ,MAAM,KAAK,OAAO,iBAAiB;EACnC,MAAM,KAAK,WAAW,GAAG,gBAAgB;EACzC,MAAM,KAAK,WAAW,GAAG,oBAAoB;AAC7C,sBAAoB,KAAK;IACxB;CAEH,MAAM,WAAW,MAA6C;AAC5D,MAAI,EAAE,QAAQ,QAAS;;CAGzB,MAAM,oBAAoB;EACxB,MAAM,KAAK,SAAS;AACpB,MAAI,CAAC,GAAI;EACT,MAAM,KAAK,GAAG,kBAAkB,GAAG,MAAM;AACzC,gBAAc;;AAIhB,OAAM,sBAAsB;EAC1B,MAAM,WAAW,YAAY;EAC7B,MAAM,QAAQ,SAAS;AACvB,MAAI,CAAC,YAAY,CAAC,MAAO;EACzB,MAAM,KAAK,OAAO,iBAAiB;EACnC,IAAI,OAAO;AACX,UAAQ,GAAG,eAAX;GACE,KAAK;AAAa,WAAO,KAAK;AAAe;GAC7C,KAAK;AAAa,WAAO,KAAK;AAAe;GAC7C,KAAK;AAAc,WAAO,KAAK,QAAQ,gBAAgB,MAAM,EAAE;AAAgB;;AAEjF,WAAS,cAAc;EACvB,MAAM,IAAI,SAAS,eAAe;AAClC,iBAAe,mBAAmB,IAAI;AACtC,cAAY;IACX,CAAC,OAAO;AAGX,OAAM,gBAAgB;EACpB,MAAM,WAAW,YAAY;EAC7B,MAAM,QAAQ,SAAS;EAEvB,MAAM,QAAS,UAAkB;AACjC,MAAI,YAAY,SAAS,SAAS,MAAM,MACtC,OAAM,MAAM,WAAW;AAErB,wBAAqB,MAAM;KAC1B,YAAY;IAEhB;AAEH,QACE,qBAAC;EAAI,WAAU;aACb,oBAAC;GAAI,WAAW,iBAAiB,aAAa,gBAAgB;aAC5D,qBAAC;IAAI,WAAU;;KAEb,oBAAC;MAAK,KAAK;MAAa;MAAY,WAAU;;KAC9C,oBAAC;MACC,KAAK;MACL,MAAK;MACE;MACP,WAAW,MAAM;AAAE,gBAAS,EAAE,OAAO;;MACrC,WAAW;MACX,SAAS;MACT,SAAS;MACT,UAAU;MACG;MACb,WAAU;MACV,oBAAkB;;KAEnB,eAAe,MAAM,SAAS,KAC7B,oBAAC;MACC,OAAO,yBAAyB,kCAAkC;MAClE,WAAW,cAAc,yBAAyB,iBAAiB;MACnE,OAAO;OAAE,MAAM,GAAG,YAAY;OAAK,YAAY,WAAW,YAAY;;gBAErE;;KAGJ,QAAQ,OAAO,WAAW,aACzB,oBAAC;MACC,IAAI;MACoB;MAClB;MACE;;;;MAKhB,oBAAC;GAAY,SAAS;GAAW,UAAU,CAAC;;;;AAKlD,MAAMC,eAGA,EAAE,SAAS,eAAe;AAC9B,QACE,oBAAC;EACC,cAAW;EACF;EACT,WAAW,gBAAgB,CAAC,WAAW,gBAAgB;EAC7C;YAET,CAAC,YACA,oBAAC;GACC,MAAM;GACN,aAAa;GACb,OAAM;GACN,OAAO;IAAE,SAAS;IAAS,YAAY"}