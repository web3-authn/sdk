{"version":3,"file":"ShowQRCode2.js","names":["device2Flow: LinkDeviceFlow"],"sources":["../../../../src/react/components/ShowQRCode.tsx"],"sourcesContent":["import { useState, useRef, useEffect } from 'react'\n\nimport { usePasskeyContext } from '../context'\nimport type { LinkDeviceFlow } from '../../core/PasskeyManager/linkDevice'\nimport { DeviceLinkingSSEEvent, DeviceLinkingStatus, DeviceLinkingPhase } from '../../core/types/passkeyManager'\nimport './ShowQRCode.css'\n\ninterface ShowQRCodeProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onEvent: (event: DeviceLinkingSSEEvent) => void;\n  onError: (error: Error) => void;\n  /** Optional pre-created flow. If provided, ShowQRCode uses it instead of creating one. */\n  deviceLinkingFlow?: LinkDeviceFlow;\n}\n\nexport function ShowQRCode({\n  isOpen,\n  onClose,\n  onEvent,\n  onError,\n  deviceLinkingFlow,\n}: ShowQRCodeProps) {\n\n  const { startDeviceLinkingFlow } = usePasskeyContext();\n\n  const [deviceLinkingState, setDeviceLinkingState] = useState<{\n    mode: 'idle' | 'device1' | 'device2';\n    qrCodeDataURL?: string;\n    isProcessing: boolean;\n  }>({ mode: 'idle', isProcessing: false });\n\n  // Store the flow instance to allow proper cleanup\n  const flowRef = useRef<any>(null);\n\n  useEffect(() => {\n    return () => {\n      if (flowRef.current) {\n        flowRef.current?.cancel();\n        flowRef.current = null;\n      }\n    };\n  }, []);\n\n  // Auto-start QR generation when modal opens; cancel when closing or unmounting\n  useEffect(() => {\n    if (!isOpen) return;\n\n    let cancelled = false;\n    setDeviceLinkingState({ mode: 'device2', isProcessing: true });\n\n    // Use provided flow if present; otherwise create one and forward events\n    const device2Flow: LinkDeviceFlow = deviceLinkingFlow ?? startDeviceLinkingFlow({\n      onEvent: (event: DeviceLinkingSSEEvent) => {\n        if (cancelled) return;\n        onEvent(event);\n        if (\n          event.phase === DeviceLinkingPhase.STEP_7_LINKING_COMPLETE &&\n          event.status === DeviceLinkingStatus.SUCCESS\n        ) {\n          try { onClose(); } catch {}\n        }\n      },\n      onError: (error: Error) => {\n        if (cancelled) return;\n        setDeviceLinkingState({ mode: 'idle', isProcessing: false });\n        onError(error);\n        try { onClose(); } catch {}\n      },\n    });\n\n    flowRef.current = device2Flow;\n\n    (async () => {\n    (async () => {\n      try {\n        const { qrCodeDataURL } = await device2Flow.generateQR();\n        if (!cancelled) {\n          setDeviceLinkingState(prev => ({ ...prev, qrCodeDataURL, isProcessing: false }));\n        }\n      } catch (err) {\n        if (!cancelled) {\n          setDeviceLinkingState({ mode: 'idle', isProcessing: false });\n        }\n      }\n    })();\n    })();\n\n    return () => {\n      cancelled = true;\n      // Only cancel the flow if we created it here\n      const shouldCancel = !deviceLinkingFlow;\n      if (shouldCancel) {\n        device2Flow.cancel();\n      }\n      if (flowRef.current === device2Flow) {\n        flowRef.current = null;\n      }\n    };\n  }, [isOpen, deviceLinkingFlow]);\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"qr-code-container\" onClick={(e) => e.stopPropagation()}>\n      <div className=\"qr-header\">\n        <h2 className=\"qr-title\">Scan and Link Device</h2>\n      </div>\n\n      <div className=\"qr-body\">\n        {deviceLinkingState.mode === 'device2' && (\n          <div className=\"qr-code-section\">\n            {deviceLinkingState.qrCodeDataURL ? (\n              <div className=\"qr-code-display\">\n                <img\n                  src={deviceLinkingState.qrCodeDataURL}\n                  alt=\"Device Linking QR Code\"\n                  className=\"qr-code-image\"\n                />\n              </div>\n            ) : (\n              <div className=\"qr-loading\">\n                <p>Generating QR code...</p>\n              </div>\n            )}\n            {deviceLinkingState.qrCodeDataURL && (\n              <>\n                <div className=\"qr-instruction\">Scan to backup your other device.</div>\n                <div className=\"qr-status\">Waiting for your other device to scan<span className=\"animated-ellipsis\"></span></div>\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"mappings":";;;;;;;AAgBA,SAAgB,WAAW,EACzB,QACA,SACA,SACA,SACA,qBACkB;CAElB,MAAM,EAAE,2BAA2B;CAEnC,MAAM,CAAC,oBAAoB,yBAAyB,SAIjD;EAAE,MAAM;EAAQ,cAAc;;CAGjC,MAAM,UAAU,OAAY;AAE5B,iBAAgB;AACd,eAAa;AACX,OAAI,QAAQ,SAAS;AACnB,YAAQ,SAAS;AACjB,YAAQ,UAAU;;;IAGrB;AAGH,iBAAgB;AACd,MAAI,CAAC,OAAQ;EAEb,IAAI,YAAY;AAChB,wBAAsB;GAAE,MAAM;GAAW,cAAc;;EAGvD,MAAMA,cAA8B,qBAAqB,uBAAuB;GAC9E,UAAU,UAAiC;AACzC,QAAI,UAAW;AACf,YAAQ;AACR,QACE,MAAM,UAAU,mBAAmB,2BACnC,MAAM,WAAW,oBAAoB,QAErC,KAAI;AAAE;YAAmB;;GAG7B,UAAU,UAAiB;AACzB,QAAI,UAAW;AACf,0BAAsB;KAAE,MAAM;KAAQ,cAAc;;AACpD,YAAQ;AACR,QAAI;AAAE;YAAmB;;;AAI7B,UAAQ,UAAU;AAElB,GAAC,YAAY;AACb,IAAC,YAAY;AACX,QAAI;KACF,MAAM,EAAE,kBAAkB,MAAM,YAAY;AAC5C,SAAI,CAAC,UACH,wBAAsB,UAAS;MAAE,GAAG;MAAM;MAAe,cAAc;;aAElE,KAAK;AACZ,SAAI,CAAC,UACH,uBAAsB;MAAE,MAAM;MAAQ,cAAc;;;;;AAM1D,eAAa;AACX,eAAY;GAEZ,MAAM,eAAe,CAAC;AACtB,OAAI,aACF,aAAY;AAEd,OAAI,QAAQ,YAAY,YACtB,SAAQ,UAAU;;IAGrB,CAAC,QAAQ;AAEZ,KAAI,CAAC,OAAQ,QAAO;AAEpB,QACE,qBAAC;EAAI,WAAU;EAAoB,UAAU,MAAM,EAAE;aACnD,oBAAC;GAAI,WAAU;aACb,oBAAC;IAAG,WAAU;cAAW;;MAG3B,oBAAC;GAAI,WAAU;aACZ,mBAAmB,SAAS,aAC3B,qBAAC;IAAI,WAAU;eACZ,mBAAmB,gBAClB,oBAAC;KAAI,WAAU;eACb,oBAAC;MACC,KAAK,mBAAmB;MACxB,KAAI;MACJ,WAAU;;SAId,oBAAC;KAAI,WAAU;eACb,oBAAC,iBAAE;QAGN,mBAAmB,iBAClB,4CACE,oBAAC;KAAI,WAAU;eAAiB;QAChC,qBAAC;KAAI,WAAU;gBAAY,yCAAqC,oBAAC,UAAK,WAAU"}