{"version":3,"file":"index.js","names":["ProfileSettingsButtonInner: React.FC<ProfileButtonProps>","MENU_ITEMS: MenuItem[]","error: any","ProfileSettingsButton: React.FC<ProfileButtonProps>"],"sources":["../../../../../src/react/components/ProfileSettingsButton/index.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { Key, Scan, Shield, Sliders } from 'lucide-react';\nimport { UserAccountButton } from './UserAccountButton';\nimport { ProfileDropdown } from './ProfileDropdown';\nimport { useProfileState } from './hooks/useProfileState';\nimport { usePasskeyContext } from '../../context';\nimport type { MenuItem, ProfileButtonProps } from './types';\nimport { QRCodeScanner } from '../QRCodeScanner';\nimport { AccessKeysModal } from './AccessKeysModal';\nimport './Web3AuthProfileButton.css';\nimport { ThemeProvider, ThemeScope, useTheme } from '../theme';\n\n\n/**\n * Profile Settings Button Component\n * Provides user settings, account management, and device linking.\n * **Important:** This component must be used inside a PasskeyManager context.\n * Wrap your app with PasskeyProvider or ensure PasskeyManager is available in context.\n *\n * @example\n * ```tsx\n * import { PasskeyProvider } from '@web3authn/passkey/react';\n * import { ProfileSettingsButton } from '@web3authn/passkey/react';\n *\n * function App() {\n *   return (\n *     <PasskeyProvider configs={passkeyConfigs}>\n *       <ProfileSettingsButton\n *         username=\"alice\"\n *         onLogout={() => console.log('User logged out')}\n *         deviceLinkingScannerParams={{\n *           onDeviceLinked: (result) => console.log('Device linked:', result),\n *           onError: (error) => console.error('Error:', error),\n *           onClose: () => console.log('Scanner closed'),\n *           onEvent: (event) => console.log('Event:', event),\n *           fundingAmount: '0.05'\n *         }}\n *       />\n *     </PasskeyProvider>\n *   );\n * }\n * ```\n */\nconst ProfileSettingsButtonInner: React.FC<ProfileButtonProps> = ({\n  username: usernameProp,\n  nearAccountId: nearAccountIdProp,\n  onLogout: onLogout,\n  toggleColors,\n  nearExplorerBaseUrl = 'https://nearblocks.io',\n  deviceLinkingScannerParams,\n}) => {\n  // Get values from context if not provided as props\n  const {\n    loginState,\n    passkeyManager,\n    logout,\n    useRelayer,\n    setUseRelayer,\n  } = usePasskeyContext();\n\n  // Use props if provided, otherwise fall back to context\n  const accountName = usernameProp || nearAccountIdProp?.split('.')?.[0] || loginState.nearAccountId?.split('.')?.[0] || 'User';\n  const nearAccountId = nearAccountIdProp || loginState.nearAccountId;\n\n  // Local state for modals/expanded sections\n  const [showQRScanner, setShowQRScanner] = useState(false);\n  const [showAccessKeys, setShowAccessKeys] = useState(false);\n  const [isLoadingKeys, setIsLoadingKeys] = useState(false);\n  const [transactionSettingsOpen, setTransactionSettingsOpen] = useState(false);\n  const [currentConfirmConfig, setCurrentConfirmConfig] = useState<any>(null);\n\n  // Load confirmation config on mount\n  useEffect(() => {\n    try {\n      const cfg = passkeyManager.getConfirmationConfig();\n      setCurrentConfirmConfig(cfg);\n    } catch (_) {}\n  }, [passkeyManager]);\n\n  // Handlers for transaction settings\n  const handleToggleShowDetails = () => {\n    if (!currentConfirmConfig) return;\n    const newUIMode = currentConfirmConfig.uiMode === 'modal' ? 'skip' : 'modal';\n    passkeyManager.setConfirmationConfig({ ...currentConfirmConfig, uiMode: newUIMode });\n    setCurrentConfirmConfig((prev: any) => prev ? { ...prev, uiMode: newUIMode } : prev);\n  };\n\n  const handleToggleSkipClick = () => {\n    if (!currentConfirmConfig) return;\n    const newBehavior = currentConfirmConfig.behavior === 'requireClick' ? 'autoProceed' : 'requireClick';\n    passkeyManager.setConfirmBehavior(newBehavior);\n    setCurrentConfirmConfig((prev: any) => prev ? { ...prev, behavior: newBehavior } : prev);\n  };\n\n  const handleSetDelay = (delay: number) => {\n    if (!currentConfirmConfig) return;\n    passkeyManager.setConfirmationConfig({ ...currentConfirmConfig, autoProceedDelay: delay });\n    setCurrentConfirmConfig((prev: any) => prev ? { ...prev, autoProceedDelay: delay } : prev);\n  };\n\n  const handleToggleTheme = () => {\n    if (!currentConfirmConfig) return;\n    const newTheme = currentConfirmConfig.theme === 'dark' ? 'light' : 'dark';\n    passkeyManager.setUserTheme(newTheme);\n    setCurrentConfirmConfig((prev: any) => prev ? { ...prev, theme: newTheme } : prev);\n  };\n\n  // Menu items configuration with context-aware handlers\n  const MENU_ITEMS: MenuItem[] = useMemo(() => [\n    {\n      icon: <Key />,\n      label: 'Export Keys',\n      description: 'Export your NEAR keys',\n      disabled: false,\n      onClick: async () => {\n        try {\n          const {\n            accountId,\n            privateKey,\n            publicKey\n          } = await passkeyManager.exportNearKeypairWithTouchId(nearAccountId!);\n\n          // Small delay to allow document to regain focus after WebAuthn\n          await new Promise(resolve => setTimeout(resolve, 150));\n\n          const keypair_msg = `Account ID:\\n${accountId}\\n\\nPublic key:\\n${publicKey}\\n\\nPrivate key:\\n${privateKey}`;\n\n          // Simple clipboard approach with single fallback\n          if (navigator.clipboard && window.isSecureContext) {\n            await navigator.clipboard.writeText(keypair_msg);\n            alert(`NEAR keys copied to clipboard!\\n${keypair_msg}`);\n          } else {\n            // Simple fallback: show keys for manual copy\n            alert(`Your NEAR Keys (copy manually):\\n${keypair_msg}`);\n          }\n        } catch (error: any) {\n          console.error('Key export failed:', error);\n          alert(`Key export failed: ${error.message}`);\n        }\n      }\n    },\n    {\n      icon: <Scan />,\n      label: 'Scan and Link Device',\n      description: 'Scan a QR to link a device',\n      disabled: !loginState.isLoggedIn,\n      onClick: () => {\n        console.log('ProfileSettingsButton: Opening QR Scanner');\n        setShowQRScanner(true);\n      },\n      keepOpenOnClick: true,\n    },\n    {\n      icon: <Shield />,\n      label: 'Access Keys',\n      description: 'View your account access keys',\n      disabled: !loginState.isLoggedIn,\n      onClick: () => setShowAccessKeys(true),\n      keepOpenOnClick: true,\n    },\n    {\n      icon: <Sliders />,\n      label: 'Transaction Settings',\n      description: 'Customize confirmation behavior',\n      disabled: !loginState.isLoggedIn,\n      onClick: () => setTransactionSettingsOpen((v) => !v),\n      keepOpenOnClick: true,\n    },\n  ], [passkeyManager, nearAccountId, loginState.isLoggedIn]);\n\n  // State management\n  const {\n    isOpen,\n    refs,\n    handleToggle,\n    handleClose,\n  } = useProfileState();\n\n  // Read current theme from ThemeProvider (falls back to system preference)\n  const { theme } = useTheme();\n\n  // Handlers\n  const handleLogout = () => {\n    logout();\n    onLogout?.();\n    handleClose();\n  };\n\n  return (\n    <div className={`w3a-profile-button-container`}>\n      <div\n        ref={refs.buttonRef}\n        className={`w3a-profile-button-morphable ${isOpen ? 'open' : 'closed'}`}\n        data-state={isOpen ? 'open' : 'closed'}\n      >\n        <UserAccountButton\n          username={accountName}\n          fullAccountId={nearAccountId || undefined}\n          isOpen={isOpen}\n          onClick={handleToggle}\n          nearExplorerBaseUrl={nearExplorerBaseUrl}\n          theme={theme}\n        />\n\n        {/* Visible menu structure for actual interaction */}\n        <ProfileDropdown\n          ref={refs.dropdownRef}\n          isOpen={isOpen}\n          menuItems={MENU_ITEMS}\n          useRelayer={useRelayer}\n          onRelayerChange={setUseRelayer}\n          onLogout={handleLogout}\n          onClose={handleClose}\n          menuItemsRef={refs.menuItemsRef}\n          toggleColors={toggleColors}\n          currentConfirmConfig={currentConfirmConfig}\n          onToggleShowDetails={handleToggleShowDetails}\n          onToggleSkipClick={handleToggleSkipClick}\n          onSetDelay={handleSetDelay}\n          onToggleTheme={handleToggleTheme}\n          transactionSettingsOpen={transactionSettingsOpen}\n          theme={theme}\n        />\n      </div>\n\n      {/* QR Scanner Modal - Always rendered to prevent unmount/remount, controlled by isOpen */}\n      <QRCodeScanner\n        key=\"profile-qr-scanner\" // Force stable identity\n        isOpen={showQRScanner}\n        fundingAmount={deviceLinkingScannerParams?.fundingAmount || '0.05'}\n        onDeviceLinked={(result) => {\n          console.log('ProfileSettingsButton: QR Scanner device linked');\n          deviceLinkingScannerParams?.onDeviceLinked?.(result);\n          setShowQRScanner(false);\n        }}\n        onError={(error) => {\n          console.log('ProfileSettingsButton: QR Scanner error');\n          deviceLinkingScannerParams?.onError?.(error);\n          setShowQRScanner(false);\n        }}\n        onClose={() => {\n          console.log('ProfileSettingsButton: QR Scanner close requested');\n          deviceLinkingScannerParams?.onClose?.();\n          setShowQRScanner(false);\n        }}\n        onEvent={(event) => deviceLinkingScannerParams?.onEvent?.(event)}\n      />\n\n      {/* Access Keys Modal - Rendered outside of ProfileDropdown */}\n      <AccessKeysModal\n        nearAccountId={nearAccountId!}\n        isOpen={showAccessKeys}\n        onClose={() => setShowAccessKeys(false)}\n      />\n    </div>\n  );\n};\n\nexport const ProfileSettingsButton: React.FC<ProfileButtonProps> = (props) => {\n  return (\n    <ThemeProvider>\n      <ThemeScope>\n        <ProfileSettingsButtonInner {...props} />\n      </ThemeScope>\n    </ThemeProvider>\n  );\n};\n"],"mappings":"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"}