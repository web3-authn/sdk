{"version":3,"file":"QRCodeScanner.js","names":["QRCodeScanner: React.FC<QRCodeScannerProps>"],"sources":["../../../../src/react/components/QRCodeScanner.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport type {\n  DeviceLinkingQRData,\n  LinkDeviceResult,\n  DeviceLinkingSSEEvent\n} from '@/index';\nimport { useQRCamera, QRScanMode } from '../hooks/useQRCamera';\nimport { useDeviceLinking } from '../hooks/useDeviceLinking';\nimport { ThemeScope } from './theme';\n\n/**\n * QR Code Scanner Component for Device Linking\n *\n * This component provides a complete QR code scanning interface for device linking.\n * It supports both camera-based scanning and file upload scanning.\n *\n * **Important:** This component must be used inside a PasskeyManager context.\n * Wrap your app with PasskeyProvider or ensure PasskeyManager is available in context.\n *\n * @example\n * ```tsx\n * import { PasskeyProvider } from '@web3authn/passkey/react';\n * import { QRCodeScanner } from '@web3authn/passkey/react';\n *\n * function App() {\n *   return (\n *     <PasskeyProvider configs={passkeyConfigs}>\n *       <QRCodeScanner\n *         onDeviceLinked={(result) => console.log('Device linked:', result)}\n *         onError={(error) => console.error('Error:', error)}\n *       />\n *     </PasskeyProvider>\n *   );\n * }\n * ```\n */\nexport interface QRCodeScannerProps {\n  onQRCodeScanned?: (qrData: DeviceLinkingQRData) => void;\n  onDeviceLinked?: (result: LinkDeviceResult) => void;\n  onError?: (error: Error) => void;\n  onClose?: () => void;\n  onEvent?: (event: DeviceLinkingSSEEvent) => void;\n  fundingAmount?: string;\n  isOpen?: boolean;\n  cameraId?: string;\n  className?: string;\n  style?: React.CSSProperties;\n  showCamera?: boolean;\n}\n\nexport const QRCodeScanner: React.FC<QRCodeScannerProps> = ({\n  onQRCodeScanned,\n  onDeviceLinked,\n  onError,\n  onClose,\n  onEvent,\n  fundingAmount = '0.05', // 0.05 NEAR\n  isOpen = true,\n  cameraId,\n  className,\n  style,\n  showCamera = true,\n}) => {\n\n  const { linkDevice } = useDeviceLinking({\n    onDeviceLinked,\n    onError,\n    onClose,\n    onEvent,\n    fundingAmount\n  });\n\n  const qrCamera = useQRCamera({\n    onQRDetected: async (qrData: DeviceLinkingQRData) => {\n      onQRCodeScanned?.(qrData);\n      await linkDevice(qrData, QRScanMode.CAMERA);\n    },\n    onError,\n    isOpen: showCamera ? isOpen : false, // Only active when camera should be shown\n    cameraId\n  });\n\n  const [isVideoReady, setIsVideoReady] = useState(false);\n\n  // Reset video ready state when modal opens so we can re-fade\n  useEffect(() => {\n    if (isOpen) {\n      setIsVideoReady(false);\n    }\n  }, [isOpen]);\n\n  // Camera Cleanup Point 1: User-initiated close\n  const handleClose = useCallback(() => {\n    qrCamera.stopScanning();\n    onClose?.();\n  }, [qrCamera.stopScanning, qrCamera.isScanning, qrCamera.videoRef, onClose]);\n\n  // Camera Cleanup Point 2: Component unmount\n  useEffect(() => {\n    return () => {\n      if (qrCamera.isScanning) {\n        qrCamera.stopScanning();\n      }\n    };\n  }, []);\n\n  // Camera Cleanup Point 3: Modal state changes (isOpen prop)\n  useEffect(() => {\n    if (!isOpen && qrCamera.isScanning) {\n      qrCamera.stopScanning();\n    }\n  }, [isOpen, qrCamera.isScanning, qrCamera.stopScanning, qrCamera.videoRef]);\n\n  // Camera Cleanup Point 4: ESC key handling\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape' && isOpen) {\n        handleClose();\n      }\n    };\n    if (isOpen) {\n      document.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isOpen, handleClose]);\n\n  // Early return for closed state to prevent unnecessary rendering when modal is closed\n  // Note: Camera cleanup is handled by useEffect() above, not by conditional rendering\n  if (!isOpen) {\n    return null;\n  }\n\n  if (qrCamera.error) {\n    return (\n      <ThemeScope>\n        <div className=\"qr-scanner-error-container\">\n          <div className=\"qr-scanner-error-message\">\n            <p>{qrCamera.error}</p>\n            <button\n              onClick={() => qrCamera.setError(null)}\n              className=\"qr-scanner-error-button\"\n            >\n              Try Again\n            </button>\n            <button\n              onClick={handleClose}\n              className=\"qr-scanner-error-button\"\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      </ThemeScope>\n    )\n  }\n\n  return (\n    <ThemeScope>\n      <div className={`qr-scanner-modal ${className || ''}`} style={style}>\n        <div className=\"qr-scanner-panel\">\n          {/* Camera Scanner Section */}\n          {showCamera\n            && (qrCamera.scanMode === QRScanMode.CAMERA || qrCamera.scanMode === QRScanMode.AUTO)\n            && (\n            <div className=\"qr-scanner-camera-section\">\n              {/* Camera Feed */}\n              <div className=\"qr-scanner-camera-container\">\n                <video\n                  ref={qrCamera.videoRef}\n                  className={`qr-scanner-video${isVideoReady ? ' is-ready' : ''}`}\n                  style={{\n                    transform: qrCamera.isFrontCamera ? 'scaleX(-1)' : 'none'\n                  }}\n                  playsInline\n                  autoPlay\n                  muted\n                  onCanPlay={() => setIsVideoReady(true)}\n                  onLoadedData={() => setIsVideoReady(true)}\n                />\n                <canvas\n                  ref={qrCamera.canvasRef}\n                  className=\"qr-scanner-canvas\"\n                />\n\n                {/* Scanner Overlay */}\n                <div className=\"qr-scanner-overlay\">\n                  <div className=\"qr-scanner-box\">\n                    <div className=\"qr-scanner-corner-top-left\" />\n                    <div className=\"qr-scanner-corner-top-right\" />\n                    <div className=\"qr-scanner-corner-bottom-left\" />\n                    <div className=\"qr-scanner-corner-bottom-right\" />\n                  </div>\n                </div>\n              </div>\n\n              {/* Instructions */}\n              <div className=\"qr-scanner-instructions\">\n                <p>Position the QR code within the frame</p>\n                {qrCamera.isScanning && (\n                  <p className=\"qr-scanner-sub-instruction qr-scanner-sub-instruction--small\">\n                    Scanning...\n                  </p>\n                )}\n              </div>\n\n              {/* Camera Controls */}\n              {qrCamera.cameras.length > 1 && (\n                <div className=\"qr-scanner-camera-controls\">\n                  <select\n                    value={qrCamera.selectedCamera}\n                    onChange={(e) => qrCamera.handleCameraChange(e.target.value)}\n                    className=\"qr-scanner-camera-selector\"\n                  >\n                    {qrCamera.cameras.map(camera => (\n                      <option key={camera.deviceId} value={camera.deviceId}>\n                        {camera.label || `Camera ${camera.deviceId.substring(0, 8)}...`}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Close Button */}\n        <button onClick={handleClose} className=\"qr-scanner-close\">\n          âœ•\n        </button>\n      </div>\n    </ThemeScope>\n  );\n};\n\nexport default QRCodeScanner;\n"],"mappings":";;;;;;;AAkDA,MAAaA,iBAA+C,EAC1D,iBACA,gBACA,SACA,SACA,SACA,gBAAgB,QAChB,SAAS,MACT,UACA,WACA,OACA,aAAa,WACT;CAEJ,MAAM,EAAE,eAAe,iBAAiB;EACtC;EACA;EACA;EACA;EACA;;CAGF,MAAM,WAAW,YAAY;EAC3B,cAAc,OAAO,WAAgC;AACnD,qBAAkB;AAClB,SAAM,WAAW,QAAQ,WAAW;;EAEtC;EACA,QAAQ,aAAa,SAAS;EAC9B;;CAGF,MAAM,CAAC,cAAc,mBAAmB,SAAS;AAGjD,iBAAgB;AACd,MAAI,OACF,iBAAgB;IAEjB,CAAC;CAGJ,MAAM,cAAc,kBAAkB;AACpC,WAAS;AACT;IACC;EAAC,SAAS;EAAc,SAAS;EAAY,SAAS;EAAU;;AAGnE,iBAAgB;AACd,eAAa;AACX,OAAI,SAAS,WACX,UAAS;;IAGZ;AAGH,iBAAgB;AACd,MAAI,CAAC,UAAU,SAAS,WACtB,UAAS;IAEV;EAAC;EAAQ,SAAS;EAAY,SAAS;EAAc,SAAS;;AAGjE,iBAAgB;EACd,MAAM,iBAAiB,UAAyB;AAC9C,OAAI,MAAM,QAAQ,YAAY,OAC5B;;AAGJ,MAAI,OACF,UAAS,iBAAiB,WAAW;AAGvC,eAAa;AACX,YAAS,oBAAoB,WAAW;;IAEzC,CAAC,QAAQ;AAIZ,KAAI,CAAC,OACH,QAAO;AAGT,KAAI,SAAS,MACX,QACE,oBAAC,wBACC,oBAAC;EAAI,WAAU;YACb,qBAAC;GAAI,WAAU;;IACb,oBAAC,iBAAG,SAAS;IACb,oBAAC;KACC,eAAe,SAAS,SAAS;KACjC,WAAU;eACX;;IAGD,oBAAC;KACC,SAAS;KACT,WAAU;eACX;;;;;AASX,QACE,oBAAC,wBACC,qBAAC;EAAI,WAAW,oBAAoB,aAAa;EAAa;aAC5D,oBAAC;GAAI,WAAU;aAEZ,eACK,SAAS,aAAa,WAAW,UAAU,SAAS,aAAa,WAAW,SAEhF,qBAAC;IAAI,WAAU;;KAEb,qBAAC;MAAI,WAAU;;OACb,oBAAC;QACC,KAAK,SAAS;QACd,WAAW,mBAAmB,eAAe,cAAc;QAC3D,OAAO,EACL,WAAW,SAAS,gBAAgB,eAAe;QAErD;QACA;QACA;QACA,iBAAiB,gBAAgB;QACjC,oBAAoB,gBAAgB;;OAEtC,oBAAC;QACC,KAAK,SAAS;QACd,WAAU;;OAIZ,oBAAC;QAAI,WAAU;kBACb,qBAAC;SAAI,WAAU;;UACb,oBAAC,SAAI,WAAU;UACf,oBAAC,SAAI,WAAU;UACf,oBAAC,SAAI,WAAU;UACf,oBAAC,SAAI,WAAU;;;;;;KAMrB,qBAAC;MAAI,WAAU;iBACb,oBAAC,iBAAE,4CACF,SAAS,cACR,oBAAC;OAAE,WAAU;iBAA+D;;;KAO/E,SAAS,QAAQ,SAAS,KACzB,oBAAC;MAAI,WAAU;gBACb,oBAAC;OACC,OAAO,SAAS;OAChB,WAAW,MAAM,SAAS,mBAAmB,EAAE,OAAO;OACtD,WAAU;iBAET,SAAS,QAAQ,KAAI,WACpB,oBAAC;QAA6B,OAAO,OAAO;kBACzC,OAAO,SAAS,UAAU,OAAO,SAAS,UAAU,GAAG,GAAG;UADhD,OAAO;;;;;MAYlC,oBAAC;GAAO,SAAS;GAAa,WAAU;aAAmB"}