{"version":3,"file":"design-tokens.js","names":["LIGHT_TOKENS: DesignTokens","DARK_TOKENS: DesignTokens","PROFILE_TOGGLE_TOKENS: { light: ToggleColorTokens; dark: ToggleColorTokens }"],"sources":["../../../../../src/react/components/theme/design-tokens.ts"],"sourcesContent":["// Consolidate color sources to base-styles\nimport {\n  CHROMA_COLORS,\n  GREY_COLORS,\n  GRADIENTS,\n  LIGHT_THEME,\n  DARK_THEME\n} from '@/base-styles';\n\n/**\n * About these tokens and CSS variables\n *\n * DesignTokens is a JS/TS representation of theming primitives. We expose these\n * runtime tokens to CSS via custom properties (aka CSS variables) so both Lit\n * components and React styles can read the same values.\n *\n * Mapping rules (applied by ThemeProvider/ThemeScope via createCSSVariables):\n * - colors:   --w3a-colors-<key>\n *   e.g. tokens.colors.primary → --w3a-colors-primary\n * - spacing:  --w3a-spacing-<key>\n *   e.g. tokens.spacing.md     → --w3a-spacing-md\n * - borderRadius:   --w3a-border-radius-<key>\n *   e.g. tokens.borderRadius.lg→ --w3a-border-radius-lg\n * - shadows:  --w3a-shadows-<key>\n *   e.g. tokens.shadows.sm     → --w3a-shadow-sm\n *\n * Where they’re used:\n * - ThemeScope injects variables inline on a boundary element; components\n *   reference them with var(--w3a-colors-primary), etc.\n * - Component-specific helpers (e.g., PROFILE_BUTTON_TOKENS, PROFILE_TOGGLE_TOKENS)\n *   derive from LIGHT_TOKENS/DARK_TOKENS and are read by components directly\n *   or mapped to CSS vars via their own applyStyles helpers.\n */\n\n// ============================================================================\n// DESIGN TOKENS TYPES\n// ============================================================================\n\nexport interface DesignTokens {\n  colors: {\n    // Primary brand colors\n    primary: string;\n    primaryHover: string;\n    secondary: string;\n    accent: string;\n\n    // Text hierarchy\n    textPrimary: string;\n    textSecondary: string;\n    textMuted: string;\n\n    // Surface layers\n    colorBackground: string;\n    colorSurface: string;\n    colorSurface2: string;\n    colorBorder: string;\n\n    // Interactive states\n    hover: string;\n    active: string;\n    focus: string;\n\n    // Status colors\n    success: string;\n    warning: string;\n    error: string;\n    info: string;\n\n    // Border colors\n    borderPrimary: string;\n    borderSecondary: string;\n    borderHover: string;\n\n    // Background Gradients\n    backgroundGradientPrimary: string;\n    backgroundGradientSecondary: string;\n\n    // Grey variations\n    grey25: string;\n    grey50: string;\n    grey75: string;\n    grey100: string;\n    grey200: string;\n    grey300: string;\n    grey400: string;\n    grey500: string;\n    grey600: string;\n    grey650: string;\n    grey700: string;\n    grey750: string;\n    grey800: string;\n    grey850: string;\n    grey900: string;\n    grey950: string;\n\n    // Slate variations\n    slate25: string;\n    slate100: string;\n    slate150: string;\n    slate200: string;\n    slate300: string;\n\n    // Chroma colors (already included via spread)\n    red200: string;\n    red300: string;\n    red400: string;\n    red500: string;\n    red600: string;\n    yellow200: string;\n    yellow300: string;\n    yellow400: string;\n    yellow500: string;\n    yellow600: string;\n    blue200: string;\n    blue300: string;\n    blue400: string;\n    blue500: string;\n    blue600: string;\n    green200: string;\n    green300: string;\n    green400: string;\n    green500: string;\n    green600: string;\n\n    // Highlights\n    highlightReceiverId: string;\n    highlightMethodName: string;\n    highlightAmount: string;\n    highlightReceiverIdBackground: string;\n    highlightMethodNameBackground: string;\n    highlightAmountBackground: string;\n\n    // Misc\n    colorPrimary: string;\n    gradientPeach: string;\n    gradientAqua: string;\n  };\n\n  spacing: {\n    xs: string;\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n  };\n\n  borderRadius: {\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n  };\n\n  shadows: {\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n  };\n}\n\nexport interface UseThemeReturn {\n  theme: 'light' | 'dark';\n  tokens: DesignTokens;\n  isDark: boolean;\n  setTheme: (theme: 'light' | 'dark') => void;\n  toggleTheme: () => void;\n}\n\n// ============================================================================\n// LIGHT THEME TOKENS\n// ============================================================================\nexport const LIGHT_TOKENS: DesignTokens = {\n  colors: {\n    ...CHROMA_COLORS,\n\n    // Primary brand colors\n    primary: CHROMA_COLORS.blue500,\n    primaryHover: CHROMA_COLORS.blue600,\n    secondary: GREY_COLORS.grey600,\n    accent: CHROMA_COLORS.blue300,\n\n    // Text hierarchy\n    textPrimary: LIGHT_THEME.textPrimary,\n    textSecondary: LIGHT_THEME.textSecondary,\n    textMuted: LIGHT_THEME.textMuted,\n\n    // Core colors\n    colorBackground: LIGHT_THEME.colorBackground,\n    colorSurface: LIGHT_THEME.colorSurface,\n    colorSurface2: LIGHT_THEME.colorSurface2,\n    colorBorder: LIGHT_THEME.colorBorder,\n\n    // Interactive states\n    hover: GREY_COLORS.grey100,\n    active: GREY_COLORS.grey200,\n    focus: CHROMA_COLORS.blue400,\n\n    // Status colors\n    success: CHROMA_COLORS.blue500,\n    warning: CHROMA_COLORS.yellow500,\n    error: CHROMA_COLORS.red500,\n    info: CHROMA_COLORS.blue500,\n\n    // Border colors\n    borderPrimary: LIGHT_THEME.slate300,\n    borderSecondary: GREY_COLORS.grey300,\n    borderHover: GREY_COLORS.slate350,\n\n    // Background Gradients\n    backgroundGradientPrimary: GRADIENTS.blue,\n    backgroundGradientSecondary: GRADIENTS.blueWhite,\n\n    // Grey variations\n    grey25: LIGHT_THEME.grey25,\n    grey50: LIGHT_THEME.grey50,\n    grey75: LIGHT_THEME.grey75,\n    grey100: LIGHT_THEME.grey100,\n    grey200: LIGHT_THEME.grey200,\n    grey300: LIGHT_THEME.grey300,\n    grey400: LIGHT_THEME.grey400,\n    grey500: LIGHT_THEME.grey500,\n    grey600: LIGHT_THEME.grey600,\n    grey650: LIGHT_THEME.grey650,\n    grey700: LIGHT_THEME.grey700,\n    grey750: LIGHT_THEME.grey750,\n    grey800: DARK_THEME.grey800,\n    grey850: DARK_THEME.grey850,\n    grey900: DARK_THEME.grey900,\n    grey950: DARK_THEME.grey950,\n\n    // Slate variations\n    slate25: LIGHT_THEME.slate25,\n    slate100: LIGHT_THEME.slate100,\n    slate150: LIGHT_THEME.slate150,\n    slate200: LIGHT_THEME.slate200,\n    slate300: LIGHT_THEME.slate300,\n\n    // Chroma colors (already included via ...CHROMA_COLORS)\n\n    // Highlights\n    highlightReceiverId: LIGHT_THEME.highlightReceiverId,\n    highlightMethodName: LIGHT_THEME.highlightMethodName,\n    highlightAmount: LIGHT_THEME.highlightAmount,\n    highlightReceiverIdBackground: LIGHT_THEME.highlightReceiverIdBackground,\n    highlightMethodNameBackground: LIGHT_THEME.highlightMethodNameBackground,\n    highlightAmountBackground: LIGHT_THEME.highlightAmountBackground,\n\n    // Misc\n    colorPrimary: LIGHT_THEME.colorPrimary,\n    gradientPeach: LIGHT_THEME.gradientPeach,\n    gradientAqua: LIGHT_THEME.gradientAqua,\n  },\n\n  spacing: {\n    xs: '0.25rem',   // 4px\n    sm: '0.5rem',    // 8px\n    md: '1rem',      // 16px\n    lg: '1.5rem',    // 24px\n    xl: '2rem',      // 32px\n  },\n\n  borderRadius: {\n    sm: '0.5rem',\n    md: '1rem',\n    lg: '1.5rem',\n    xl: '2rem',\n  },\n\n  shadows: {\n    sm: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',\n    md: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n    lg: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n    xl: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',\n  },\n};\n\n// ============================================================================\n// DARK THEME TOKENS\n// ============================================================================\nexport const DARK_TOKENS: DesignTokens = {\n  colors: {\n    ...CHROMA_COLORS,\n\n    // Primary brand colors (keep consistent with light)\n    primary: CHROMA_COLORS.blue500,\n    primaryHover: CHROMA_COLORS.blue600,\n    secondary: GREY_COLORS.grey400,\n    accent: CHROMA_COLORS.blue300,\n\n    // Text hierarchy (dark palette)\n    textPrimary: DARK_THEME.textPrimary,\n    textSecondary: DARK_THEME.textSecondary,\n    textMuted: DARK_THEME.textMuted,\n\n    colorBackground: DARK_THEME.colorBackground,\n    colorSurface: DARK_THEME.colorSurface,\n    colorSurface2: DARK_THEME.colorSurface2,\n    colorBorder: DARK_THEME.colorBorder,\n\n    // Interactive states\n    hover: DARK_THEME.grey850,\n    active: DARK_THEME.grey650,\n    focus: CHROMA_COLORS.blue400,\n\n    // Status colors (unchanged)\n    success: CHROMA_COLORS.blue400,\n    warning: CHROMA_COLORS.yellow400,\n    error: CHROMA_COLORS.red400,\n    info: CHROMA_COLORS.blue400,\n\n    // Border colors (dark palette)\n    borderPrimary: DARK_THEME.grey650,\n    borderSecondary: DARK_THEME.grey750,\n    borderHover: DARK_THEME.grey750,\n\n    // Background Gradients\n    backgroundGradientPrimary: GRADIENTS.blue,\n    backgroundGradientSecondary: GRADIENTS.blueWhite,\n\n    // Grey variations\n    grey25: DARK_THEME.grey25,\n    grey50: DARK_THEME.grey50,\n    grey75: DARK_THEME.grey75,\n    grey100: DARK_THEME.grey100,\n    grey200: DARK_THEME.grey200,\n    grey300: DARK_THEME.grey300,\n    grey400: DARK_THEME.grey400,\n    grey500: DARK_THEME.grey500,\n    grey600: DARK_THEME.grey600,\n    grey650: DARK_THEME.grey650,\n    grey700: DARK_THEME.grey700,\n    grey750: DARK_THEME.grey750,\n    grey800: DARK_THEME.grey800,\n    grey850: DARK_THEME.grey850,\n    grey900: DARK_THEME.grey900,\n    grey950: DARK_THEME.grey950,\n\n    // Slate variations\n    slate25: DARK_THEME.slate25,\n    slate100: DARK_THEME.slate100,\n    slate150: DARK_THEME.slate150,\n    slate200: DARK_THEME.slate200,\n    slate300: DARK_THEME.slate300,\n\n    // Highlights\n    highlightReceiverId: DARK_THEME.highlightReceiverId,\n    highlightMethodName: DARK_THEME.highlightMethodName,\n    highlightAmount: DARK_THEME.highlightAmount,\n    highlightReceiverIdBackground: DARK_THEME.highlightReceiverIdBackground,\n    highlightMethodNameBackground: DARK_THEME.highlightMethodNameBackground,\n    highlightAmountBackground: DARK_THEME.highlightAmountBackground,\n\n    // Misc\n    colorPrimary: DARK_THEME.colorPrimary,\n    gradientPeach: DARK_THEME.gradientPeach,\n    gradientAqua: DARK_THEME.gradientAqua,\n  },\n\n  // Same spacing, border radius, and shadows for consistency\n  spacing: LIGHT_TOKENS.spacing,\n  borderRadius: LIGHT_TOKENS.borderRadius,\n  shadows: {\n    sm: '0 1px 2px 0 rgba(0, 0, 0, 0.3)',\n    md: '0 4px 6px -1px rgba(0, 0, 0, 0.4), 0 2px 4px -1px rgba(0, 0, 0, 0.3)',\n    lg: '0 10px 15px -3px rgba(0, 0, 0, 0.4), 0 4px 6px -2px rgba(0, 0, 0, 0.3)',\n    xl: '0 20px 25px -5px rgba(0, 0, 0, 0.4), 0 10px 10px -5px rgba(0, 0, 0, 0.3)',\n  },\n};\n\n\n// (Archived) Alternative theme sketches removed for clarity; LIGHT_TOKENS and\n// DARK_TOKENS plus component-specific overrides are the single source of truth.\n\n// ============================================================================\n// CSS CUSTOM PROPERTY GENERATOR\n// ============================================================================\n/**\n * Generates CSS custom properties from design tokens\n * This would replace all the manual CSS variable definitions\n */\nexport function generateThemeCSS(tokens: DesignTokens, prefix = '--w3a'): string {\n  const cssVars: string[] = [];\n\n  // Colors\n  Object.entries(tokens.colors).forEach(([key, value]) => {\n    // Naming (plural): --w3a-colors-<key>\n    cssVars.push(`${prefix}-colors-${key}: ${value};`);\n  });\n\n  // Spacing\n  Object.entries(tokens.spacing).forEach(([key, value]) => {\n    cssVars.push(`${prefix}-spacing-${key}: ${value};`);\n  });\n\n  // Border radius\n  Object.entries(tokens.borderRadius).forEach(([key, value]) => {\n    // Naming (hyphenated): --w3a-border-radius-<key>\n    cssVars.push(`${prefix}-border-radius-${key}: ${value};`);\n  });\n\n  // Shadows\n  Object.entries(tokens.shadows).forEach(([key, value]) => {\n    // Naming (plural): --w3a-shadows-<key>\n    cssVars.push(`${prefix}-shadows-${key}: ${value};`);\n  });\n\n  return `:root {\\n  ${cssVars.join('\\n  ')}\\n}`;\n}\n\n// ============================================================================\n// COMPONENT-SPECIFIC THEME HELPERS\n// ============================================================================\n/**\n * Profile Button specific tokens (extends base with component-specific overrides)\n */\nexport const PROFILE_BUTTON_TOKENS = {\n  light: {\n    ...LIGHT_TOKENS,\n    colors: {\n      ...LIGHT_TOKENS.colors,\n      // Profile button specific overrides\n    }\n  },\n  dark: {\n    ...DARK_TOKENS,\n    colors: {\n      ...DARK_TOKENS.colors,\n    }\n  }\n};\n\n// ============================================================================\n// PROFILE TOGGLE TOKENS\n// ============================================================================\nexport interface ToggleColorTokens {\n  activeBackground: string;\n  activeShadow: string;\n  inactiveBackground: string;\n  inactiveShadow: string;\n  disabledBackground: string;\n  disabledCircle: string;\n  textColor: string;\n  disabledTextColor: string;\n  circleColor: string;\n}\n\nexport const PROFILE_TOGGLE_TOKENS: { light: ToggleColorTokens; dark: ToggleColorTokens } = {\n  light: {\n    activeBackground: GRADIENTS.blue,\n    activeShadow: LIGHT_TOKENS.shadows.md,\n    // Slightly darker off state in light mode\n    inactiveBackground: LIGHT_TOKENS.colors.borderHover,\n    inactiveShadow: LIGHT_TOKENS.shadows.sm,\n    disabledBackground: LIGHT_TOKENS.colors.borderSecondary,\n    disabledCircle: 'transparent', // Transparent knob when disabled\n    textColor: LIGHT_TOKENS.colors.textPrimary,\n    disabledTextColor: LIGHT_TOKENS.colors.textMuted,\n    // Slightly greyer knob in light mode (instead of pure white)\n    circleColor: GREY_COLORS.grey100,\n  },\n  dark: {\n    activeBackground: GRADIENTS.blue,\n    activeShadow: DARK_TOKENS.shadows.md,\n    inactiveBackground: DARK_TOKENS.colors.borderHover,\n    inactiveShadow: DARK_TOKENS.shadows.sm,\n    disabledBackground: DARK_TOKENS.colors.borderSecondary,\n    disabledCircle: 'transparent', // Transparent knob when disabled\n    textColor: DARK_TOKENS.colors.textPrimary,\n    disabledTextColor: DARK_TOKENS.colors.textSecondary,\n    // Slightly lighter knob in dark mode for better visibility\n    circleColor: DARK_TOKENS.colors.grey800,\n  }\n};\n"],"mappings":"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"}