{"version":3,"file":"signer-worker.js","names":["DEFAULT_CONFIRMATION_CONFIG: ConfirmationConfig"],"sources":["../../../../../../../../src/core/types/signer-worker.ts"],"sourcesContent":["\n// === IMPORT AUTO-GENERATED WASM TYPES ===\n// These are the source of truth generated from Rust structs via wasm-bindgen\n// Import as instance types from the WASM module classes\nimport * as wasmModule from '../../wasm_signer_worker/wasm_signer_worker.js';\nimport { WorkerRequestType, WorkerResponseType } from '../../wasm_signer_worker/wasm_signer_worker.js';\nexport { WorkerRequestType, WorkerResponseType }; // Export the WASM enums directly\n\nimport { StripFree } from \".\";\nimport type { onProgressEvents } from \"./passkeyManager\";\n\nexport type TransactionPayload = StripFree<wasmModule.TransactionPayload>;\nexport type RpcCallPayload = StripFree<wasmModule.RpcCallPayload>;\n/**\n * RPC call parameters for NEAR operations and VRF generation\n * Used to pass essential parameters for background operations\n * export interface RpcCallPayload {\n *    contractId: string;    // Web3Authn contract ID for verification\n *    nearRpcUrl: string;    // NEAR RPC endpoint URL\n *    nearAccountId: string; // Account ID for VRF challenge generation\n * }\n */\n\n// === WORKER REQUEST TYPE MAPPING ===\n// Define the complete type mapping for each worker request\nexport interface WorkerRequestTypeMap {\n  [WorkerRequestType.DeriveNearKeypairAndEncrypt]: {\n    type: WorkerRequestType.DeriveNearKeypairAndEncrypt;\n    request: WasmDeriveNearKeypairAndEncryptRequest;\n    result: WasmDeriveNearKeypairAndEncryptResult;\n  };\n  [WorkerRequestType.RecoverKeypairFromPasskey]: {\n    type: WorkerRequestType.RecoverKeypairFromPasskey;\n    request: WasmRecoverKeypairRequest;\n    result: WasmRecoverKeypairResult;\n  };\n  [WorkerRequestType.CheckCanRegisterUser]: {\n    type: WorkerRequestType.CheckCanRegisterUser;\n    request: WasmCheckCanRegisterUserRequest;\n    result: WasmRegistrationCheckResult;\n  };\n  [WorkerRequestType.SignVerifyAndRegisterUser]: {\n    type: WorkerRequestType.SignVerifyAndRegisterUser;\n    request: WasmSignVerifyAndRegisterUserRequest;\n    result: WasmRegistrationResult;\n  };\n  [WorkerRequestType.SignTransactionsWithActions]: {\n    type: WorkerRequestType.SignTransactionsWithActions;\n    request: WasmSignTransactionsWithActionsRequest;\n    result: WasmTransactionSignResult;\n  };\n  [WorkerRequestType.DecryptPrivateKeyWithPrf]: {\n    type: WorkerRequestType.DecryptPrivateKeyWithPrf;\n    request: WasmDecryptPrivateKeyRequest;\n    result: WasmDecryptPrivateKeyResult;\n  };\n  [WorkerRequestType.ExtractCosePublicKey]: {\n    type: WorkerRequestType.ExtractCosePublicKey;\n    request: WasmExtractCosePublicKeyRequest;\n    result: wasmModule.CoseExtractionResult;\n  };\n  [WorkerRequestType.SignTransactionWithKeyPair]: {\n    type: WorkerRequestType.SignTransactionWithKeyPair;\n    request: WasmSignTransactionWithKeyPairRequest;\n    result: WasmTransactionSignResult;\n  };\n  [WorkerRequestType.SignNep413Message]: {\n    type: WorkerRequestType.SignNep413Message;\n    request: WasmSignNep413MessageRequest;\n    result: wasmModule.SignNep413Result;\n  };\n}\n\nexport type WasmSignerWorkerRequest = {\n  type: WorkerRequestType;\n  request: WasmRequestPayload;\n  result: WasmRequestResult;\n}\n\nexport type WasmDeriveNearKeypairAndEncryptRequest = StripFree<wasmModule.DeriveNearKeypairAndEncryptRequest>;\nexport type WasmRecoverKeypairRequest = StripFree<wasmModule.RecoverKeypairRequest>;\nexport type WasmCheckCanRegisterUserRequest = StripFree<wasmModule.CheckCanRegisterUserRequest>;\nexport type WasmSignVerifyAndRegisterUserRequest = StripFree<wasmModule.SignVerifyAndRegisterUserRequest>;\n// Override the WASM request type to accept string literals for confirmation config\nexport type WasmSignTransactionsWithActionsRequest = Omit<StripFree<wasmModule.SignTransactionsWithActionsRequest>, 'confirmationConfig'> & {\n  confirmationConfig?: {\n    uiMode: ConfirmationUIMode;\n    behavior: ConfirmationBehavior;\n    autoProceedDelay?: number;\n    theme?: 'dark' | 'light';\n  };\n};\nexport type WasmDecryptPrivateKeyRequest = StripFree<wasmModule.DecryptPrivateKeyRequest>;\nexport type WasmExtractCosePublicKeyRequest = StripFree<wasmModule.ExtractCoseRequest>;\nexport type WasmSignNep413MessageRequest = StripFree<wasmModule.SignNep413Request>;\nexport type WasmSignTransactionWithKeyPairRequest = StripFree<wasmModule.SignTransactionWithKeyPairRequest>;\n\nexport type WasmRequestPayload = WasmDeriveNearKeypairAndEncryptRequest\n  | WasmRecoverKeypairRequest\n  | WasmCheckCanRegisterUserRequest\n  | WasmSignVerifyAndRegisterUserRequest\n  | WasmSignTransactionsWithActionsRequest\n  | WasmDecryptPrivateKeyRequest\n  | WasmExtractCosePublicKeyRequest\n  | WasmSignNep413MessageRequest\n  | WasmSignTransactionWithKeyPairRequest;\n\n// WASM Worker Response Types\nexport type WasmRecoverKeypairResult = InstanceType<typeof wasmModule.RecoverKeypairResult>;\nexport type WasmRegistrationResult = InstanceType<typeof wasmModule.RegistrationResult>;\nexport type WasmRegistrationCheckResult = InstanceType<typeof wasmModule.RegistrationCheckResult>;\nexport type WasmRegistrationInfo = InstanceType<typeof wasmModule.RegistrationInfoStruct>;\nexport type WasmSignedTransaction = InstanceType<typeof wasmModule.WasmSignedTransaction>;\nexport type WasmTransactionSignResult = InstanceType<typeof wasmModule.TransactionSignResult>;\nexport type WasmDecryptPrivateKeyResult = InstanceType<typeof wasmModule.DecryptPrivateKeyResult>;\nexport type WasmDeriveNearKeypairAndEncryptResult = InstanceType<typeof wasmModule.DeriveNearKeypairAndEncryptResult>;\n\n/**\n * Validation rules for ConfirmationConfig to ensure behavior conforms to UI mode:\n *\n * - uiMode: 'skip' | 'embedded' → behavior is ignored, autoProceedDelay is ignored\n * - uiMode: 'modal' → behavior: 'requireClick' | 'autoProceed', autoProceedDelay only used with 'autoProceed'\n *\n * The WASM worker automatically validates and overrides these settings:\n * - For 'skip' and 'embedded' modes: behavior is set to 'autoProceed' with autoProceedDelay: 0\n * - For 'modal' mode: behavior and autoProceedDelay are used as specified\n *\n * The actual type would be the following, but we use the flat interface for simplicity:\n * export interface ConfirmationConfig {\n *   uiMode: 'skip'\n *     | 'embedded'\n *     | { modal: { behavior: { requireClick: true } |  { autoProceed: { autoProceedDelay: 0 }}}}\n *\n * }\n */\nexport type ConfirmationUIMode = 'skip' | 'modal' | 'embedded';\nexport type ConfirmationBehavior = 'requireClick' | 'autoProceed';\nexport interface ConfirmationConfig {\n  /** Type of UI to display for confirmation: 'skip' | 'modal' | 'embedded' */\n  uiMode: ConfirmationUIMode;\n  /** How the confirmation UI behaves: 'requireClick' | 'autoProceed' */\n  behavior: ConfirmationBehavior;\n  /** Delay in milliseconds before auto-proceeding (only used with autoProceed) */\n  autoProceedDelay?: number;\n  /** Theme for the confirmation UI: 'dark' | 'light' */\n  theme: 'dark' | 'light';\n}\n\nexport const DEFAULT_CONFIRMATION_CONFIG: ConfirmationConfig = {\n  uiMode: 'modal',\n  behavior: 'autoProceed',\n  autoProceedDelay: 1000,\n  theme: 'dark',\n};\n\n// WASM enum types for confirmation configuration\nexport type WasmConfirmationUIMode = wasmModule.ConfirmationUIMode;\nexport type WasmConfirmationBehavior = wasmModule.ConfirmationBehavior;\n\n// Mapping functions to convert string literals to numeric enum values\nexport const mapUIModeToWasm = (uiMode: ConfirmationUIMode): number => {\n  switch (uiMode) {\n    case 'skip': return wasmModule.ConfirmationUIMode.Skip;\n    case 'modal': return wasmModule.ConfirmationUIMode.Modal;\n    case 'embedded': return wasmModule.ConfirmationUIMode.Embedded;\n    default: return wasmModule.ConfirmationUIMode.Modal;\n  }\n};\n\nexport const mapBehaviorToWasm = (behavior: ConfirmationBehavior): number => {\n  switch (behavior) {\n    case 'requireClick': return wasmModule.ConfirmationBehavior.RequireClick;\n    case 'autoProceed': return wasmModule.ConfirmationBehavior.AutoProceed;\n    default: return wasmModule.ConfirmationBehavior.RequireClick;\n  }\n};\nexport type WasmRequestResult = WasmRecoverKeypairResult\n  | WasmRegistrationResult\n  | WasmRegistrationCheckResult\n  | WasmRegistrationInfo\n  | WasmSignedTransaction\n  | WasmTransactionSignResult\n  | WasmDecryptPrivateKeyResult\n\nexport interface SignerWorkerMessage<T extends WorkerRequestType, R extends WasmRequestPayload> {\n  type: T;\n  payload: R;\n}\n\n/**\n * =============================\n * Worker Progress Message Types\n * =============================\n *\n * 1. PROGRESS MESSAGES (During Operation):\n *    Rust WASM → send_typed_progress_message() → TypeScript sendProgressMessage() → postMessage() → Main Thread\n *    - Used for real-time updates during long operations\n *    - Multiple progress messages can be sent per operation\n *    - Does not affect the final result\n *    - Types: ProgressMessageType, ProgressStep, ProgressStatus (auto-generated from Rust)\n *\n * 2. FINAL RESULTS (Operation Complete):\n *    Rust WASM → return value from handle_signer_message() → TypeScript worker → postMessage() → Main Thread\n *    - Contains the actual operation result (success/error)\n *    - Only one result message per operation\n *    - This is what the main thread awaits for completion\n */\n\n// === PROGRESS MESSAGE TYPES ===\n\n// Basic interface for development - actual types are auto-generated from Rust\nexport type ProgressMessage = wasmModule.WorkerProgressMessage;\n\n// Type guard for basic progress message validation during development\nexport function isProgressMessage(obj: any): obj is ProgressMessage {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    typeof obj.message_type === 'string' &&\n    typeof obj.step === 'string' &&\n    typeof obj.message === 'string' &&\n    typeof obj.status === 'string'\n  );\n}\n\nexport enum ProgressMessageType {\n  REGISTRATION_PROGRESS = 'REGISTRATION_PROGRESS',\n  REGISTRATION_COMPLETE = 'REGISTRATION_COMPLETE',\n  EXECUTE_ACTIONS_PROGRESS = 'EXECUTE_ACTIONS_PROGRESS',\n  EXECUTE_ACTIONS_COMPLETE = 'EXECUTE_ACTIONS_COMPLETE',\n}\n\n// Step identifiers for progress tracking\n// This enum exactly matches the Rust WASM ProgressStep enum from:\n// packages/passkey/src/wasm_signer_worker/src/types/progress.rs\n// The string values come from the progress_step_name() function in that file\nexport enum ProgressStep {\n  PREPARATION = 'preparation',                           // Rust: Preparation\n  WEBAUTHN_AUTHENTICATION = 'webauthn-authentication',   // Rust: WebauthnAuthentication\n  AUTHENTICATION_COMPLETE = 'authentication-complete',   // Rust: AuthenticationComplete\n  TRANSACTION_SIGNING_PROGRESS = 'transaction-signing-progress', // Rust: TransactionSigningProgress\n  TRANSACTION_SIGNING_COMPLETE = 'transaction-signing-complete', // Rust: TransactionSigningComplete\n  ERROR = 'error',                                       // Rust: Error\n}\n\nexport interface ProgressStepMap {\n  [wasmModule.ProgressStep.Preparation]: ProgressStep.PREPARATION;\n  [wasmModule.ProgressStep.WebauthnAuthentication]: ProgressStep.WEBAUTHN_AUTHENTICATION;\n  [wasmModule.ProgressStep.AuthenticationComplete]: ProgressStep.AUTHENTICATION_COMPLETE;\n  [wasmModule.ProgressStep.TransactionSigningProgress]: ProgressStep.TRANSACTION_SIGNING_PROGRESS;\n  [wasmModule.ProgressStep.TransactionSigningComplete]: ProgressStep.TRANSACTION_SIGNING_COMPLETE;\n  [wasmModule.ProgressStep.Error]: ProgressStep.ERROR;\n}\n\n// === RESPONSE MESSAGE INTERFACES ===\n\n// Base interface for all worker responses\nexport interface BaseWorkerResponse {\n  type: WorkerResponseType;\n  payload: Record<string, any>;\n}\n\n// Map request types to their expected success response payloads (WASM types)\nexport interface RequestResponseMap {\n  [WorkerRequestType.DeriveNearKeypairAndEncrypt]: WasmDeriveNearKeypairAndEncryptResult;\n  [WorkerRequestType.RecoverKeypairFromPasskey]: WasmRecoverKeypairResult;\n  [WorkerRequestType.CheckCanRegisterUser]: WasmRegistrationCheckResult;\n  [WorkerRequestType.SignVerifyAndRegisterUser]: WasmRegistrationResult;\n  [WorkerRequestType.DecryptPrivateKeyWithPrf]: WasmDecryptPrivateKeyResult;\n  [WorkerRequestType.SignTransactionsWithActions]: WasmTransactionSignResult;\n  [WorkerRequestType.ExtractCosePublicKey]: wasmModule.CoseExtractionResult;\n  [WorkerRequestType.SignTransactionWithKeyPair]: WasmTransactionSignResult;\n  [WorkerRequestType.SignNep413Message]: wasmModule.SignNep413Result;\n}\n\n// Generic success response type that uses WASM types\nexport interface WorkerSuccessResponse<T extends WorkerRequestType> extends BaseWorkerResponse {\n  type: WorkerResponseType;\n  payload: RequestResponseMap[T];\n}\n\n// Generic error response type\nexport interface WorkerErrorResponse extends BaseWorkerResponse {\n  type: WorkerResponseType;\n  payload: {\n    error: string;\n    errorCode?: WorkerErrorCode;\n    context?: Record<string, any>;\n  };\n}\n\nexport enum WorkerErrorCode {\n  WASM_INIT_FAILED = 'WASM_INIT_FAILED',\n  INVALID_REQUEST = 'INVALID_REQUEST',\n  TIMEOUT = 'TIMEOUT',\n  ENCRYPTION_FAILED = 'ENCRYPTION_FAILED',\n  DECRYPTION_FAILED = 'DECRYPTION_FAILED',\n  SIGNING_FAILED = 'SIGNING_FAILED',\n  STORAGE_FAILED = 'STORAGE_FAILED',\n  UNKNOWN_ERROR = 'UNKNOWN_ERROR',\n}\n\nexport interface WorkerProgressResponse extends BaseWorkerResponse {\n  type: WorkerResponseType;\n  payload: onProgressEvents\n}\n\n// === MAIN RESPONSE TYPE ===\n\nexport type WorkerResponseForRequest<T extends WorkerRequestType> =\n  | WorkerSuccessResponse<T>\n  | WorkerErrorResponse\n  | WorkerProgressResponse;\n\n// === CONVENIENCE TYPE ALIASES ===\n\nexport type EncryptionResponse = WorkerResponseForRequest<typeof WorkerRequestType.DeriveNearKeypairAndEncrypt>;\nexport type RecoveryResponse = WorkerResponseForRequest<typeof WorkerRequestType.RecoverKeypairFromPasskey>;\nexport type CheckRegistrationResponse = WorkerResponseForRequest<typeof WorkerRequestType.CheckCanRegisterUser>;\nexport type RegistrationResponse = WorkerResponseForRequest<typeof WorkerRequestType.SignVerifyAndRegisterUser>;\nexport type TransactionResponse = WorkerResponseForRequest<typeof WorkerRequestType.SignTransactionsWithActions>;\nexport type DecryptionResponse = WorkerResponseForRequest<typeof WorkerRequestType.DecryptPrivateKeyWithPrf>;\nexport type CoseExtractionResponse = WorkerResponseForRequest<typeof WorkerRequestType.ExtractCosePublicKey>;\nexport type Nep413SigningResponse = WorkerResponseForRequest<typeof WorkerRequestType.SignNep413Message>;\n\n// === TYPE GUARDS FOR GENERIC RESPONSES ===\n\nexport function isWorkerProgress<T extends WorkerRequestType>(\n  response: WorkerResponseForRequest<T>\n): response is WorkerProgressResponse {\n  return (\n    response.type === WorkerResponseType.RegistrationProgress ||\n    response.type === WorkerResponseType.RegistrationComplete ||\n    response.type === WorkerResponseType.ExecuteActionsProgress ||\n    response.type === WorkerResponseType.ExecuteActionsComplete\n  );\n}\n\nexport function isWorkerSuccess<T extends WorkerRequestType>(\n  response: WorkerResponseForRequest<T>\n): response is WorkerSuccessResponse<T> {\n  return (\n    response.type === WorkerResponseType.DeriveNearKeypairAndEncryptSuccess ||\n    response.type === WorkerResponseType.RecoverKeypairFromPasskeySuccess ||\n    response.type === WorkerResponseType.CheckCanRegisterUserSuccess ||\n    response.type === WorkerResponseType.DecryptPrivateKeyWithPrfSuccess ||\n    response.type === WorkerResponseType.SignTransactionsWithActionsSuccess ||\n    response.type === WorkerResponseType.ExtractCosePublicKeySuccess ||\n    response.type === WorkerResponseType.SignTransactionWithKeyPairSuccess ||\n    response.type === WorkerResponseType.SignNep413MessageSuccess ||\n    response.type === WorkerResponseType.SignVerifyAndRegisterUserSuccess\n  );\n}\n\nexport function isWorkerError<T extends WorkerRequestType>(\n  response: WorkerResponseForRequest<T>\n): response is WorkerErrorResponse {\n  return (\n    response.type === WorkerResponseType.DeriveNearKeypairAndEncryptFailure ||\n    response.type === WorkerResponseType.RecoverKeypairFromPasskeyFailure ||\n    response.type === WorkerResponseType.CheckCanRegisterUserFailure ||\n    response.type === WorkerResponseType.DecryptPrivateKeyWithPrfFailure ||\n    response.type === WorkerResponseType.SignTransactionsWithActionsFailure ||\n    response.type === WorkerResponseType.ExtractCosePublicKeyFailure ||\n    response.type === WorkerResponseType.SignTransactionWithKeyPairFailure ||\n    response.type === WorkerResponseType.SignNep413MessageFailure ||\n    response.type === WorkerResponseType.SignVerifyAndRegisterUserFailure\n  );\n}\n\n// === SPECIFIC TYPE GUARDS FOR COMMON OPERATIONS ===\n\nexport function isDeriveNearKeypairAndEncryptSuccess(response: EncryptionResponse): response is WorkerSuccessResponse<typeof WorkerRequestType.DeriveNearKeypairAndEncrypt> {\n  return response.type === WorkerResponseType.DeriveNearKeypairAndEncryptSuccess;\n}\n\nexport function isRecoverKeypairFromPasskeySuccess(response: RecoveryResponse): response is WorkerSuccessResponse<typeof WorkerRequestType.RecoverKeypairFromPasskey> {\n  return response.type === WorkerResponseType.RecoverKeypairFromPasskeySuccess;\n}\n\nexport function isCheckCanRegisterUserSuccess(response: CheckRegistrationResponse): response is WorkerSuccessResponse<typeof WorkerRequestType.CheckCanRegisterUser> {\n  return response.type === WorkerResponseType.CheckCanRegisterUserSuccess;\n}\n\nexport function isSignVerifyAndRegisterUserSuccess(response: RegistrationResponse): response is WorkerSuccessResponse<typeof WorkerRequestType.SignVerifyAndRegisterUser> {\n  return response.type === WorkerResponseType.SignVerifyAndRegisterUserSuccess;\n}\n\nexport function isSignTransactionsWithActionsSuccess(response: TransactionResponse): response is WorkerSuccessResponse<typeof WorkerRequestType.SignTransactionsWithActions> {\n  return response.type === WorkerResponseType.SignTransactionsWithActionsSuccess;\n}\n\nexport function isDecryptPrivateKeyWithPrfSuccess(response: DecryptionResponse): response is WorkerSuccessResponse<typeof WorkerRequestType.DecryptPrivateKeyWithPrf> {\n  return response.type === WorkerResponseType.DecryptPrivateKeyWithPrfSuccess;\n}\n\nexport function isExtractCosePublicKeySuccess(response: CoseExtractionResponse): response is WorkerSuccessResponse<typeof WorkerRequestType.ExtractCosePublicKey> {\n  return response.type === WorkerResponseType.ExtractCosePublicKeySuccess;\n}\n\nexport function isSignNep413MessageSuccess(response: Nep413SigningResponse): response is WorkerSuccessResponse<typeof WorkerRequestType.SignNep413Message> {\n  return response.type === WorkerResponseType.SignNep413MessageSuccess;\n}\n"],"mappings":";;;AAoJA,MAAaA,8BAAkD;CAC7D,QAAQ;CACR,UAAU;CACV,kBAAkB;CAClB,OAAO;;AA+KT,SAAgB,iBACd,UACoC;AACpC,QACE,SAAS,SAAS,mBAAmB,wBACrC,SAAS,SAAS,mBAAmB,wBACrC,SAAS,SAAS,mBAAmB,0BACrC,SAAS,SAAS,mBAAmB;;AAIzC,SAAgB,gBACd,UACsC;AACtC,QACE,SAAS,SAAS,mBAAmB,sCACrC,SAAS,SAAS,mBAAmB,oCACrC,SAAS,SAAS,mBAAmB,+BACrC,SAAS,SAAS,mBAAmB,mCACrC,SAAS,SAAS,mBAAmB,sCACrC,SAAS,SAAS,mBAAmB,+BACrC,SAAS,SAAS,mBAAmB,qCACrC,SAAS,SAAS,mBAAmB,4BACrC,SAAS,SAAS,mBAAmB;;AAIzC,SAAgB,cACd,UACiC;AACjC,QACE,SAAS,SAAS,mBAAmB,sCACrC,SAAS,SAAS,mBAAmB,oCACrC,SAAS,SAAS,mBAAmB,+BACrC,SAAS,SAAS,mBAAmB,mCACrC,SAAS,SAAS,mBAAmB,sCACrC,SAAS,SAAS,mBAAmB,+BACrC,SAAS,SAAS,mBAAmB,qCACrC,SAAS,SAAS,mBAAmB,4BACrC,SAAS,SAAS,mBAAmB;;AAMzC,SAAgB,qCAAqC,UAAuH;AAC1K,QAAO,SAAS,SAAS,mBAAmB;;AAG9C,SAAgB,mCAAmC,UAAmH;AACpK,QAAO,SAAS,SAAS,mBAAmB;;AAG9C,SAAgB,8BAA8B,UAAuH;AACnK,QAAO,SAAS,SAAS,mBAAmB;;AAG9C,SAAgB,mCAAmC,UAAuH;AACxK,QAAO,SAAS,SAAS,mBAAmB;;AAG9C,SAAgB,qCAAqC,UAAwH;AAC3K,QAAO,SAAS,SAAS,mBAAmB;;AAG9C,SAAgB,kCAAkC,UAAoH;AACpK,QAAO,SAAS,SAAS,mBAAmB;;AAG9C,SAAgB,8BAA8B,UAAoH;AAChK,QAAO,SAAS,SAAS,mBAAmB;;AAG9C,SAAgB,2BAA2B,UAAgH;AACzJ,QAAO,SAAS,SAAS,mBAAmB"}