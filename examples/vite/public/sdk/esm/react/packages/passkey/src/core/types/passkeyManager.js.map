{"version":3,"file":"passkeyManager.js","names":[],"sources":["../../../../../../../../src/core/types/passkeyManager.ts"],"sourcesContent":["import { FinalExecutionOutcome, TxExecutionStatus } from \"@near-js/types\";\nimport type { EncryptedVRFKeypair } from './vrf-worker';\nimport { AccountId } from \"./accountIds\";\nimport { SignedTransaction } from \"../NearClient\";\nimport type { AuthenticatorOptions } from './authenticatorOptions';\n\n//////////////////////////\n// Progress Events Enums\n//////////////////////////\n\n// Registration Enums\nexport enum RegistrationPhase {\n  STEP_1_WEBAUTHN_VERIFICATION = 'webauthn-verification',\n  STEP_2_KEY_GENERATION = 'key-generation',\n  STEP_3_ACCESS_KEY_ADDITION = 'access-key-addition',\n  STEP_4_ACCOUNT_VERIFICATION = 'account-verification',\n  STEP_5_DATABASE_STORAGE = 'database-storage',\n  STEP_6_CONTRACT_REGISTRATION = 'contract-registration',\n  STEP_7_REGISTRATION_COMPLETE = 'registration-complete',\n  REGISTRATION_ERROR = 'error',\n}\nexport enum RegistrationStatus {\n  PROGRESS = 'progress',\n  SUCCESS = 'success',\n  ERROR = 'error',\n}\n\n// Login Enums\nexport enum LoginPhase {\n  STEP_1_PREPARATION = 'preparation',\n  STEP_2_WEBAUTHN_ASSERTION = 'webauthn-assertion',\n  STEP_3_VRF_UNLOCK = 'vrf-unlock',\n  STEP_4_LOGIN_COMPLETE = 'login-complete',\n  LOGIN_ERROR = 'login-error',\n}\nexport enum LoginStatus {\n  PROGRESS = 'progress',\n  SUCCESS = 'success',\n  ERROR = 'error',\n}\n\n// Action Enums\nexport enum ActionPhase {\n  STEP_1_PREPARATION = 'preparation',                                    // Rust WASM worker phase: Preparation = 100\n  STEP_2_USER_CONFIRMATION = 'user-confirmation',                        // Rust WASM worker phase: UserConfirmation = 101\n  STEP_3_CONTRACT_VERIFICATION = 'contract-verification',                // Rust WASM worker phase: ContractVerification = 102\n  STEP_4_WEBAUTHN_AUTHENTICATION = 'webauthn-authentication',            // Rust WASM worker phase: WebauthnAuthentication = 103\n  STEP_5_AUTHENTICATION_COMPLETE = 'authentication-complete',            // Rust WASM worker phase: AuthenticationComplete = 104\n  STEP_6_TRANSACTION_SIGNING_PROGRESS = 'transaction-signing-progress',  // Rust WASM worker phase: TransactionSigningProgress = 105\n  STEP_7_TRANSACTION_SIGNING_COMPLETE = 'transaction-signing-complete',  // Rust WASM worker phase: TransactionSigningComplete = 106\n  WASM_ERROR = 'wasm-error',                                             // Rust WASM worker phase: Error = 107\n  STEP_8_BROADCASTING = 'broadcasting',\n  STEP_9_ACTION_COMPLETE = 'action-complete',\n  ACTION_ERROR = 'action-error',\n}\nexport enum ActionStatus {\n  PROGRESS = 'progress',\n  SUCCESS = 'success',\n  ERROR = 'error',\n}\n\n// Account Recovery Enums\nexport enum AccountRecoveryPhase {\n  STEP_1_PREPARATION = 'preparation',\n  STEP_2_WEBAUTHN_AUTHENTICATION = 'webauthn-authentication',\n  STEP_3_SYNC_AUTHENTICATORS_ONCHAIN = 'sync-authenticators-onchain',\n  STEP_4_AUTHENTICATOR_SAVED = 'authenticator-saved',\n  STEP_5_ACCOUNT_RECOVERY_COMPLETE = 'account-recovery-complete',\n  ERROR = 'error',\n}\nexport enum AccountRecoveryStatus {\n  PROGRESS = 'progress',\n  SUCCESS = 'success',\n  ERROR = 'error',\n}\n\n// Device Linking Enums\nexport enum DeviceLinkingPhase {\n  STEP_1_QR_CODE_GENERATED = 'qr-code-generated',   // Device2: QR code created and displayed\n  STEP_2_SCANNING = 'scanning',                     // Device1: Scanning QR code\n  STEP_3_AUTHORIZATION = 'authorization',           // Device1: TouchID authorization\n  STEP_4_POLLING = 'polling',                       // Device2: Polling contract for mapping\n  STEP_5_ADDKEY_DETECTED = 'addkey-detected',       // Device2: AddKey transaction detected\n  STEP_6_REGISTRATION = 'registration',             // Device2: Registration and credential storage\n  STEP_7_LINKING_COMPLETE = 'linking-complete',     // Final completion\n  STEP_8_AUTO_LOGIN = 'auto-login',                 // Auto-login after registration\n  IDLE = 'idle',                                    // Idle state\n  REGISTRATION_ERROR = 'registration-error',        // Error during registration\n  LOGIN_ERROR = 'login-error',                      // Error during login\n  DEVICE_LINKING_ERROR = 'error',                   // General error state\n}\nexport enum DeviceLinkingStatus {\n  PROGRESS = 'progress',\n  SUCCESS = 'success',\n  ERROR = 'error',\n}\n\n// Base event callback type\nexport type EventCallback<T> = (event: T) => void;\n\n// Operation hooks for before/after call customization\nexport interface OperationHooks {\n  beforeCall?: () => void | Promise<void>;\n  afterCall?: (\n    success: boolean,\n    result?: ActionResult[] | LoginResult | RegistrationResult | Error\n  ) => void | Promise<void>;\n}\n\n// Base SSE Event Types (unified for Registration and Actions)\nexport interface BaseSSEEvent {\n  step: number;\n  phase: RegistrationPhase | LoginPhase | ActionPhase | DeviceLinkingPhase | AccountRecoveryPhase;\n  status: RegistrationStatus | LoginStatus | ActionStatus | DeviceLinkingStatus | AccountRecoveryStatus;\n  message: string;\n}\n\n// Registration-specific events\nexport interface BaseRegistrationSSEEvent extends BaseSSEEvent {\n  phase: RegistrationPhase;\n  status: RegistrationStatus;\n}\n\n// Action-specific events\nexport interface BaseActionSSEEvent extends BaseSSEEvent {\n  phase: ActionPhase;\n  status: ActionStatus;\n}\n\n// Login-specific events\nexport interface BaseLoginSSEEvent extends BaseSSEEvent {\n  phase: LoginPhase;\n  status: LoginStatus;\n}\n\nexport interface BaseDeviceLinkingSSEEvent extends BaseSSEEvent {\n  phase: DeviceLinkingPhase;\n  status: DeviceLinkingStatus;\n}\n\n// Action-specific events\nexport interface BaseAccountRecoveryEvent extends BaseSSEEvent {\n  phase: AccountRecoveryPhase;\n  status: AccountRecoveryStatus;\n}\n\n// Progress Events\nexport interface onProgressEvents extends BaseActionSSEEvent {\n  step: number;\n  status: ActionStatus;\n  message: string;\n  data?: any;\n  logs?: string[];\n}\n\n/////////////////////////////////////////////\n// SDK-Sent-Events: Registration Event Types\n/////////////////////////////////////////////\n\nexport interface RegistrationEventStep1 extends BaseRegistrationSSEEvent {\n  step: 1;\n  phase: RegistrationPhase.STEP_1_WEBAUTHN_VERIFICATION;\n}\n\nexport interface RegistrationEventStep2 extends BaseRegistrationSSEEvent {\n  step: 2;\n  phase: RegistrationPhase.STEP_2_KEY_GENERATION;\n  status: RegistrationStatus.SUCCESS;\n  verified: boolean;\n  nearAccountId: string;\n  nearPublicKey: string | null | undefined;\n  vrfPublicKey: string | null | undefined;\n}\n\nexport interface RegistrationEventStep3 extends BaseRegistrationSSEEvent {\n  step: 3;\n  phase: RegistrationPhase.STEP_3_ACCESS_KEY_ADDITION;\n  error?: string;\n}\n\nexport interface RegistrationEventStep4 extends BaseRegistrationSSEEvent {\n  step: 4;\n  phase: RegistrationPhase.STEP_4_ACCOUNT_VERIFICATION;\n  error?: string;\n}\n\nexport interface RegistrationEventStep5 extends BaseRegistrationSSEEvent {\n  step: 5;\n  phase: RegistrationPhase.STEP_5_DATABASE_STORAGE;\n  error?: string;\n}\n\nexport interface RegistrationEventStep6 extends BaseRegistrationSSEEvent {\n  step: 6;\n  phase: RegistrationPhase.STEP_6_CONTRACT_REGISTRATION;\n  error?: string;\n}\n\nexport interface RegistrationEventStep7 extends BaseRegistrationSSEEvent {\n  step: 7;\n  phase: RegistrationPhase.STEP_7_REGISTRATION_COMPLETE;\n  status: RegistrationStatus.SUCCESS;\n}\n\nexport interface RegistrationEventStep0 extends BaseRegistrationSSEEvent {\n  step: 0;\n  phase: RegistrationPhase.REGISTRATION_ERROR;\n  status: RegistrationStatus.ERROR;\n  error: string;\n}\n\nexport type RegistrationSSEEvent =\n  | RegistrationEventStep1\n  | RegistrationEventStep2\n  | RegistrationEventStep3\n  | RegistrationEventStep4\n  | RegistrationEventStep5\n  | RegistrationEventStep6\n  | RegistrationEventStep7\n  | RegistrationEventStep0;\n\n/////////////////////////////////////////////\n// SDK-Sent-Events: Login Event Types\n/////////////////////////////////////////////\n\nexport interface LoginSSEventStep1 extends BaseLoginSSEEvent {\n  step: 1;\n  phase: LoginPhase.STEP_1_PREPARATION;\n}\n\nexport interface LoginSSEventStep2 extends BaseLoginSSEEvent {\n  step: 2;\n  phase: LoginPhase.STEP_2_WEBAUTHN_ASSERTION;\n}\n\nexport interface LoginSSEventStep3 extends BaseLoginSSEEvent {\n  step: 3;\n  phase: LoginPhase.STEP_3_VRF_UNLOCK;\n}\n\nexport interface LoginSSEventStep4 extends BaseLoginSSEEvent {\n  step: 4;\n  phase: LoginPhase.STEP_4_LOGIN_COMPLETE;\n  status: LoginStatus.SUCCESS;\n  nearAccountId: string;\n  clientNearPublicKey: string;\n}\n\nexport interface LoginSSEventStep0 extends BaseLoginSSEEvent {\n  step: 0;\n  phase: LoginPhase.LOGIN_ERROR;\n  status: LoginStatus.ERROR;\n  error: string;\n}\n\nexport type LoginSSEvent =\n  | LoginSSEventStep1\n  | LoginSSEventStep2\n  | LoginSSEventStep3\n  | LoginSSEventStep4\n  | LoginSSEventStep0;\n\n/////////////////////////////////////////////\n// SDK-Sent-Events: Action Event Types\n/////////////////////////////////////////////\n\nexport interface ActionEventStep1 extends BaseActionSSEEvent {\n  step: 1;\n  phase: ActionPhase.STEP_1_PREPARATION;\n}\n\nexport interface ActionEventStep2 extends BaseActionSSEEvent {\n  step: 2;\n  phase: ActionPhase.STEP_2_USER_CONFIRMATION;\n}\n\nexport interface ActionEventStep3 extends BaseActionSSEEvent {\n  step: 3;\n  phase: ActionPhase.STEP_3_CONTRACT_VERIFICATION;\n}\n\nexport interface ActionEventStep4 extends BaseActionSSEEvent {\n  step: 4;\n  phase: ActionPhase.STEP_4_WEBAUTHN_AUTHENTICATION;\n  data?: any;\n  logs?: string[];\n}\n\nexport interface ActionEventStep5 extends BaseActionSSEEvent {\n  step: 5;\n  phase: ActionPhase.STEP_5_AUTHENTICATION_COMPLETE;\n  data?: any;\n  logs?: string[];\n}\n\nexport interface ActionEventStep6 extends BaseActionSSEEvent {\n  step: 6;\n  phase: ActionPhase.STEP_6_TRANSACTION_SIGNING_PROGRESS;\n}\n\nexport interface ActionEventStep7 extends BaseActionSSEEvent {\n  step: 7;\n  phase: ActionPhase.STEP_7_TRANSACTION_SIGNING_COMPLETE;\n  status: ActionStatus.SUCCESS;\n  data?: any;\n}\n\nexport interface ActionEventStep8 extends BaseActionSSEEvent {\n  step: 8;\n  phase: ActionPhase.STEP_8_BROADCASTING;\n}\n\nexport interface ActionEventStep9 extends BaseActionSSEEvent {\n  step: 9;\n  phase: ActionPhase.STEP_9_ACTION_COMPLETE;\n  status: ActionStatus.SUCCESS;\n  data?: any;\n}\n\nexport interface ActionEventError extends BaseActionSSEEvent {\n  step: 0;\n  phase: ActionPhase.ACTION_ERROR;\n  status: ActionStatus.ERROR;\n  error: string;\n}\n\nexport interface ActionEventWasmError extends BaseActionSSEEvent {\n  step: 0;\n  phase: ActionPhase.WASM_ERROR;\n  status: ActionStatus.ERROR;\n  error: string;\n}\n\nexport type ActionSSEEvent =\n  | ActionEventStep1\n  | ActionEventStep2\n  | ActionEventStep3\n  | ActionEventStep4\n  | ActionEventStep5\n  | ActionEventStep6\n  | ActionEventStep7\n  | ActionEventStep8\n  | ActionEventStep9\n  | ActionEventError\n  | ActionEventWasmError;\n\n/////////////////////////////////////////////\n// SDK-Sent-Events: Device Linking Event Types\n/////////////////////////////////////////////\n\nexport interface DeviceLinkingEventStep1 extends BaseDeviceLinkingSSEEvent {\n  step: 1;\n  phase: DeviceLinkingPhase.STEP_1_QR_CODE_GENERATED;\n}\n\nexport interface DeviceLinkingEventStep2 extends BaseDeviceLinkingSSEEvent {\n  step: 2;\n  phase: DeviceLinkingPhase.STEP_2_SCANNING;\n}\n\nexport interface DeviceLinkingEventStep3 extends BaseDeviceLinkingSSEEvent {\n  step: 3;\n  phase: DeviceLinkingPhase.STEP_3_AUTHORIZATION;\n}\n\nexport interface DeviceLinkingEventStep4 extends BaseDeviceLinkingSSEEvent {\n  step: 4;\n  phase: DeviceLinkingPhase.STEP_4_POLLING;\n}\n\nexport interface DeviceLinkingEventStep5 extends BaseDeviceLinkingSSEEvent {\n  step: 5;\n  phase: DeviceLinkingPhase.STEP_5_ADDKEY_DETECTED;\n}\n\nexport interface DeviceLinkingEventStep6 extends BaseDeviceLinkingSSEEvent {\n  step: 6;\n  phase: DeviceLinkingPhase.STEP_6_REGISTRATION;\n}\n\nexport interface DeviceLinkingEventStep7 extends BaseDeviceLinkingSSEEvent {\n  step: 7;\n  phase: DeviceLinkingPhase.STEP_7_LINKING_COMPLETE;\n}\n\nexport interface DeviceLinkingEventStep8 extends BaseDeviceLinkingSSEEvent {\n  step: 8;\n  phase: DeviceLinkingPhase.STEP_8_AUTO_LOGIN;\n}\n\nexport interface DeviceLinkingErrorEvent extends BaseDeviceLinkingSSEEvent {\n  step: 0;\n  phase: DeviceLinkingPhase.DEVICE_LINKING_ERROR\n  | DeviceLinkingPhase.LOGIN_ERROR\n  | DeviceLinkingPhase.REGISTRATION_ERROR;\n  status: DeviceLinkingStatus.ERROR;\n  error: string;\n}\n\nexport type DeviceLinkingSSEEvent =\n  | DeviceLinkingEventStep1\n  | DeviceLinkingEventStep2\n  | DeviceLinkingEventStep3\n  | DeviceLinkingEventStep4\n  | DeviceLinkingEventStep5\n  | DeviceLinkingEventStep6\n  | DeviceLinkingEventStep7\n  | DeviceLinkingEventStep8\n  | DeviceLinkingErrorEvent;\n\n/////////////////////////////////////////////\n// SDK-Sent-Events: Account Recovery Event Types\n/////////////////////////////////////////////\n\nexport interface AccountRecoveryEventStep1 extends BaseAccountRecoveryEvent {\n  step: 1;\n  phase: AccountRecoveryPhase.STEP_1_PREPARATION;\n}\n\nexport interface AccountRecoveryEventStep2 extends BaseAccountRecoveryEvent {\n  step: 2;\n  phase: AccountRecoveryPhase.STEP_2_WEBAUTHN_AUTHENTICATION;\n}\n\nexport interface AccountRecoveryEventStep3 extends BaseAccountRecoveryEvent {\n  step: 3;\n  phase: AccountRecoveryPhase.STEP_3_SYNC_AUTHENTICATORS_ONCHAIN;\n  data?: any;\n  logs?: string[];\n}\n\nexport interface AccountRecoveryEventStep4 extends BaseAccountRecoveryEvent {\n  step: 4;\n  phase: AccountRecoveryPhase.STEP_4_AUTHENTICATOR_SAVED;\n  status: AccountRecoveryStatus.SUCCESS;\n  data?: any;\n}\n\nexport interface AccountRecoveryEventStep5 extends BaseAccountRecoveryEvent {\n  step: 5;\n  phase: AccountRecoveryPhase.STEP_5_ACCOUNT_RECOVERY_COMPLETE;\n  status: AccountRecoveryStatus.SUCCESS;\n  data?: any;\n}\n\nexport interface AccountRecoveryError extends BaseAccountRecoveryEvent {\n  step: 0;\n  phase: AccountRecoveryPhase.ERROR;\n  status: AccountRecoveryStatus.ERROR;\n  error: string;\n}\n\nexport type AccountRecoverySSEEvent =\n  | AccountRecoveryEventStep1\n  | AccountRecoveryEventStep2\n  | AccountRecoveryEventStep3\n  | AccountRecoveryEventStep4\n  | AccountRecoveryEventStep5\n  | AccountRecoveryError;\n\n//////////////////////////////////\n/// Hooks Options\n//////////////////////////////////\n\nexport interface BaseHooksOptions {\n  onEvent?: EventCallback<RegistrationSSEEvent | LoginSSEvent | ActionSSEEvent | DeviceLinkingSSEEvent | AccountRecoverySSEEvent>;\n  onError?: (error: Error) => void;\n  hooks?: OperationHooks;\n}\n\n// Function Options\nexport interface RegistrationHooksOptions {\n  onEvent?: EventCallback<RegistrationSSEEvent>;\n  onError?: (error: Error) => void;\n  hooks?: OperationHooks;\n  useRelayer?: boolean;\n}\n\nexport interface LoginHooksOptions {\n  onEvent?: EventCallback<LoginSSEvent>;\n  onError?: (error: Error) => void;\n  hooks?: OperationHooks;\n}\n\nexport interface ActionHooksOptions {\n  onEvent?: EventCallback<ActionSSEEvent>;\n  onError?: (error: Error) => void;\n  hooks?: OperationHooks;\n  waitUntil?: TxExecutionStatus;\n}\n\nexport interface SignAndSendTransactionHooksOptions {\n  onEvent?: EventCallback<ActionSSEEvent>;\n  onError?: (error: Error) => void;\n  hooks?: OperationHooks;\n  waitUntil?: TxExecutionStatus;\n  executeSequentially?: boolean; // wait for each transaction to finish before sending the next\n}\n\nexport interface SignTransactionHooksOptions {\n  onEvent?: EventCallback<ActionSSEEvent>;\n  onError?: (error: Error) => void;\n  hooks?: Omit<OperationHooks, 'afterCall'>;\n  waitUntil?: TxExecutionStatus;\n}\n\nexport interface SendTransactionHooksOptions {\n  onEvent?: EventCallback<ActionSSEEvent>;\n  onError?: (error: Error) => void;\n  hooks?: Omit<OperationHooks, 'beforeCall'>;\n  waitUntil?: TxExecutionStatus;\n}\n\nexport interface AccountRecoveryHooksOptions {\n  onEvent?: EventCallback<AccountRecoverySSEEvent>;\n  onError?: (error: Error) => void;\n  hooks?: OperationHooks;\n  waitUntil?: TxExecutionStatus;\n}\n\n//////////////////////////////////\n/// State Types\n//////////////////////////////////\n\nexport interface LoginState {\n  isLoggedIn: boolean;\n  nearAccountId: AccountId | null;\n  publicKey: string | null;\n  userData: any | null;\n  vrfActive: boolean;\n  vrfSessionDuration?: number;\n}\n\n\n// Result Types\nexport interface RegistrationResult {\n  success: boolean;\n  error?: string;\n  clientNearPublicKey?: string | null;\n  nearAccountId?: AccountId;\n  transactionId?: string | null;\n  vrfRegistration?: {\n    success: boolean;\n    vrfPublicKey?: string;\n    encryptedVrfKeypair?: EncryptedVRFKeypair;\n    contractVerified?: boolean;\n    error?: string;\n  };\n}\n\nexport interface LoginResult {\n  success: boolean;\n  error?: string;\n  loggedInNearAccountId?: string;\n  clientNearPublicKey?: string | null;\n  nearAccountId?: AccountId;\n}\n\nexport interface ActionResult {\n  success: boolean;\n  error?: string;\n  transactionId?: string;\n  result?: FinalExecutionOutcome;\n}\n\nexport interface VerifyAndSignTransactionResult {\n  signedTransaction: SignedTransaction;\n  nearAccountId: string;\n  logs?: string[];\n}\n\n// PasskeyManager Configuration\nexport interface PasskeyManagerConfigs {\n  nearRpcUrl: string;\n  nearNetwork: 'testnet' | 'mainnet';\n  contractId: 'web3-authn-v5.testnet' | 'web3-authn.near' | string;\n  nearExplorerUrl?: string; // NEAR Explorer URL for transaction links\n  // Optional service iframe configuration (wallet origin hosting sensitive logic)\n  walletOrigin?: string; // e.g., https://wallet.example.com\n  walletServicePath?: string; // defaults to '/service'\n  walletTheme?: 'dark' | 'light';\n  // Relay Server is used to create new NEAR accounts\n  relayer: {\n    // Whether to use the relayer by default on initial load\n    initialUseRelayer: boolean;\n    accountId: string;\n    url: string\n  }\n  // authenticator options for registrations\n  authenticatorOptions?: AuthenticatorOptions;\n  // Shamir 3-pass configuration (optional, used for auto-unlocking VRF keypairs)\n  vrfWorkerConfigs?: {\n    shamir3pass?: {\n      p: string; // Shamir's P prime number\n      relayServerUrl: string; // Relay server URL\n      applyServerLockRoute: string; // Apply server lock route\n      removeServerLockRoute: string; // Remove server lock route\n    }\n  }\n}\n\n// === TRANSACTION TYPES ===\nexport interface TransactionParams {\n  receiverId: string;\n  methodName: string;\n  args: Record<string, any>;\n  gas?: string;\n  deposit?: string;\n}\n"],"mappings":";AAWA,IAAY,kEAAL;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEF,IAAY,oEAAL;AACL;AACA;AACA;;;AAIF,IAAY,oDAAL;AACL;AACA;AACA;AACA;AACA;;;AAEF,IAAY,sDAAL;AACL;AACA;AACA;;;AAIF,IAAY,sDAAL;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEF,IAAY,wDAAL;AACL;AACA;AACA;;;AAIF,IAAY,wEAAL;AACL;AACA;AACA;AACA;AACA;AACA;;;AAEF,IAAY,0EAAL;AACL;AACA;AACA;;;AAIF,IAAY,oEAAL;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEF,IAAY,sEAAL;AACL;AACA;AACA"}