{"version":3,"file":"base64.js","names":[],"sources":["../../../../../../../src/utils/base64.ts"],"sourcesContent":["/**\n * Encodes an ArrayBuffer to standard base64 format for NEAR RPC compatibility.\n * Uses standard base64 characters (+, /, =) rather than base64url encoding.\n * Converts binary data to base64 string using browser's btoa() function.\n *\n * @param value - ArrayBuffer containing the binary data to encode\n * @returns Standard base64-encoded string with padding\n */\nexport const base64Encode = (value: ArrayBuffer): string => {\n  return btoa(String.fromCharCode(...Array.from(new Uint8Array(value))));\n}\n\n/**\n * Decodes a standard base64-encoded string into a Uint8Array.\n * Handles standard base64 format with +, /, and = characters.\n *\n * @param base64 - The base64-encoded string to decode\n * @returns Uint8Array containing the decoded bytes\n * @throws Error if decoding fails due to invalid base64 input\n */\nexport function base64Decode(base64: string): Uint8Array {\n  const binaryString = atob(base64);\n  const bytes = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes;\n}\n\n/**\n * Encodes an ArrayBuffer into a base64url string.\n * Converts binary data to base64 then replaces standard base64 characters with URL-safe ones:\n * + -> -\n * / -> _\n * Removes padding = characters\n *\n * Used for WebAuthn API compatibility in browser environments.\n * Equivalent to Buffer.from(value).toString('base64url') in Node.js.\n *\n * @param value - The ArrayBuffer to encode\n * @returns A base64url-encoded string without padding\n */\nexport const base64UrlEncode = (value: ArrayBuffer): string => {\n  return base64Encode(value)\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=/g, \"\");\n}\n\n/**\n * Decodes a base64url-encoded string into a Uint8Array.\n * Handles base64url format by replacing URL-safe characters and adding padding.\n *\n * @param base64Url - The base64url-encoded string to decode\n * @returns Uint8Array containing the decoded bytes\n * @throws Error if decoding fails due to invalid base64url input\n */\nexport function base64UrlDecode(base64Url: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64Url.length % 4)) % 4);\n  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/') + padding;\n  const binaryString = atob(base64);\n  const bytes = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes;\n}\n\n/**\n * Converts an ArrayBuffer or ArrayBufferLike object to a plain number array for WASM compatibility.\n * WASM bindings require plain number arrays rather than TypedArrays for memory safety and direct access.\n * The resulting array contains values from 0-255 representing raw bytes.\n *\n * @param buffer - The source buffer to convert, either ArrayBuffer or ArrayBufferLike\n * @returns A plain number[] array containing the buffer's bytes\n */\nexport const toWasmByteArray = (buffer: ArrayBuffer | ArrayBufferLike): number[] => {\n  return Array.from(new Uint8Array(buffer));\n}\n"],"mappings":";;;;;;;;;AAQA,MAAa,gBAAgB,UAA+B;AAC1D,QAAO,KAAK,OAAO,aAAa,GAAG,MAAM,KAAK,IAAI,WAAW;;;;;;;;;;;;;;;AAiC/D,MAAa,mBAAmB,UAA+B;AAC7D,QAAO,aAAa,OACjB,QAAQ,OAAO,KACf,QAAQ,OAAO,KACf,QAAQ,MAAM;;;;;;;;;;AAWnB,SAAgB,gBAAgB,WAA+B;CAC7D,MAAM,UAAU,IAAI,QAAQ,IAAK,UAAU,SAAS,KAAM;CAC1D,MAAM,SAAS,UAAU,QAAQ,MAAM,KAAK,QAAQ,MAAM,OAAO;CACjE,MAAM,eAAe,KAAK;CAC1B,MAAM,QAAQ,IAAI,WAAW,aAAa;AAC1C,MAAK,IAAI,IAAI,GAAG,IAAI,aAAa,QAAQ,IACvC,OAAM,KAAK,aAAa,WAAW;AAErC,QAAO"}