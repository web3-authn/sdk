{"version":3,"file":"signTransactionWithKeyPair.js","names":["error: any"],"sources":["../../../../../../../../../../src/core/WebAuthnManager/SignerWorkerManager/handlers/signTransactionWithKeyPair.ts"],"sourcesContent":["\nimport { SignedTransaction } from '../../../NearClient';\nimport { type ActionArgsWasm, validateActionArgsWasm } from '../../../types/actions';\nimport {\n  WorkerRequestType,\n  WorkerResponseType,\n  WasmTransactionSignResult,\n} from '../../../types/signer-worker';\nimport { SignerWorkerManagerContext } from '..';\n\n/**\n * Sign transaction with raw private key (for key replacement in Option D device linking)\n * No TouchID/PRF required - uses provided private key directly\n */\nexport async function signTransactionWithKeyPair({\n  ctx,\n  nearPrivateKey,\n  signerAccountId,\n  receiverId,\n  nonce,\n  blockHash,\n  actions\n}: {\n  ctx: SignerWorkerManagerContext;\n  nearPrivateKey: string;\n  signerAccountId: string;\n  receiverId: string;\n  nonce: string;\n  blockHash: string;\n  actions: ActionArgsWasm[];\n}): Promise<{\n  signedTransaction: SignedTransaction;\n  logs?: string[];\n}> {\n  try {\n    console.info('SignerWorkerManager: Starting transaction signing with provided private key');\n\n    // Validate actions\n    actions.forEach((action, index) => {\n      try {\n        validateActionArgsWasm(action);\n      } catch (error) {\n        throw new Error(`Action ${index} validation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    });\n\n    const response = await ctx.sendMessage<WorkerRequestType.SignTransactionWithKeyPair>({\n      message: {\n        type: WorkerRequestType.SignTransactionWithKeyPair,\n        payload: {\n          nearPrivateKey,\n          signerAccountId,\n          receiverId,\n          nonce,\n          blockHash: blockHash,\n          actions: JSON.stringify(actions)\n        }\n      }\n    });\n\n    if (response.type !== WorkerResponseType.SignTransactionWithKeyPairSuccess) {\n      console.error('SignerWorkerManager: Transaction signing with private key failed:', response);\n      throw new Error('Transaction signing with private key failed');\n    }\n\n    const wasmResult = response.payload as WasmTransactionSignResult;\n    if (!wasmResult.success) {\n      throw new Error(wasmResult.error || 'Transaction signing failed');\n    }\n    // Extract the signed transaction\n    const signedTransactions = wasmResult.signedTransactions || [];\n    if (signedTransactions.length !== 1) {\n      throw new Error(`Expected 1 signed transaction but received ${signedTransactions.length}`);\n    }\n    const signedTx = signedTransactions[0];\n    if (!signedTx || !signedTx.transaction || !signedTx.signature) {\n      throw new Error('Incomplete signed transaction data received');\n    }\n\n    const result = {\n      signedTransaction: new SignedTransaction({\n        transaction: signedTx.transaction,\n        signature: signedTx.signature,\n        borsh_bytes: Array.from(signedTx.borshBytes || [])\n      }),\n      logs: wasmResult.logs\n    };\n\n    console.debug('SignerWorkerManager: Transaction signing with private key successful');\n    return result;\n\n  } catch (error: any) {\n    console.error('SignerWorkerManager: Transaction signing with private key error:', error);\n    throw error;\n  }\n}\n"],"mappings":";;;;;;;;;AAcA,eAAsB,2BAA2B,EAC/C,KACA,gBACA,iBACA,YACA,OACA,WACA,WAYC;AACD,KAAI;AACF,UAAQ,KAAK;AAGb,UAAQ,SAAS,QAAQ,UAAU;AACjC,OAAI;AACF,2BAAuB;YAChB,OAAO;AACd,UAAM,IAAI,MAAM,UAAU,MAAM,sBAAsB,iBAAiB,QAAQ,MAAM,UAAU;;;EAInG,MAAM,WAAW,MAAM,IAAI,YAA0D,EACnF,SAAS;GACP,MAAM,kBAAkB;GACxB,SAAS;IACP;IACA;IACA;IACA;IACW;IACX,SAAS,KAAK,UAAU;;;AAK9B,MAAI,SAAS,SAAS,mBAAmB,mCAAmC;AAC1E,WAAQ,MAAM,qEAAqE;AACnF,SAAM,IAAI,MAAM;;EAGlB,MAAM,aAAa,SAAS;AAC5B,MAAI,CAAC,WAAW,QACd,OAAM,IAAI,MAAM,WAAW,SAAS;EAGtC,MAAM,qBAAqB,WAAW,sBAAsB;AAC5D,MAAI,mBAAmB,WAAW,EAChC,OAAM,IAAI,MAAM,8CAA8C,mBAAmB;EAEnF,MAAM,WAAW,mBAAmB;AACpC,MAAI,CAAC,YAAY,CAAC,SAAS,eAAe,CAAC,SAAS,UAClD,OAAM,IAAI,MAAM;EAGlB,MAAM,SAAS;GACb,mBAAmB,IAAI,kBAAkB;IACvC,aAAa,SAAS;IACtB,WAAW,SAAS;IACpB,aAAa,MAAM,KAAK,SAAS,cAAc;;GAEjD,MAAM,WAAW;;AAGnB,UAAQ,MAAM;AACd,SAAO;UAEAA,OAAY;AACnB,UAAQ,MAAM,oEAAoE;AAClF,QAAM"}