{"version":3,"file":"modal.js","names":[],"sources":["../../../../../../../../../src/core/WebAuthnManager/LitComponents/modal.ts"],"sourcesContent":["// Import types and components needed for mount functions\nimport { TransactionInputWasm, VRFChallenge } from '../../types';\nimport { IFRAME_MODAL_ID } from './IframeButtonWithTooltipConfirmer/tags';\nimport type IframeModalHost from './IframeModalConfirmer/IframeModalHost';\nimport type { SignerWorkerManagerContext } from '../SignerWorkerManager';\nimport type { TransactionSummary } from '../SignerWorkerManager/confirmTxFlow/types';\n\nexport { ModalTxConfirmElement } from './IframeModalConfirmer/ModalTxConfirmer';\nexport type {\n  ConfirmRenderMode,\n  ConfirmVariant,\n  SecureTxSummary,\n  TxAction,\n} from './IframeModalConfirmer/ModalTxConfirmer';\n\n// ========= Iframe Modal helpers =========\n\nexport async function ensureIframeModalDefined(): Promise<void> {\n  if (customElements.get(IFRAME_MODAL_ID)) return;\n  await new Promise<void>((resolve, reject) => {\n    const existing = document.querySelector(`script[data-w3a=\"${IFRAME_MODAL_ID}\"]`) as HTMLScriptElement | null;\n    if (existing) {\n      existing.addEventListener('load', () => resolve(), { once: true });\n      existing.addEventListener('error', (e) => reject(e), { once: true });\n      return;\n    }\n    const script = document.createElement('script');\n    script.type = 'module';\n    script.async = true;\n    script.dataset.w3a = IFRAME_MODAL_ID;\n    script.src = `/sdk/embedded/${IFRAME_MODAL_ID}.js`;\n    script.onload = () => resolve();\n    script.onerror = (e) => {\n      console.error('[LitComponents/modal] Failed to load iframe modal host bundle');\n      reject(e);\n    };\n    document.head.appendChild(script);\n  });\n}\n\nexport async function mountIframeModalHostWithHandle({\n  ctx,\n  summary,\n  txSigningRequests,\n  vrfChallenge,\n  loading,\n  theme,\n}: {\n  ctx: SignerWorkerManagerContext,\n  summary: TransactionSummary,\n  txSigningRequests?: TransactionInputWasm[],\n  vrfChallenge?: VRFChallenge,\n  loading?: boolean,\n  theme?: 'dark' | 'light',\n}): Promise<{ element: IframeModalHost; close: (confirmed: boolean) => void }> {\n  await ensureIframeModalDefined();\n  const el = document.createElement(IFRAME_MODAL_ID) as IframeModalHost;\n  el.nearAccountId = ctx.userPreferencesManager.getCurrentUserAccountId() || '';\n  el.txSigningRequests = txSigningRequests || [];\n  el.intentDigest = summary?.intentDigest;\n  if (vrfChallenge) {\n    el.vrfChallenge = vrfChallenge;\n  }\n  el.showLoading = !!loading;\n  if (theme) {\n    el.theme = theme;\n  }\n  document.body.appendChild(el);\n  const close = (_confirmed: boolean) => { try { el.remove(); } catch {} };\n  return { element: el, close };\n}\n\nexport async function awaitIframeModalDecisionWithHandle({\n  ctx,\n  summary,\n  txSigningRequests,\n  vrfChallenge,\n  theme,\n}: {\n  ctx: SignerWorkerManagerContext,\n  summary: TransactionSummary,\n  txSigningRequests?: TransactionInputWasm[],\n  vrfChallenge?: VRFChallenge,\n  theme?: 'dark' | 'light',\n}): Promise<{\n  confirmed: boolean;\n  handle: { element: IframeModalHost; close: (confirmed: boolean) => void }\n}> {\n  await ensureIframeModalDefined();\n  return new Promise((resolve) => {\n    const el = document.createElement(IFRAME_MODAL_ID) as IframeModalHost;\n    el.nearAccountId = ctx.userPreferencesManager.getCurrentUserAccountId() || '';\n    el.txSigningRequests = txSigningRequests || [];\n    el.intentDigest = summary?.intentDigest;\n    if (vrfChallenge) {\n      el.vrfChallenge = vrfChallenge;\n    }\n    if (theme) {\n      el.theme = theme;\n    }\n\n    const onConfirm = (e: Event) => {\n      const ce = e as CustomEvent<{ confirmed: boolean; error?: string }>;\n      cleanup();\n      const ok = !!(ce?.detail?.confirmed);\n      resolve({\n        confirmed: ok,\n        handle: {\n          element: el,\n          close: (_confirmed: boolean) => { try { el.remove(); } catch {} }\n        }\n      });\n    };\n    const onCancel = () => {\n      cleanup();\n      resolve({\n        confirmed: false,\n        handle: {\n          element: el,\n          close: (_confirmed: boolean) => { try { el.remove(); } catch {} }\n        }\n      });\n    };\n\n    const cleanup = () => {\n      try { el.removeEventListener('w3a:modal-confirm', onConfirm as EventListener); } catch {}\n      try { el.removeEventListener('w3a:modal-cancel', onCancel as EventListener); } catch {}\n    };\n\n    el.addEventListener('w3a:modal-confirm', onConfirm as EventListener);\n    el.addEventListener('w3a:modal-cancel', onCancel as EventListener);\n    document.body.appendChild(el);\n  });\n}\n"],"mappings":";;;AAiBA,eAAsB,2BAA0C;AAC9D,KAAI,eAAe,IAAI,iBAAkB;AACzC,OAAM,IAAI,SAAe,SAAS,WAAW;EAC3C,MAAM,WAAW,SAAS,cAAc,oBAAoB,gBAAgB;AAC5E,MAAI,UAAU;AACZ,YAAS,iBAAiB,cAAc,WAAW,EAAE,MAAM;AAC3D,YAAS,iBAAiB,UAAU,MAAM,OAAO,IAAI,EAAE,MAAM;AAC7D;;EAEF,MAAM,SAAS,SAAS,cAAc;AACtC,SAAO,OAAO;AACd,SAAO,QAAQ;AACf,SAAO,QAAQ,MAAM;AACrB,SAAO,MAAM,iBAAiB,gBAAgB;AAC9C,SAAO,eAAe;AACtB,SAAO,WAAW,MAAM;AACtB,WAAQ,MAAM;AACd,UAAO;;AAET,WAAS,KAAK,YAAY;;;AAI9B,eAAsB,+BAA+B,EACnD,KACA,SACA,mBACA,cACA,SACA,SAQ6E;AAC7E,OAAM;CACN,MAAM,KAAK,SAAS,cAAc;AAClC,IAAG,gBAAgB,IAAI,uBAAuB,6BAA6B;AAC3E,IAAG,oBAAoB,qBAAqB;AAC5C,IAAG,eAAe,SAAS;AAC3B,KAAI,aACF,IAAG,eAAe;AAEpB,IAAG,cAAc,CAAC,CAAC;AACnB,KAAI,MACF,IAAG,QAAQ;AAEb,UAAS,KAAK,YAAY;CAC1B,MAAM,SAAS,eAAwB;AAAE,MAAI;AAAE,MAAG;UAAkB;;AACpE,QAAO;EAAE,SAAS;EAAI;;;AAGxB,eAAsB,mCAAmC,EACvD,KACA,SACA,mBACA,cACA,SAUC;AACD,OAAM;AACN,QAAO,IAAI,SAAS,YAAY;EAC9B,MAAM,KAAK,SAAS,cAAc;AAClC,KAAG,gBAAgB,IAAI,uBAAuB,6BAA6B;AAC3E,KAAG,oBAAoB,qBAAqB;AAC5C,KAAG,eAAe,SAAS;AAC3B,MAAI,aACF,IAAG,eAAe;AAEpB,MAAI,MACF,IAAG,QAAQ;EAGb,MAAM,aAAa,MAAa;GAC9B,MAAM,KAAK;AACX;GACA,MAAM,KAAK,CAAC,CAAE,IAAI,QAAQ;AAC1B,WAAQ;IACN,WAAW;IACX,QAAQ;KACN,SAAS;KACT,QAAQ,eAAwB;AAAE,UAAI;AAAE,UAAG;cAAkB;;;;;EAInE,MAAM,iBAAiB;AACrB;AACA,WAAQ;IACN,WAAW;IACX,QAAQ;KACN,SAAS;KACT,QAAQ,eAAwB;AAAE,UAAI;AAAE,UAAG;cAAkB;;;;;EAKnE,MAAM,gBAAgB;AACpB,OAAI;AAAE,OAAG,oBAAoB,qBAAqB;WAAqC;AACvF,OAAI;AAAE,OAAG,oBAAoB,oBAAoB;WAAoC;;AAGvF,KAAG,iBAAiB,qBAAqB;AACzC,KAAG,iBAAiB,oBAAoB;AACxC,WAAS,KAAK,YAAY"}