{"version":3,"file":"userPreferences.js","names":["error: any"],"sources":["../../../../../../../../src/core/WebAuthnManager/userPreferences.ts"],"sourcesContent":["import { ConfirmationConfig, DEFAULT_CONFIRMATION_CONFIG } from '../types/signer-worker';\nimport type { AccountId } from '../types/accountIds';\nimport { IndexedDBManager, type IndexedDBEvent } from '../IndexedDBManager';\n\n\nexport class UserPreferencesManager {\n  private themeChangeListeners: Set<(theme: 'dark' | 'light') => void> = new Set();\n  private currentUserAccountId: AccountId | undefined;\n  private confirmationConfig: ConfirmationConfig = DEFAULT_CONFIRMATION_CONFIG;\n\n  constructor() {\n    // Load user settings asynchronously - don't block constructor\n    this.initializeUserSettings();\n\n    // Subscribe to IndexedDB change events for automatic sync\n    this.subscribeToIndexedDBChanges();\n  }\n\n  /**\n   * Register a callback for theme change events\n   */\n  onThemeChange(callback: (theme: 'dark' | 'light') => void): () => void {\n    this.themeChangeListeners.add(callback);\n    return () => {\n      this.themeChangeListeners.delete(callback);\n    };\n  }\n\n  /**\n   * Notify all registered listeners of theme changes\n   */\n  private notifyThemeChange(theme: 'dark' | 'light'): void {\n    if (this.themeChangeListeners.size === 0) {\n      console.warn(`[UserPreferencesManager]: No listeners registered, theme change will not propagate.`);\n      return;\n    }\n\n    let index = 0;\n    this.themeChangeListeners.forEach((listener) => {\n      index++;\n      try {\n        listener(theme);\n      } catch (error: any) {\n      }\n    });\n  }\n\n  private async initializeUserSettings(): Promise<void> {\n    try {\n      await this.loadUserSettings();\n    } catch (error) {\n      console.warn('[WebAuthnManager]: Failed to initialize user settings:', error);\n      // Keep default settings if loading fails\n    }\n  }\n\n  /**\n   * Subscribe to IndexedDB change events for automatic synchronization\n   */\n  private subscribeToIndexedDBChanges(): void {\n    // Subscribe to IndexedDB change events\n    this.unsubscribeFromIndexedDB = IndexedDBManager.clientDB.onChange((event) => {\n      this.handleIndexedDBEvent(event);\n    });\n  }\n\n  /**\n   * Handle IndexedDB change events.\n   * @param event - The IndexedDBEvent: `user-updated`, `preferences-updated`, `user-deleted` to handle.\n   */\n  private async handleIndexedDBEvent(event: IndexedDBEvent): Promise<void> {\n    try {\n      switch (event.type) {\n        case 'preferences-updated':\n          // Check if this affects the current user\n          if (event.accountId === this.currentUserAccountId) {\n            await this.reloadUserSettings();\n          }\n          break;\n\n        case 'user-updated':\n          // Check if this affects the current user\n          if (event.accountId === this.currentUserAccountId) {\n            await this.reloadUserSettings();\n          }\n          break;\n\n        case 'user-deleted':\n          // Check if the deleted user was the current user\n          if (event.accountId === this.currentUserAccountId) {\n            this.currentUserAccountId = undefined;\n            this.confirmationConfig = DEFAULT_CONFIRMATION_CONFIG;\n          }\n          break;\n      }\n    } catch (error) {\n      console.warn('[WebAuthnManager]: Error handling IndexedDB event:', error);\n    }\n  }\n\n  /**\n   * Unsubscribe function for IndexedDB events\n   */\n  private unsubscribeFromIndexedDB?: () => void;\n\n  /**\n   * Clean up resources and unsubscribe from events\n   */\n  destroy(): void {\n    if (this.unsubscribeFromIndexedDB) {\n      this.unsubscribeFromIndexedDB();\n      this.unsubscribeFromIndexedDB = undefined;\n    }\n    // Clear all theme change listeners\n    this.themeChangeListeners.clear();\n  }\n\n  getCurrentUserAccountId(): AccountId {\n    if (!this.currentUserAccountId) {\n      throw new Error('No current user set');\n    }\n    return this.currentUserAccountId;\n  }\n\n  getConfirmationConfig(): ConfirmationConfig {\n    return this.confirmationConfig;\n  }\n\n  setCurrentUser(nearAccountId: AccountId): void {\n    this.currentUserAccountId = nearAccountId;\n    // Load settings for the new user\n    this.loadSettingsForUser(nearAccountId);\n  }\n\n  /**\n   * Load settings for a specific user\n   */\n  private async loadSettingsForUser(nearAccountId: AccountId): Promise<void> {\n    const user = await IndexedDBManager.clientDB.getUser(nearAccountId);\n    if (user?.preferences?.confirmationConfig) {\n      this.confirmationConfig = {\n        ...DEFAULT_CONFIRMATION_CONFIG,\n        ...user.preferences.confirmationConfig\n      };\n    } else {\n      // Reset to defaults if user has no preferences\n      this.confirmationConfig = DEFAULT_CONFIRMATION_CONFIG;\n    }\n  }\n\n  /**\n   * Reload current user settings from IndexedDB\n   */\n  async reloadUserSettings(): Promise<void> {\n    await this.loadSettingsForUser(this.getCurrentUserAccountId());\n  }\n\n  /**\n   * Set confirmation behavior\n   */\n  setConfirmBehavior(behavior: 'requireClick' | 'autoProceed'): void {\n    this.confirmationConfig = {\n      ...this.confirmationConfig,\n      behavior\n    };\n    this.saveUserSettings();\n  }\n\n  /**\n   * Set confirmation configuration\n   */\n  setConfirmationConfig(config: ConfirmationConfig): void {\n    this.confirmationConfig = {\n      ...DEFAULT_CONFIRMATION_CONFIG,\n      ...config\n    };\n    this.saveUserSettings();\n  }\n\n  /**\n   * Load user confirmation settings from IndexedDB\n   */\n  async loadUserSettings(): Promise<void> {\n    const user = await IndexedDBManager.clientDB.getLastUser();\n    if (user) {\n      this.currentUserAccountId = user.nearAccountId;\n      // Load user's confirmation config if it exists, otherwise keep defaults\n      if (user.preferences?.confirmationConfig) {\n        this.confirmationConfig = {\n          ...DEFAULT_CONFIRMATION_CONFIG,\n          ...user.preferences.confirmationConfig\n        };\n      } else {\n        console.debug('[WebAuthnManager]: No user preferences found, using defaults');\n      }\n    } else {\n      console.debug('[WebAuthnManager]: No last user found, using default settings');\n    }\n  }\n\n  /**\n   * Save current confirmation settings to IndexedDB\n   */\n  async saveUserSettings(): Promise<void> {\n    const currentUserAccountId = this.getCurrentUserAccountId();\n    try {\n      // Save confirmation config (which includes theme)\n      await IndexedDBManager.clientDB.updatePreferences(currentUserAccountId, {\n        confirmationConfig: this.confirmationConfig,\n      });\n    } catch (error) {\n      console.warn('[WebAuthnManager]: Failed to save user settings:', error);\n    }\n  }\n\n  /**\n   * Get user theme preference from IndexedDB\n   */\n  async getCurrentUserAccountIdTheme(): Promise<'dark' | 'light' | null> {\n    const currentUserAccountId = this.getCurrentUserAccountId();\n    try {\n      return await IndexedDBManager.clientDB.getTheme(currentUserAccountId);\n    } catch (error) {\n      console.warn('[WebAuthnManager]: Failed to get user theme:', error);\n      return null;\n    }\n  }\n\n  getUserTheme(): 'dark' | 'light' {\n    return this.confirmationConfig.theme;\n  }\n\n  /**\n   * Set user theme preference in IndexedDB\n   */\n  async setUserTheme(theme: 'dark' | 'light'): Promise<void> {\n    const currentUserAccountId = this.getCurrentUserAccountId();\n    try {\n      await IndexedDBManager.clientDB.setTheme(currentUserAccountId, theme);\n      // Also update the current context\n      this.confirmationConfig = {\n        ...this.confirmationConfig,\n        theme\n      };\n      // Notify all listeners of theme change\n      this.notifyThemeChange(theme);\n    } catch (error) {\n      console.error('[UserPreferencesManager]: Failed to save user theme:', error);\n    }\n  }\n}\n\n// Create and export singleton instance\nconst UserPreferencesInstance = new UserPreferencesManager();\nexport default UserPreferencesInstance;"],"mappings":"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"}