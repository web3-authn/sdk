{"version":3,"file":"sanitization.js","names":[],"sources":["../../../../../../../../src/core/ServiceIframe/sanitization.ts"],"sourcesContent":["/**\n * Security utilities for ServiceIframe HTML generation\n * Prevents injection attacks in srcdoc and HTML generation\n */\n\n/**\n * Sanitizes sdkBasePath to prevent injection attacks\n *\n * Removes or normalizes:\n * - HTML/JS special characters that could break out of attributes\n * - Path traversal attempts (../)\n * - Dangerous protocols at the beginning (javascript:, data:, vbscript:)\n * - Duplicate slashes, while preserving scheme separators (e.g., https://)\n *\n * Supports both path-only inputs (e.g., \"/sdk\") and absolute URLs\n * (e.g., \"https://wallet.example.com/sdk\").\n */\nexport function sanitizeSdkBasePath(path: string): string {\n  let p = String(path ?? '').trim();\n\n  // Remove characters unsafe for HTML/JS attribute contexts\n  p = p.replace(/[<>\"']/g, '');\n\n  // Remove protocol injection only at the start (ignore in queries/fragments)\n  p = p\n    .replace(/^\\s*javascript:/i, '')\n    .replace(/^\\s*data:/i, '')\n    .replace(/^\\s*vbscript:/i, '');\n\n  // Remove path traversal attempts\n  p = p.replace(/\\.\\./g, '');\n\n  // Collapse duplicate slashes but DO NOT touch the scheme separator (\"://\")\n  p = p.replace(/([^:])\\/{2,}/g, '$1/');\n\n  // If this is a plain path (not an absolute URL), normalize leading slash\n  const isAbsoluteUrl = /^[a-zA-Z][a-zA-Z0-9+.-]*:\\/\\//.test(p);\n  if (!isAbsoluteUrl) {\n    p = p.replace(/^\\/+/, '/');\n  }\n\n  // Remove a single trailing slash (but not if it's the root \"/\")\n  if (p.length > 1) {\n    p = p.replace(/\\/$/, '');\n  }\n\n  return p;\n}\n\n/**\n * Escapes HTML attribute values to prevent injection\n *\n * Converts special characters to HTML entities:\n * - & -> &amp;\n * - \" -> &quot;\n * - ' -> &#x27;\n * - < -> &lt;\n * - > -> &gt;\n */\nexport function escapeHtmlAttribute(value: string): string {\n  return value\n    .replace(/&/g, '&amp;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n}\n\n/**\n * Validates that a path is safe for use in HTML attributes\n *\n * @param path - The path to validate\n * @returns true if the path is safe, false otherwise\n */\nexport function isValidSdkBasePath(path: string): boolean {\n  // Check for dangerous patterns\n  const dangerousPatterns = [\n    /[<>\"']/,           // HTML/JS special chars\n    /\\.\\./,             // Path traversal\n    /javascript:/i,     // Protocol injection\n    /data:/i,           // Data URI\n    /vbscript:/i,       // VBScript\n    /file:/i,           // File protocol (security risk)\n    /ftp:/i,            // FTP protocol (not suitable for web)\n  ];\n\n  // Additional validation for absolute URLs\n  if (/^[a-zA-Z][a-zA-Z0-9+.-]*:\\/\\//.test(path)) {\n    try {\n      const url = new URL(path);\n      // Only allow HTTPS in production, HTTP for localhost\n      if (url.protocol !== 'https:' && !url.hostname.match(/^(localhost|127\\.0\\.0\\.1|::1)(:\\d+)?$/)) {\n        return false;\n      }\n    } catch {\n      return false; // Invalid URL\n    }\n  }\n\n  return !dangerousPatterns.some(pattern => pattern.test(path));\n}\n\n"],"mappings":";;;;;;;;;;;;;;;;;AAiBA,SAAgB,oBAAoB,MAAsB;CACxD,IAAI,IAAI,OAAO,QAAQ,IAAI;AAG3B,KAAI,EAAE,QAAQ,WAAW;AAGzB,KAAI,EACD,QAAQ,oBAAoB,IAC5B,QAAQ,cAAc,IACtB,QAAQ,kBAAkB;AAG7B,KAAI,EAAE,QAAQ,SAAS;AAGvB,KAAI,EAAE,QAAQ,iBAAiB;CAG/B,MAAM,gBAAgB,gCAAgC,KAAK;AAC3D,KAAI,CAAC,cACH,KAAI,EAAE,QAAQ,QAAQ;AAIxB,KAAI,EAAE,SAAS,EACb,KAAI,EAAE,QAAQ,OAAO;AAGvB,QAAO;;;;;;;;;;;;AAaT,SAAgB,oBAAoB,OAAuB;AACzD,QAAO,MACJ,QAAQ,MAAM,SACd,QAAQ,MAAM,UACd,QAAQ,MAAM,UACd,QAAQ,MAAM,QACd,QAAQ,MAAM"}