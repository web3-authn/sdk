{"version":3,"file":"deviceDetection.js","names":[],"sources":["../../../src/react/deviceDetection.ts"],"sourcesContent":["/**\n * Device detection utilities for camera and UI optimization\n */\n\nexport type DeviceType = 'mobile' | 'tablet' | 'desktop';\nexport type CameraFacingMode = 'user' | 'environment';\n\n/**\n * Detects the current device type based on multiple indicators\n */\nexport const detectDeviceType = (): DeviceType => {\n  // Method 1: User agent detection\n  const userAgent = navigator.userAgent.toLowerCase();\n  const isMobileUA = /android|iphone|ipod|blackberry|iemobile|opera mini/i.test(userAgent);\n  const isTabletUA = /ipad|tablet|kindle|playbook|silk/i.test(userAgent);\n\n  // Method 2: Touch and screen size detection\n  const isTouchDevice = navigator.maxTouchPoints > 0;\n  const screenWidth = window.screen.width;\n  const isSmallScreen = screenWidth <= 480;\n  const isMediumScreen = screenWidth <= 1024;\n\n  // Method 3: Orientation support (mobile/tablet indicator)\n  const hasOrientation = 'orientation' in window;\n\n  // Determine device type with priority: mobile > tablet > desktop\n  if (isMobileUA || (isTouchDevice && isSmallScreen)) {\n    return 'mobile';\n  }\n\n  if (isTabletUA || (isTouchDevice && isMediumScreen && hasOrientation)) {\n    return 'tablet';\n  }\n\n  return 'desktop';\n};\n\n/**\n * Determines optimal camera facing mode based on device type\n * - Mobile/Tablet: Back camera (environment) for QR scanning\n * - Desktop/Laptop: Front camera (user) for video calls/selfies\n */\nexport const getOptimalCameraFacingMode = (): CameraFacingMode => {\n  const deviceType = detectDeviceType();\n\n  switch (deviceType) {\n    case 'mobile':\n    case 'tablet':\n      console.log(`${deviceType} device detected - using back camera (environment)`);\n      return 'environment';\n\n    case 'desktop':\n    default:\n      return 'user';\n  }\n};\n\n/**\n * Check if the current device is likely mobile\n */\nexport const isMobileDevice = (): boolean => {\n  return detectDeviceType() === 'mobile';\n};\n\n/**\n * Check if the current device supports touch\n */\nexport const isTouchDevice = (): boolean => {\n  return navigator.maxTouchPoints > 0;\n};\n\n/**\n * Get device capabilities for camera constraints\n */\nexport const getDeviceCapabilities = () => {\n  const deviceType = detectDeviceType();\n  const isTouch = isTouchDevice();\n  const facingMode = getOptimalCameraFacingMode();\n\n  return {\n    deviceType,\n    isTouch,\n    recommendedFacingMode: facingMode,\n    // Recommended camera constraints based on device\n    cameraConstraints: {\n      video: {\n        facingMode,\n        width: deviceType === 'mobile' ? { ideal: 720, min: 480 } : { ideal: 1280, min: 720 },\n        height: deviceType === 'mobile' ? { ideal: 720, min: 480 } : { ideal: 720, min: 480 },\n        aspectRatio: deviceType === 'mobile' ? { ideal: 1.0 } : { ideal: 16/9 }\n      }\n    }\n  };\n};"],"mappings":";;;;AAUA,MAAa,yBAAqC;CAEhD,MAAM,YAAY,UAAU,UAAU;CACtC,MAAM,aAAa,sDAAsD,KAAK;CAC9E,MAAM,aAAa,oCAAoC,KAAK;CAG5D,MAAM,gBAAgB,UAAU,iBAAiB;CACjD,MAAM,cAAc,OAAO,OAAO;CAClC,MAAM,gBAAgB,eAAe;CACrC,MAAM,iBAAiB,eAAe;CAGtC,MAAM,iBAAiB,iBAAiB;AAGxC,KAAI,cAAe,iBAAiB,cAClC,QAAO;AAGT,KAAI,cAAe,iBAAiB,kBAAkB,eACpD,QAAO;AAGT,QAAO;;;;;;;AAQT,MAAa,mCAAqD;CAChE,MAAM,aAAa;AAEnB,SAAQ,YAAR;EACE,KAAK;EACL,KAAK;AACH,WAAQ,IAAI,GAAG,WAAW;AAC1B,UAAO;EAET,KAAK;EACL,QACE,QAAO"}