name: deploy-cloudflare

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]

jobs:
  build-sdk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install deps (workspace)
        run: pnpm install --frozen-lockfile

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Add wasm target
        run: rustup target add wasm32-unknown-unknown

      - name: Install wasm-pack
        run: |
          curl -sSf https://rustwasm.github.io/wasm-pack/installer/init.sh | sh

      - name: Setup Bun (for worker bundling step in build.sh)
        uses: oven-sh/setup-bun@v2

      - name: Build SDK (@web3authn/passkey)
        run: pnpm --filter @web3authn/passkey build

  publish-sdk-r2:
    runs-on: ubuntu-latest
    needs: build-sdk
    permissions:
      contents: read
      id-token: write   # for cosign keyless signing
    env:
      R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install deps (workspace)
        run: pnpm install --frozen-lockfile

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Add wasm target
        run: rustup target add wasm32-unknown-unknown

      - name: Install wasm-pack
        run: |
          curl -sSf https://rustwasm.github.io/wasm-pack/installer/init.sh | sh

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Build SDK (@web3authn/passkey)
        run: pnpm --filter @web3authn/passkey build

      - name: Generate sha256 manifest (sorted)
        run: |
          cd passkey-sdk/dist
          find . -type f \
            ! -name 'manifest.json' \
            ! -name 'manifest.sig' \
            -exec sha256sum {} + | sort > manifest.sha256

      - name: Convert manifest to JSON
        run: |
          cd passkey-sdk/dist
          python - <<'PY'
          import json, pathlib
          entries = []
          for line in pathlib.Path('manifest.sha256').read_text().splitlines():
            parts = line.split(maxsplit=1)
            if len(parts) != 2: continue
            digest, path = parts
            entries.append({"path": path, "sha256": digest})
          pathlib.Path('manifest.json').write_text(json.dumps({"files": entries}, indent=2))
          PY

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: Sign manifest with cosign (keyless)
        env:
          COSIGN_EXPERIMENTAL: 'true'
        run: |
          cd passkey-sdk/dist
          cosign sign-blob --yes --output-signature manifest.sig manifest.json

      - name: Install AWS CLI
        run: |
          sudo apt-get update -y
          sudo apt-get install -y awscli

      - name: Publish to Cloudflare R2 (by commit SHA)
        env:
          PREFIX: releases/${{ github.sha }}
        run: |
          set -euxo pipefail
          test -n "$R2_ENDPOINT" && test -n "$R2_BUCKET"
          aws s3 sync passkey-sdk/dist s3://$R2_BUCKET/$PREFIX \
            --endpoint-url "$R2_ENDPOINT" --delete
          # Ensure correct MIME for wasm files
          for f in $(find passkey-sdk/dist -name "*.wasm" -type f); do
            key=${f#passkey-sdk/dist/}
            aws s3 cp "$f" s3://$R2_BUCKET/$PREFIX/"$key" \
              --endpoint-url "$R2_ENDPOINT" \
              --content-type application/wasm \
              --metadata-directive REPLACE
          done

      - name: Optionally publish under tag name when releasing
        if: startsWith(github.ref, 'refs/tags/')
        env:
          PREFIX: releases/${{ github.ref_name }}
        run: |
          set -euxo pipefail
          test -n "$R2_ENDPOINT" && test -n "$R2_BUCKET"
          aws s3 sync passkey-sdk/dist s3://$R2_BUCKET/$PREFIX \
            --endpoint-url "$R2_ENDPOINT" --delete
          for f in $(find passkey-sdk/dist -name "*.wasm" -type f); do
            key=${f#passkey-sdk/dist/}
            aws s3 cp "$f" s3://$R2_BUCKET/$PREFIX/"$key" \
              --endpoint-url "$R2_ENDPOINT" \
              --content-type application/wasm \
              --metadata-directive REPLACE
          done

  deploy-worker:
    runs-on: ubuntu-latest
    needs: build-sdk
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install deps (workspace)
        run: pnpm install --frozen-lockfile

      - name: Deploy Cloudflare Worker (relay)
        working-directory: examples/relay-cloudflare-worker
        run: |
          pnpm deploy

  deploy-pages:
    runs-on: ubuntu-latest
    needs: [build-sdk, publish-sdk-r2]
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      CF_PAGES_PROJECT_VITE: ${{ secrets.CF_PAGES_PROJECT_VITE }}
      CF_PAGES_PROJECT_WALLET: ${{ secrets.CF_PAGES_PROJECT_WALLET }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install deps (workspace)
        run: pnpm install --frozen-lockfile

      - name: Build example sites
        run: |
          pnpm -C examples/vite build
          pnpm -C examples/vite-secure build

      - name: Copy SDK runtime assets into Vite dist
        run: |
          mkdir -p examples/vite/dist/sdk examples/vite/dist/sdk/workers
          cp -R passkey-sdk/dist/esm/react/embedded/* examples/vite/dist/sdk/ || true
          cp -R passkey-sdk/dist/workers/* examples/vite/dist/sdk/workers/ || true
          mkdir -p examples/vite-secure/dist/sdk examples/vite-secure/dist/sdk/workers
          cp -R passkey-sdk/dist/esm/react/embedded/* examples/vite-secure/dist/sdk/ || true
          cp -R passkey-sdk/dist/workers/* examples/vite-secure/dist/sdk/workers/ || true

      - name: Install Wrangler
        run: pnpm add -g wrangler@3

      - name: Deploy Vite example to Cloudflare Pages
        run: |
          wrangler pages deploy examples/vite/dist --project-name "$CF_PAGES_PROJECT_VITE"

      - name: Deploy Vite Secure example to Cloudflare Pages
        run: |
          wrangler pages deploy examples/vite-secure/dist --project-name "$CF_PAGES_PROJECT_WALLET"
